{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CompetitorScope - Competitive Intelligence Web App\n\n## Overview\n\nCompetitorScope is a modern web application designed for competitive analysis and price monitoring across e-commerce competitors, now featuring Sydney Tools branding. The system allows users to track competitors by categories (like Automotive) and product types (like Jump Starters), monitor brand coverage, track pricing changes, and generate competitive intelligence dashboards. The application focuses on scraping competitor websites to collect product data, pricing information, and inventory status while providing insights on coverage gaps and pricing opportunities.\n\n**✅ REAL BROWSER AUTOMATION NOW WORKING (August 21, 2025):**\n- Playwright browser automation successfully extracting authentic product data\n- 48 real products total: 26 Sydney Tools only + 22 with Toolkit Depot competitor matches\n- Enhanced model number extraction handling multiple formats (dash separators, parentheses, alphanumeric codes)  \n- 22 products with active price comparisons showing Sydney Tools consistently cheaper\n- Cleaned up duplicate products (removed 7 duplicates with variant model numbers)\n- Perfect product matching: authentic data merged via relationships, no demo/fake data\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with Vite as the build tool and development server\n- **Routing**: Wouter for client-side routing with a clean, component-based structure\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and API data caching\n- **Styling**: Tailwind CSS with custom CSS variables for theming and a \"new-york\" style configuration\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API architecture with dedicated route handlers for different entities\n- **Development Integration**: Vite middleware integration for seamless full-stack development\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\n### Data Storage\n- **Database**: PostgreSQL configured through Drizzle ORM\n- **Schema Design**: Relational database with tables for competitors, categories, product types, pages, products, price snapshots, and tracking metadata\n- **Database Provider**: Configured for Neon Database in production with PostgreSQL dialect\n- **Migrations**: Drizzle Kit for database schema migrations and management\n- **Storage Architecture**: Factory pattern implementation with automatic selection between MemStorage (development) and DrizzleStorage (production) based on DATABASE_URL environment variable\n- **Database Connection**: Uses pg (node-postgres) driver with connection pooling for efficient database operations\n\n### Key Data Entities\n- **Competitors**: Store competitor information including site domains and tracking status\n- **Categories & Product Types**: Hierarchical organization of products (e.g., Automotive → Jump Starters)\n- **Pages**: URLs to scrape with page type classification (PLP/PDP) and tracking metadata\n- **Products**: Product catalog with brand normalization, specifications, and competitor associations\n- **Price Snapshots**: Historical pricing data with timestamps for trend analysis\n- **Tasks**: Scraping task management with status tracking\n\n### Frontend Application Structure\n- **Unified Layout**: Fixed header and navbar at app level with animated page transitions\n- **Dashboard**: Main analytics view with KPI metrics, brand coverage matrix, and price band analysis\n- **Product Catalog**: Comprehensive product listing with filtering and detailed product modals\n- **Competitor Management**: CRUD operations for competitor setup and configuration\n- **Page Management**: Interface for managing scraping targets and monitoring page status\n- **Category Explorer**: Hierarchical view of product categories and types\n- **Change Tracking**: Recent changes view with filtering and timeline analysis\n- **Admin Panel**: System administration and configuration management\n- **Page Transitions**: Smooth slide-up and fade-in animations for content while header/navbar remain static\n\n## External Dependencies\n\n### UI and Component Libraries\n- **Radix UI**: Comprehensive set of accessible UI primitives for building the component system\n- **Shadcn/ui**: Pre-built component library providing consistent design patterns\n- **Lucide React**: Icon library for consistent iconography throughout the application\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server with TypeScript support\n- **ESBuild**: JavaScript bundler for production builds\n- **TypeScript**: Type safety across the entire application stack\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe ORM for PostgreSQL with schema definition and query building\n- **Neon Database**: Cloud PostgreSQL provider for production deployment\n- **Drizzle Kit**: Database migration and schema management tools\n\n### Data Processing and Validation\n- **Zod**: Runtime type validation and schema parsing for API endpoints and forms\n- **React Hook Form**: Form handling with validation integration\n- **Date-fns**: Date manipulation and formatting utilities\n\n### Styling and CSS\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **PostCSS**: CSS processing with autoprefixer for browser compatibility\n- **Class Variance Authority**: Utility for creating consistent component variants\n- **Design System**: Sydney Tools branding with red (#CB0000), black, white, and grey color scheme\n- **Modern UI**: High-tech appearance with dark themes, gradient effects, and smooth animations\n\n### Development Experience\n- **Replit Integration**: Development environment integration with error handling and live reload\n- **Wouter**: Lightweight routing solution for single-page application navigation","size_bytes":6018},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/ai-model-extractor.ts":{"content":"import OpenAI from \"openai\";\n\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error(\"OPENAI_API_KEY must be set for model number extraction\");\n}\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function extractModelNumberWithAI(productName: string): Promise<string> {\n  if (!productName) return 'N/A';\n  \n  // First try pattern-based extraction for common formats\n  const patterns = [\n    // Model after dash: \"Product Name - MODEL123\"\n    /\\s-\\s([A-Z]{1,}[A-Z0-9]{2,}[A-Z0-9-]*)/i,\n    // Model in parentheses: \"(MODEL123)\" or \"(94065325i)\"\n    /\\(([A-Z0-9]{3,}[A-Z0-9-]*)\\)/i,\n    // Model at start after brand: \"Brand MODEL123 description\"\n    /^[A-Za-z\\s]+\\s([A-Z]{1,}[A-Z0-9]{2,}[A-Z0-9-]*)\\s/i,\n    // Alphanumeric codes: \"AE12000E\", \"SP61086\", \"GENIUS2X4\"\n    /\\b([A-Z]{2,}[0-9]{3,}[A-Z0-9]*)\\b/i,\n    // With hyphen: \"SPi-Pro25\", \"MA-61224\"\n    /\\b([A-Z]{2,}[A-Z0-9]*-[A-Z0-9]+)\\b/i,\n  ];\n  \n  for (const pattern of patterns) {\n    const match = productName.match(pattern);\n    if (match && match[1]) {\n      const model = match[1].trim();\n      // Skip if it's a common word or brand\n      const skipWords = ['Heavy', 'Duty', 'Standard', 'Premium', 'Digital', 'Smart', 'Multi', 'Battery', 'Charger'];\n      if (!skipWords.includes(model)) {\n        return model;\n      }\n    }\n  }\n  \n  // If no pattern matches, use AI extraction\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\", // Cheaper model for simple extraction tasks\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert at extracting model numbers from product names. Extract ONLY the model number/part number from the product name, excluding brand names. \n\nRules:\n- Return only the model number (e.g., \"SP61086\", \"MA61224\", \"GENIUS2X4\", \"SPi-Pro25\", \"KP1460\")\n- Look for patterns after dashes like \"- KP1460\"\n- Look for alphanumeric codes in parentheses like \"(940261345)\"\n- Do NOT include brand names (Schumacher, Matson, NOCO, SP Tools, Kincrome, etc.)\n- Do NOT include descriptive text, voltages, or specifications\n- If no clear model number exists, return \"N/A\"\n- Remove parentheses and brackets from model numbers\n- Keep alphanumeric characters, hyphens, and underscores only\n\nExamples:\n- \"Kincrome Battery Load Tester 6&12V - KP1460\" → \"KP1460\"\n- \"Schumacher SPi Pro25 (94065325i) 12V-25A Battery Charger\" → \"SPi-Pro25\"\n- \"Matson AE12000E 12V Battery Charger\" → \"AE12000E\"\n- \"SP Tools SP61086 6, 12 & 24V 26A Smart Battery Charger\" → \"SP61086\"\n- \"NOCO GENIUS2X4 6V/12V 8A Battery Charger\" → \"GENIUS2X4\"`\n        },\n        {\n          role: \"user\",\n          content: `Extract the model number from: \"${productName}\"`\n        }\n      ],\n      temperature: 0.1,\n      max_tokens: 50\n    });\n\n    const extractedModel = response.choices[0].message.content?.trim() || 'N/A';\n    \n    // Basic validation - ensure it's not a brand name\n    const brandNames = ['schumacher', 'matson', 'noco', 'sp tools', 'sydney tools', 'dewalt', 'makita'];\n    const lowerModel = extractedModel.toLowerCase();\n    \n    if (brandNames.some(brand => lowerModel.includes(brand))) {\n      return 'N/A';\n    }\n    \n    return extractedModel;\n    \n  } catch (error) {\n    console.error('Error extracting model number with AI:', error);\n    return 'N/A';\n  }\n}\n\nexport async function bulkExtractModelNumbers(products: Array<{id: string, name: string}>): Promise<Array<{id: string, modelNumber: string}>> {\n  const results = [];\n  \n  // Process in batches to avoid rate limits\n  const batchSize = 5;\n  for (let i = 0; i < products.length; i += batchSize) {\n    const batch = products.slice(i, i + batchSize);\n    const batchPromises = batch.map(async (product) => ({\n      id: product.id,\n      modelNumber: await extractModelNumberWithAI(product.name)\n    }));\n    \n    const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n    \n    // Small delay between batches\n    if (i + batchSize < products.length) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n  }\n  \n  return results;\n}","size_bytes":4111},"server/ai-service.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface ProductAnalysis {\n  brand: string;\n  model: string;\n  category: string;\n  subcategory: string;\n  specifications: string[];\n  matchConfidence: number;\n}\n\ninterface ProductMatch {\n  isSameProduct: boolean;\n  confidence: number;\n  reasoning: string;\n}\n\n// Analyze a product title to extract brand, category, and specifications\nexport async function analyzeProductTitle(title: string): Promise<ProductAnalysis> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a product data analyst specializing in tools and industrial equipment. \n          Analyze product titles and extract structured information.\n          Respond with JSON in this format: \n          { \n            \"brand\": \"brand name\", \n            \"model\": \"model number/name\",\n            \"category\": \"main category\",\n            \"subcategory\": \"specific type\",\n            \"specifications\": [\"spec1\", \"spec2\"],\n            \"matchConfidence\": 0.95\n          }`\n        },\n        {\n          role: \"user\",\n          content: `Analyze this product title: \"${title}\"`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      brand: result.brand || \"Unknown\",\n      model: result.model || \"\",\n      category: result.category || \"General\",\n      subcategory: result.subcategory || \"\",\n      specifications: result.specifications || [],\n      matchConfidence: result.matchConfidence || 0.5\n    };\n  } catch (error) {\n    console.error(\"Error analyzing product:\", error);\n    // Fallback to basic extraction\n    const brandMatch = title.match(/^(\\w+)/);\n    return {\n      brand: brandMatch ? brandMatch[1] : \"Unknown\",\n      model: \"\",\n      category: \"General\",\n      subcategory: \"\",\n      specifications: [],\n      matchConfidence: 0.3\n    };\n  }\n}\n\n// Check if two products from different sources are the same\nexport async function matchProducts(\n  product1: { title: string; price: number },\n  product2: { title: string; price: number }\n): Promise<ProductMatch> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a product matching expert. Compare two product listings and determine if they are the same product.\n          Consider brand, model numbers, specifications, and price similarity.\n          Respond with JSON: { \"isSameProduct\": boolean, \"confidence\": 0-1, \"reasoning\": \"brief explanation\" }`\n        },\n        {\n          role: \"user\",\n          content: `Product 1: \"${product1.title}\" - $${product1.price}\nProduct 2: \"${product2.title}\" - $${product2.price}\n\nAre these the same product?`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      isSameProduct: result.isSameProduct || false,\n      confidence: result.confidence || 0,\n      reasoning: result.reasoning || \"Unable to determine\"\n    };\n  } catch (error) {\n    console.error(\"Error matching products:\", error);\n    return {\n      isSameProduct: false,\n      confidence: 0,\n      reasoning: \"Error during matching\"\n    };\n  }\n}\n\n// Extract and normalize category structure from URL\nexport async function analyzeCategoryUrl(url: string): Promise<{\n  category: string;\n  subcategory: string;\n  expectedBrands: string[];\n}> {\n  const urlParts = url.split('/');\n  const categoryPath = urlParts.slice(urlParts.indexOf('category') + 1).join(' > ');\n  \n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `Analyze this category URL path and suggest the proper category structure and expected brands.\n          Respond with JSON: { \"category\": \"main\", \"subcategory\": \"specific\", \"expectedBrands\": [\"brand1\", \"brand2\"] }`\n        },\n        {\n          role: \"user\",\n          content: `Category path: ${categoryPath}\\nURL: ${url}`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      category: result.category || \"Tools\",\n      subcategory: result.subcategory || \"\",\n      expectedBrands: result.expectedBrands || []\n    };\n  } catch (error) {\n    console.error(\"Error analyzing category:\", error);\n    return {\n      category: \"Tools\",\n      subcategory: categoryPath,\n      expectedBrands: []\n    };\n  }\n}\n\n// Bulk analyze multiple products for batch import\nexport async function bulkAnalyzeProducts(\n  products: Array<{ title: string; price: number; url: string }>\n): Promise<Array<ProductAnalysis & { originalTitle: string; price: number; url: string }>> {\n  const analyses = await Promise.all(\n    products.map(async (product) => {\n      const analysis = await analyzeProductTitle(product.title);\n      return {\n        ...analysis,\n        originalTitle: product.title,\n        price: product.price,\n        url: product.url\n      };\n    })\n  );\n  \n  return analyses;\n}","size_bytes":5515},"server/competitor-scraper.ts":{"content":"import axios from 'axios';\nimport * as cheerio from 'cheerio';\nimport { extractModelNumberWithAI } from './ai-model-extractor';\n\nexport interface CompetitorProduct {\n  title: string;\n  price: number;\n  regularPrice?: number;\n  salePrice?: number;\n  image?: string;\n  url: string;\n  brand?: string;\n  model?: string;\n  category?: string;\n  sku?: string;\n  competitorName: string;\n}\n\nexport interface ScrapingResult {\n  products: CompetitorProduct[];\n  totalProducts: number;\n  categoryName: string;\n  competitorName: string;\n  sourceUrl: string;\n  extractedAt: string;\n}\n\nexport class CompetitorScraper {\n  private userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36';\n\n  private extractCompetitorName(url: string): string {\n    try {\n      const hostname = new URL(url).hostname.replace('www.', '');\n      const parts = hostname.split('.');\n      return parts[0].charAt(0).toUpperCase() + parts[0].slice(1);\n    } catch {\n      return 'Unknown Competitor';\n    }\n  }\n\n  private extractCategoryFromUrl(url: string): string {\n    const patterns = [\n      /\\/([^\\/]+)\\/battery-chargers/i,\n      /\\/category\\/([^\\/]+)/i,\n      /\\/([^\\/]+)\\/[^\\/]*$/i\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[1].replace(/-/g, ' ').replace(/_/g, ' ')\n          .split(' ')\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n          .join(' ');\n      }\n    }\n    return 'Products';\n  }\n\n  private extractBrand(title: string): string {\n    const brandPatterns = [\n      /^(SP Tools|Schumacher|Matson|NOCO|DeWalt|Makita|Milwaukee|Bosch|Ryobi|Ozito|SCA|Century|Arlec)/i,\n      /^([A-Z][A-Z0-9]+(?:\\s+[A-Z][a-z]+)?)/,\n      /^([A-Z][a-z]+)/\n    ];\n\n    for (const pattern of brandPatterns) {\n      const match = title.match(pattern);\n      if (match) {\n        return match[1].trim();\n      }\n    }\n    return 'Unknown';\n  }\n\n  private extractModel(title: string, brand: string): string {\n    // Extract model number patterns like SP61084, SP61093, etc.\n    const modelPatterns = [\n      /([A-Z]{2}\\d{5})/i,  // SP61084 format\n      /([A-Z]+\\d{3,})/i,   // General alphanumeric model\n      /(\\b\\d{5,}\\b)/,      // 5+ digit numbers\n      /(Model\\s+[A-Z0-9-]+)/i,\n      /([A-Z0-9-]{6,})/    // General model pattern\n    ];\n\n    for (const pattern of modelPatterns) {\n      const match = title.match(pattern);\n      if (match) {\n        return match[1].toUpperCase();\n      }\n    }\n\n    // Fallback: clean up title\n    return title.replace(brand, '').trim().replace(/^[-\\s]+/, '').split(' ')[0] || 'Unknown';\n  }\n\n  private parsePrice(priceText: string): number {\n    // Remove currency symbols and extra text, keep only numbers, dots, and commas\n    const cleanPrice = priceText.replace(/[^\\d.,]/g, '');\n    const numberPrice = parseFloat(cleanPrice.replace(/,/g, ''));\n    return isNaN(numberPrice) ? 0 : numberPrice;\n  }\n\n  private extractSalePrice($product: any): { regularPrice: number; salePrice: number } {\n    // Look for sale price patterns\n    const salePriceSelectors = [\n      '.price-was, .was-price, .old-price, .original-price',\n      '.price-now, .sale-price, .current-price, .special-price',\n      '.price-item--sale, .price--sale, .sale',\n      '.price .price-reduced, .reduced-price'\n    ];\n    \n    let regularPrice = 0;\n    let salePrice = 0;\n    \n    // Try to find both regular and sale prices\n    const wasPrice = $product.find('.price-was, .was-price, .old-price, .original-price').first();\n    const nowPrice = $product.find('.price-now, .sale-price, .current-price, .special-price, .price').first();\n    \n    if (wasPrice.length && nowPrice.length) {\n      // Both prices found - product is on sale\n      regularPrice = this.parsePrice(wasPrice.text().trim());\n      salePrice = this.parsePrice(nowPrice.text().trim());\n    } else {\n      // Try general price extraction\n      const priceElement = $product.find('.price').first();\n      if (priceElement.length) {\n        const priceText = priceElement.text().trim();\n        const price = this.parsePrice(priceText);\n        \n        // Check if this looks like a sale (contains \"was\" or crossed out text)\n        if (priceText.toLowerCase().includes('was') || $product.find('.price del, .price strike, .price .strike').length > 0) {\n          // Extract both prices from text\n          const priceMatches = priceText.match(/\\$[\\d,]+\\.?\\d*/g);\n          if (priceMatches && priceMatches.length >= 2) {\n            regularPrice = this.parsePrice(priceMatches[1]);\n            salePrice = this.parsePrice(priceMatches[0]);\n          } else {\n            salePrice = price;\n          }\n        } else {\n          // Regular price only\n          regularPrice = price;\n          salePrice = price;\n        }\n      }\n    }\n    \n    // Validate prices\n    if (salePrice <= 0) salePrice = regularPrice;\n    if (regularPrice <= 0) regularPrice = salePrice;\n    \n    return { regularPrice, salePrice };\n  }\n\n  private normalizeImageUrl(imageUrl: string, baseUrl: string): string {\n    if (!imageUrl) return '';\n    \n    if (imageUrl.startsWith('//')) {\n      return 'https:' + imageUrl;\n    }\n    \n    if (imageUrl.startsWith('/')) {\n      const base = new URL(baseUrl);\n      return `${base.protocol}//${base.hostname}${imageUrl}`;\n    }\n    \n    return imageUrl;\n  }\n\n  async scrapeToolkitDepot(url: string): Promise<ScrapingResult> {\n    try {\n      console.log(`Scraping Toolkit Depot: ${url}`);\n      \n      let allProducts: CompetitorProduct[] = [];\n      let currentPage = 1;\n      const maxPages = 3; // Limit to 3 pages since we expect ~22 products total\n      \n      const competitorName = this.extractCompetitorName(url);\n      const categoryName = this.extractCategoryFromUrl(url);\n      \n      while (currentPage <= maxPages) {\n        const pageUrl = currentPage === 1 ? url : `${url.split('?')[0]}?page=${currentPage}`;\n        console.log(`Scraping page ${currentPage}: ${pageUrl}`);\n        \n        const response = await axios.get(pageUrl, {\n          headers: { 'User-Agent': this.userAgent }\n        });\n\n        const $ = cheerio.load(response.data);\n        \n        const pageProducts = await this.extractProductsFromPage($, url, competitorName, categoryName, allProducts.length);\n        \n        if (pageProducts.length === 0) {\n          console.log(`No products found on page ${currentPage}, stopping pagination`);\n          break;\n        }\n        \n        allProducts.push(...pageProducts);\n        console.log(`Found ${pageProducts.length} products on page ${currentPage}, total: ${allProducts.length}`);\n        \n        // Check if there's a next page - look for rel=\"next\" link or pagination elements\n        const hasNextPage = $('link[rel=\"next\"], .pagination .next, .pagination a[rel=\"next\"], .next-page, a[aria-label=\"Next\"]').length > 0;\n        if (!hasNextPage) {\n          console.log('No next page found, stopping pagination');\n          break;\n        }\n        \n        currentPage++;\n        \n        // Add a small delay between requests to be respectful\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      console.log(`Extracted ${allProducts.length} total products from ${competitorName}`);\n\n      return {\n        products: allProducts,\n        totalProducts: allProducts.length,\n        categoryName,\n        competitorName: competitorName,\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error(`Error scraping ${url}:`, error);\n      return {\n        products: [],\n        totalProducts: 0,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: this.extractCompetitorName(url),\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    }\n  }\n\n  private async extractProductsFromPage($: any, baseUrl: string, competitorName: string, categoryName: string, startIndex: number): Promise<CompetitorProduct[]> {\n    const products: CompetitorProduct[] = [];\n\n    // Toolkit Depot specific selectors\n    const productSelectors = [\n      '.product-item',\n      '.product-card', \n      '.woocommerce-loop-product',\n      '.product',\n      '.product-wrapper',\n      '[class*=\"product\"]'\n    ];\n\n    let foundProducts = false;\n\n    for (const selector of productSelectors) {\n      const productElements = $(selector);\n      \n      if (productElements.length > 0) {\n        console.log(`Found ${productElements.length} products with selector: ${selector}`);\n        \n        const productArray = productElements.toArray();\n        for (let i = 0; i < productArray.length; i++) {\n          const element = productArray[i];\n          const $product = $(element);\n          \n          // Extract title\n          const titleSelectors = ['h2 a', 'h3 a', '.product-title a', '.woocommerce-loop-product__title', 'a[title]', '.product-name a'];\n          let title = '';\n          \n          for (const titleSel of titleSelectors) {\n            const titleEl = $product.find(titleSel).first();\n            if (titleEl.length) {\n              title = titleEl.attr('title') || titleEl.text().trim();\n              if (title) break;\n            }\n          }\n\n          // Extract price using enhanced method\n          const priceData = this.extractSalePrice($product);\n          const price = priceData.salePrice;\n\n          // Extract image\n          const imgSelectors = ['img', '.product-image img', '.wp-post-image'];\n          let image = '';\n          \n          for (const imgSel of imgSelectors) {\n            const imgEl = $product.find(imgSel).first();\n            if (imgEl.length) {\n              const src = imgEl.attr('src') || imgEl.attr('data-src') || imgEl.attr('data-lazy');\n              if (src) {\n                image = this.normalizeImageUrl(src, baseUrl);\n                break;\n              }\n            }\n          }\n\n          // Extract product URL\n          const linkSelectors = ['a', '.product-title a', 'h2 a', 'h3 a'];\n          let productUrl = baseUrl;\n          \n          for (const linkSel of linkSelectors) {\n            const linkEl = $product.find(linkSel).first();\n            if (linkEl.length) {\n              const href = linkEl.attr('href');\n              if (href) {\n                productUrl = href.startsWith('/') ? \n                  new URL(href, baseUrl).toString() : href;\n                break;\n              }\n            }\n          }\n\n          // Filter for battery chargers and relevant products - made more inclusive\n          if (title && (\n            title.toLowerCase().includes('charger') ||\n            title.toLowerCase().includes('battery') ||\n            baseUrl.toLowerCase().includes('charger') ||\n            title.toLowerCase().includes('jump starter') ||\n            title.toLowerCase().includes('jump-starter') ||\n            title.toLowerCase().includes('booster') ||\n            title.toLowerCase().includes('power') ||\n            // Include Kincrome and other battery-related brands\n            (title.toLowerCase().includes('kincrome') && title.toLowerCase().includes('starter'))\n          )) {\n            const brand = this.extractBrand(title);\n            const basicModel = this.extractModel(title, brand);\n            \n            // Use OpenAI for better model extraction if available\n            let enhancedModel = basicModel;\n            try {\n              if (process.env.OPENAI_API_KEY) {\n                enhancedModel = await extractModelNumberWithAI(title);\n                if (enhancedModel === 'N/A' || !enhancedModel) {\n                  enhancedModel = basicModel; // Fallback to basic extraction\n                }\n              }\n            } catch (error) {\n              console.warn('AI model extraction failed, using basic extraction:', error);\n              enhancedModel = basicModel;\n            }\n\n            const priceData = this.extractSalePrice($product);\n            const finalPrice = priceData.salePrice || price || 0;\n\n            products.push({\n              title: title,\n              price: finalPrice,\n              regularPrice: priceData.regularPrice,\n              salePrice: priceData.salePrice,\n              image: image,\n              url: productUrl,\n              brand: brand,\n              model: enhancedModel,\n              category: categoryName,\n              sku: `${competitorName.toUpperCase()}-${String(startIndex + products.length + 1).padStart(3, '0')}`,\n              competitorName: competitorName\n            });\n            foundProducts = true;\n          }\n        }\n        \n        if (foundProducts) break;\n      }\n    }\n\n    return products;\n  }\n\n  async scrapeGenericCompetitor(url: string): Promise<ScrapingResult> {\n    try {\n      console.log(`Scraping generic competitor: ${url}`);\n      \n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent }\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: CompetitorProduct[] = [];\n      const competitorName = this.extractCompetitorName(url);\n      const categoryName = this.extractCategoryFromUrl(url);\n\n      // Generic product selectors that work on most e-commerce sites\n      const productSelectors = [\n        '.product',\n        '.product-item',\n        '.product-card',\n        '[class*=\"product\"]',\n        '.item',\n        '[data-product]'\n      ];\n\n      for (const selector of productSelectors) {\n        const productElements = $(selector);\n        \n        if (productElements.length > 5) { // Only proceed if we find a reasonable number\n          console.log(`Found ${productElements.length} products with selector: ${selector}`);\n          \n          productElements.each((index: number, element: any) => {\n            if (products.length >= 50) return false; // Limit to 50 products\n            \n            const $product = $(element);\n            \n            // Extract title using various selectors\n            const title = $product.find('h1, h2, h3, h4, [class*=\"title\"], [class*=\"name\"]')\n              .first().text().trim() ||\n              $product.find('a').first().attr('title') || '';\n\n            // Extract price\n            const priceText = $product.find('[class*=\"price\"], .amount, [data-price]')\n              .first().text().trim();\n            const price = this.parsePrice(priceText);\n\n            // Extract image\n            const imgEl = $product.find('img').first();\n            const image = imgEl.length ? \n              this.normalizeImageUrl(imgEl.attr('src') || imgEl.attr('data-src') || '', url) : '';\n\n            // Extract product URL\n            const linkEl = $product.find('a').first();\n            const productUrl = linkEl.length && linkEl.attr('href') ?\n              (linkEl.attr('href')!.startsWith('/') ? \n                new URL(linkEl.attr('href')!, url).toString() : \n                linkEl.attr('href')!) : url;\n\n            if (title && title.length > 3) {\n              const brand = this.extractBrand(title);\n              const model = this.extractModel(title, brand);\n\n              products.push({\n                title: title,\n                price: price,\n                image: image,\n                url: productUrl,\n                brand: brand,\n                model: model,\n                category: categoryName,\n                sku: `${competitorName.toUpperCase()}-${String(products.length + 1).padStart(3, '0')}`,\n                competitorName: competitorName\n              });\n            }\n          });\n          \n          if (products.length > 0) break;\n        }\n      }\n\n      console.log(`Extracted ${products.length} products from ${competitorName}`);\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName,\n        competitorName,\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error(`Error scraping ${url}:`, error);\n      return {\n        products: [],\n        totalProducts: 0,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: this.extractCompetitorName(url),\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    }\n  }\n\n  async scrapeCompetitor(url: string): Promise<ScrapingResult> {\n    const hostname = new URL(url).hostname.toLowerCase();\n    \n    // Route to specific scrapers based on domain\n    if (hostname.includes('toolkitdepot')) {\n      return this.scrapeToolkitDepot(url);\n    }\n    \n    // Default to generic scraper for other competitors\n    return this.scrapeGenericCompetitor(url);\n  }\n}\n\nexport const competitorScraper = new CompetitorScraper();","size_bytes":16704},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport pg from \"pg\";\nimport * as schema from \"@shared/schema\";\n\nconst { Pool } = pg;\n\nlet db: ReturnType<typeof drizzle> | null = null;\nlet pool: Pool | null = null;\n\nexport function getDb() {\n  if (!db && process.env.DATABASE_URL) {\n    pool = new Pool({\n      connectionString: process.env.DATABASE_URL,\n    });\n    db = drizzle(pool, { schema });\n  }\n  \n  if (!db) {\n    throw new Error(\"Database connection not initialized. Check DATABASE_URL environment variable.\");\n  }\n  \n  return db;\n}\n\nexport function closeDb() {\n  if (pool) {\n    pool.end();\n    pool = null;\n    db = null;\n  }\n}","size_bytes":643},"server/extract-all-models.ts":{"content":"import { DrizzleStorage } from './storage.drizzle';\nimport { extractModelNumberWithAI } from './ai-model-extractor';\n\n// Script to extract model numbers for all products\nexport async function extractAllModelNumbers() {\n  const storage = new DrizzleStorage();\n  \n  console.log('Starting model number extraction for all products...');\n  \n  // Get all products\n  const products = await storage.listCatalogProducts();\n  \n  let extracted = 0;\n  let skipped = 0;\n  let failed = 0;\n  \n  for (const product of products) {\n    // Skip if already has a good model number\n    if (product.modelNumber && \n        product.modelNumber !== 'N/A' && \n        product.modelNumber !== 'Unknown' &&\n        product.modelNumber !== '') {\n      skipped++;\n      console.log(`✓ Skipping ${product.name} (already has: ${product.modelNumber})`);\n      continue;\n    }\n    \n    try {\n      // Extract model number\n      const modelNumber = await extractModelNumberWithAI(product.name);\n      \n      if (modelNumber && modelNumber !== 'N/A') {\n        // Update the product\n        await storage.updateProductModelNumber(product.id, modelNumber);\n        extracted++;\n        console.log(`✅ Extracted for ${product.name}: ${modelNumber}`);\n      } else {\n        console.log(`⚠️ No model found for ${product.name}`);\n      }\n      \n      // Small delay to avoid rate limits\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n    } catch (error: any) {\n      failed++;\n      console.error(`❌ Error processing ${product.name}: ${error.message}`);\n    }\n  }\n  \n  console.log('\\n=== Extraction Complete ===');\n  console.log(`✅ Extracted: ${extracted}`);\n  console.log(`⏭️ Skipped (already had): ${skipped}`);\n  console.log(`❌ Failed: ${failed}`);\n  console.log(`📊 Total products: ${products.length}`);\n  \n  return { extracted, skipped, failed, total: products.length };\n}\n\n// Run if called directly\nextractAllModelNumbers()\n  .then(results => {\n    console.log('Done!', results);\n    process.exit(0);\n  })\n  .catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });","size_bytes":2103},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { scheduler } from \"./scheduler\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    log(`✅ Daily price monitoring scheduler active - runs at 12:00 AM AEST`);\n  });\n})();\n","size_bytes":2187},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":3565},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8407},"server/playwright-scraper.ts":{"content":"import { chromium } from \"playwright\";\n\nasync function whichChromium(): Promise<string | undefined> {\n  try {\n    const { execSync } = await import(\"node:child_process\");\n    return execSync(\"which chromium\").toString().trim();\n  } catch { return undefined; }\n}\nconst sleep = (ms: number) => new Promise(r => setTimeout(r, ms));\n\nexport const playwrightScraper = {\n  async scrapeTotalTools(url: string) {\n    const execPath = await whichChromium();\n    const browser = await chromium.launch({\n      headless: true,\n      executablePath: execPath,\n      args: [\"--no-sandbox\",\"--disable-setuid-sandbox\",\"--disable-dev-shm-usage\"]\n    });\n\n    const ctx = await browser.newContext({\n      userAgent:\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115 Safari/537.36\",\n      viewport: { width: 1366, height: 900 }\n    });\n\n    const page = await ctx.newPage();\n    await page.goto(url, { waitUntil: \"domcontentloaded\", timeout: 60000 });\n    \n    // Wait for the product list to load\n    await page.waitForSelector('.product-item, .product', { timeout: 10000 }).catch(() => {});\n    \n    // Scroll down to trigger lazy loading of images\n    await page.waitForLoadState(\"networkidle\").catch(() => {});\n    for (let i = 0; i < 10; i++) { \n      await page.mouse.wheel(0, 1000); \n      await sleep(300); \n    }\n    \n    // Wait a bit more for images to load\n    await sleep(2000);\n\n    const products = await page.$$eval('.product-item, .product', (elements) => {\n      const items: any[] = [];\n      const seen = new Set<string>();\n      \n      for (const el of elements) {\n        try {\n          const card = el as HTMLElement;\n          \n          // Extract product URL\n          const linkEl = card.querySelector('a.product-item-link, a[href*=\"/electrical/\"], a[href*=\"/automotive/\"]');\n          const href = linkEl ? (linkEl as HTMLAnchorElement).href : '';\n          \n          if (!href || seen.has(href)) continue;\n          \n          // Extract title\n          const titleEl = card.querySelector('.product-item-name, .product-name, h3, .product-item-link');\n          const title = titleEl?.textContent?.trim() || '';\n          \n          if (!title) continue;\n          \n          // Extract price\n          let price = \"\";\n          const priceEl = card.querySelector('.price, [data-price-type=\"finalPrice\"], .regular-price, .special-price');\n          if (priceEl) {\n            price = priceEl.textContent?.replace(/\\s+/g, \" \").trim() || \"\";\n          }\n          \n          // Extract image - look for the actual product image\n          let image = null;\n          const imgEl = card.querySelector('img.product-image-photo, img[alt*=\"' + title.substring(0, 20) + '\"]') as HTMLImageElement;\n          if (imgEl) {\n            // Get the src attribute\n            image = imgEl.src || imgEl.getAttribute('data-src') || imgEl.getAttribute('data-lazy');\n            \n            // Check if it's a placeholder\n            if (image && image.includes('data:image') && image.includes('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=')) {\n              // Try to get a real image URL\n              const allImgs = card.querySelectorAll('img');\n              for (const img of allImgs) {\n                const src = (img as HTMLImageElement).src;\n                if (src && !src.includes('data:image') && src.includes('totaltools.com.au/media')) {\n                  image = src;\n                  break;\n                }\n              }\n            }\n          }\n          \n          // Extract brand from title\n          const brandMatch = title.match(/^([A-Z]+(?:\\s+[A-Z]+)?)\\s+/);\n          const brand = brandMatch ? brandMatch[1] : '';\n          \n          // Extract model number\n          const modelPatterns = [\n            /\\b([A-Z]{2,}\\d{4,}[A-Z]*)\\b/i,\n            /\\b([A-Z]+\\d+[A-Z]*\\d*)\\b/i,\n          ];\n          let model = '';\n          for (const pattern of modelPatterns) {\n            const match = title.match(pattern);\n            if (match) {\n              model = match[1];\n              break;\n            }\n          }\n\n          items.push({ title, price, url: href, image, brand, model });\n          seen.add(href);\n        } catch (err) {\n          continue;\n        }\n      }\n      return items;\n    });\n\n    await browser.close();\n\n    return {\n      products: products.map(p => ({\n        title: p.title,\n        priceRaw: p.price,\n        price: Number((p.price||\"\").replace(/[^0-9.]/g,\"\")) || 0,\n        image: p.image,\n        url: p.url,\n        brand: p.brand || \"\",\n        model: p.model || \"\",\n        category: \"Battery Chargers\",\n        sku: \"\",\n        competitorName: \"Total Tools\",\n        hasPromotion: false\n      })),\n      totalProducts: products.length,\n      categoryName: \"Battery Chargers\",\n      competitorName: \"Total Tools\",\n      sourceUrl: url,\n      extractedAt: new Date().toISOString(),\n      scraperUsed: \"Playwright\"\n    };\n  },\n\n  async scrapeSydneyTools(url: string) {\n    const execPath = await whichChromium();\n    const browser = await chromium.launch({\n      headless: true,\n      executablePath: execPath,\n      args: [\"--no-sandbox\",\"--disable-setuid-sandbox\",\"--disable-dev-shm-usage\"]\n    });\n\n    const ctx = await browser.newContext({\n      userAgent:\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115 Safari/537.36\",\n      viewport: { width: 1366, height: 900 }\n    });\n\n    const page = await ctx.newPage();\n    await page.goto(url, { waitUntil: \"domcontentloaded\", timeout: 60000 });\n    await page.waitForLoadState(\"networkidle\").catch(() => {});\n    for (let i = 0; i < 25; i++) { await page.mouse.wheel(0, 2000); await sleep(250); }\n\n    // For Trade Tools, use more generic selectors\n    const isTradeTools = url.includes('tradetools');\n    const productSelector = isTradeTools \n      ? \"a[href*='/p/'], article[class*='product'], div[class*='product-card'], div[class*='ProductCard']\"\n      : \"a[href^='/product/']\";\n\n    const products = await page.$$eval(productSelector, (elements) => {\n      const items: any[] = [];\n      const seen = new Set<string>();\n      \n      for (const el of elements) {\n        try {\n          // Get the product URL - either from an anchor or a data attribute\n          let href = \"\";\n          if (el.tagName === 'A') {\n            href = (el as HTMLAnchorElement).href;\n          } else {\n            const linkEl = el.querySelector('a');\n            if (linkEl) {\n              href = linkEl.href;\n            }\n          }\n          \n          if (!href || seen.has(href)) continue;\n\n          // Use the element as the card container\n          const card = el as HTMLElement;\n          \n          // Extract title from various possible locations\n          let title = \"\";\n          const titleSelectors = [\n            '.product-title', '.product-name', '[class*=\"ProductName\"]', \n            'h2', 'h3', 'h4', '.title', '[class*=\"title\"]'\n          ];\n          for (const selector of titleSelectors) {\n            const titleEl = card.querySelector(selector);\n            if (titleEl?.textContent) {\n              title = titleEl.textContent.trim();\n              break;\n            }\n          }\n          if (!title) continue;\n\n          // Extract price\n          let price = \"\";\n          const priceSelectors = [\n            '.price', '[class*=\"price\"]', '[data-testid*=\"price\"]',\n            '.amount', '[class*=\"Price\"]'\n          ];\n          for (const selector of priceSelectors) {\n            const priceEl = card.querySelector(selector);\n            if (priceEl?.textContent && /\\d/.test(priceEl.textContent)) {\n              price = priceEl.textContent.replace(/\\s+/g, \" \").trim();\n              break;\n            }\n          }\n          \n          // Fallback price extraction\n          if (!price) {\n            const m = (card.textContent || \"\").match(/\\$\\s?\\d[\\d,]*\\.?\\d{0,2}/);\n            price = m ? m[0] : \"\";\n          }\n\n          // Extract image\n          const img = card.querySelector(\"img\");\n          const image = img?.getAttribute(\"src\")\n            || img?.getAttribute(\"data-src\")\n            || img?.getAttribute(\"data-lazy\")\n            || (img?.getAttribute(\"srcset\")||\"\").split(\",\").pop()?.trim().split(\" \")[0]\n            || null;\n\n          items.push({ title, price, url: href, image });\n          seen.add(href);\n        } catch (err) {\n          // Skip this element if there's an error\n          continue;\n        }\n      }\n      return items;\n    });\n\n    await browser.close();\n\n    return {\n      products: products.map(p => ({\n        title: p.title,\n        priceRaw: p.price,\n        price: Number((p.price||\"\").replace(/[^0-9.]/g,\"\")) || 0,\n        image: p.image,\n        url: p.url,\n        brand: \"\",\n        model: \"\",\n        category: \"\",\n        sku: \"\",\n        competitorName: \"Sydney Tools\",\n        promotion: { hasPromotion: false }\n      })),\n      totalProducts: products.length,\n      categoryName: \"\",\n      competitorName: \"Sydney Tools\",\n      sourceUrl: url,\n      extractedAt: new Date().toISOString()\n    };\n  }\n};","size_bytes":9159},"server/product-matcher.ts":{"content":"import { storage } from './storage';\nimport { extractModelNumberWithAI } from './ai-model-extractor';\n\nexport interface ProductMatch {\n  catalogProductId: string;\n  modelNumber: string;\n  productName: string;\n  brand: string;\n  sydneyToolsPrice?: number;\n  competitorPrices: Array<{\n    competitorName: string;\n    price: number;\n    url: string;\n    lastUpdated: Date;\n  }>;\n  priceDifference?: number;\n  bestPrice?: number;\n  worstPrice?: number;\n}\n\nexport class ProductMatcher {\n  // Match products by model number and merge duplicates\n  async matchAndMergeProducts(): Promise<{\n    merged: number;\n    matched: number;\n    errors: string[];\n  }> {\n    const results = {\n      merged: 0,\n      matched: 0,\n      errors: [] as string[]\n    };\n\n    try {\n      // Get all catalog products\n      const products = await storage.listCatalogProducts();\n      \n      // Group products by model number\n      const modelGroups = new Map<string, any[]>();\n      \n      for (const product of products) {\n        if (product.modelNumber && \n            product.modelNumber !== 'N/A' && \n            product.modelNumber !== 'Unknown' &&\n            product.modelNumber !== '') {\n          \n          const existing = modelGroups.get(product.modelNumber) || [];\n          existing.push(product);\n          modelGroups.set(product.modelNumber, existing);\n        }\n      }\n      \n      // Process groups with duplicates\n      for (const [modelNumber, group] of modelGroups) {\n        if (group.length > 1) {\n          console.log(`Found ${group.length} products with model ${modelNumber}`);\n          \n          try {\n            // Use the first product as the master\n            const masterProduct = group[0];\n            \n            // Merge all competitor listings to the master product\n            for (let i = 1; i < group.length; i++) {\n              const duplicateProduct = group[i];\n              \n              // Get competitor listings for the duplicate\n              const listings = await storage.listListingsByProduct(duplicateProduct.id);\n              \n              // Transfer listings to master product - create new listing\n              for (const listing of listings) {\n                await storage.updateListing(listing.id, {\n                  productId: masterProduct.id\n                });\n                results.matched++;\n              }\n              \n              // Note: We can't delete catalog products yet - need to implement this method\n              // await storage.deleteCatalogProduct(duplicateProduct.id);\n              results.merged++;\n              \n              console.log(`Merged ${duplicateProduct.name} into ${masterProduct.name}`);\n            }\n          } catch (error: any) {\n            results.errors.push(`Error merging model ${modelNumber}: ${error.message}`);\n          }\n        }\n      }\n      \n      return results;\n    } catch (error: any) {\n      console.error('Error in matchAndMergeProducts:', error);\n      results.errors.push(error.message);\n      return results;\n    }\n  }\n  \n  // Get price comparison for all matched products\n  async getProductPriceComparison(): Promise<ProductMatch[]> {\n    const matches: ProductMatch[] = [];\n    \n    try {\n      // Get all catalog products\n      const products = await storage.listCatalogProducts();\n      \n      for (const product of products) {\n        // Skip if no model number\n        if (!product.modelNumber || product.modelNumber === 'N/A') continue;\n        \n        const match: ProductMatch = {\n          catalogProductId: product.id,\n          modelNumber: product.modelNumber,\n          productName: product.name,\n          brand: 'Unknown', // We'll get brand name later\n          competitorPrices: []\n        };\n        \n        // Get competitor listings for this product\n        const listings = await storage.listListingsByProduct(product.id);\n        \n        // Check if this is a Sydney Tools product (no competitor listings)\n        if (!listings || listings.length === 0) {\n          // This is our product\n          match.sydneyToolsPrice = parseFloat(product.price || '0');\n        }\n        \n        // Get competitor prices\n        for (const listing of listings) {\n          // Get latest snapshot for this listing\n          const snapshots = await storage.getListingHistory(listing.id, 1);\n          if (snapshots.length > 0) {\n            const latestSnapshot = snapshots[0];\n            match.competitorPrices.push({\n              competitorName: 'Competitor', // We'll enhance this later\n              price: parseFloat(latestSnapshot.price),\n              url: listing.url,\n              lastUpdated: latestSnapshot.createdAt\n            });\n          }\n        }\n        \n        // Calculate price differences\n        const allPrices = [\n          ...(match.sydneyToolsPrice ? [match.sydneyToolsPrice] : []),\n          ...match.competitorPrices.map(cp => cp.price)\n        ].filter(p => p > 0);\n        \n        if (allPrices.length > 1) {\n          match.bestPrice = Math.min(...allPrices);\n          match.worstPrice = Math.max(...allPrices);\n          match.priceDifference = match.worstPrice - match.bestPrice;\n        }\n        \n        matches.push(match);\n      }\n      \n      // Sort by price difference (biggest savings first)\n      matches.sort((a, b) => (b.priceDifference || 0) - (a.priceDifference || 0));\n      \n      return matches;\n    } catch (error) {\n      console.error('Error getting price comparison:', error);\n      return matches;\n    }\n  }\n  \n  // Enhanced model extraction for existing products\n  async enhanceModelNumbers(): Promise<{\n    updated: number;\n    errors: string[];\n  }> {\n    const results = {\n      updated: 0,\n      errors: [] as string[]\n    };\n    \n    try {\n      const products = await storage.listCatalogProducts();\n      \n      for (const product of products) {\n        // Skip if already has a good model number\n        if (product.modelNumber && \n            product.modelNumber !== 'N/A' && \n            product.modelNumber !== 'Unknown' &&\n            product.modelNumber !== '') {\n          continue;\n        }\n        \n        try {\n          // Use AI to extract model number\n          const modelNumber = await extractModelNumberWithAI(product.name);\n          \n          if (modelNumber && modelNumber !== 'N/A') {\n            // Note: We need to implement updateCatalogProduct method\n            // For now, we'll skip the update\n            // await storage.updateCatalogProduct(product.id, { modelNumber });\n            results.updated++;\n            console.log(`Would update model for ${product.name}: ${modelNumber}`);\n          }\n        } catch (error: any) {\n          results.errors.push(`Error updating ${product.name}: ${error.message}`);\n        }\n      }\n      \n      return results;\n    } catch (error: any) {\n      console.error('Error enhancing model numbers:', error);\n      results.errors.push(error.message);\n      return results;\n    }\n  }\n}\n\nexport const productMatcher = new ProductMatcher();","size_bytes":7007},"server/puppeteer-scraper.ts":{"content":"import puppeteer from 'puppeteer';\n\ninterface ScrapedProduct {\n  sku: string;\n  title: string;\n  price: number;\n  image: string;\n  url: string;\n  brand?: string;\n  model?: string;\n  category?: string;\n}\n\nexport class PuppeteerScraper {\n  \n  async scrapeSydneyTools(url: string): Promise<{\n    products: ScrapedProduct[];\n    totalPages: number;\n    currentPage: number;\n    totalProducts: number;\n    categoryName: string;\n  }> {\n    let browser;\n    \n    try {\n      console.log('Launching Puppeteer browser for:', url);\n      \n      browser = await puppeteer.launch({\n        headless: true,\n        executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',\n        args: [\n          '--no-sandbox',\n          '--disable-setuid-sandbox',\n          '--disable-dev-shm-usage',\n          '--disable-accelerated-2d-canvas',\n          '--no-first-run',\n          '--no-zygote',\n          '--single-process',\n          '--disable-gpu',\n          '--disable-features=VizDisplayCompositor'\n        ]\n      });\n      \n      const page = await browser.newPage();\n      \n      // Set viewport and user agent\n      await page.setViewport({ width: 1920, height: 1080 });\n      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36');\n      \n      console.log('Navigating to page...');\n      await page.goto(url, { \n        waitUntil: 'networkidle2', \n        timeout: 30000 \n      });\n      \n      console.log('Waiting for product cards to load...');\n      \n      // Wait for products to appear - try multiple selectors\n      try {\n        await page.waitForSelector('.ant-card.ant-card-bordered.product-card, .product-item, [data-testid=\"product\"]', { \n          timeout: 10000 \n        });\n      } catch (e) {\n        console.log('Product cards not found with primary selectors, trying alternative approach...');\n        await page.waitForTimeout(5000); // Wait 5 seconds for JS to fully load\n      }\n      \n      console.log('Extracting product data...');\n      \n      // Extract products using JavaScript execution in the browser\n      const products = await page.evaluate(() => {\n        const extractedProducts = [];\n        \n        // Multiple selectors to try\n        const selectors = [\n          '.ant-card.ant-card-bordered.product-card',\n          '.product-item',\n          '[data-testid=\"product\"]',\n          '.product-card',\n          '.product',\n          '[class*=\"product\"]'\n        ];\n        \n        let productElements = [];\n        for (const selector of selectors) {\n          productElements = Array.from(document.querySelectorAll(selector));\n          if (productElements.length > 0) {\n            console.log(`Found ${productElements.length} products with selector: ${selector}`);\n            break;\n          }\n        }\n        \n        if (productElements.length === 0) {\n          // Try to find any elements that might contain product info\n          const allDivs = Array.from(document.querySelectorAll('div'));\n          productElements = allDivs.filter(div => {\n            const text = div.textContent || '';\n            return text.includes('$') && (\n              text.toLowerCase().includes('charger') ||\n              text.toLowerCase().includes('battery') ||\n              text.toLowerCase().includes('jump') ||\n              text.toLowerCase().includes('starter')\n            );\n          });\n          console.log(`Found ${productElements.length} potential product elements by content`);\n        }\n        \n        productElements.forEach((element, index) => {\n          try {\n            // Extract title from various possible locations\n            let title = '';\n            \n            const titleSelectors = [\n              '.ant-card-meta-title',\n              '.product-title',\n              'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n              '[title]',\n              '[data-testid=\"product-title\"]'\n            ];\n            \n            for (const selector of titleSelectors) {\n              const titleEl = element.querySelector(selector);\n              if (titleEl) {\n                title = titleEl.textContent?.trim() || titleEl.getAttribute('title') || '';\n                if (title) break;\n              }\n            }\n            \n            // If no title found with selectors, try to extract from text content\n            if (!title) {\n              const text = element.textContent || '';\n              const lines = text.split('\\n').map(line => line.trim()).filter(line => line.length > 10);\n              // Look for a line that seems like a product title\n              for (const line of lines) {\n                if (line.toLowerCase().includes('charger') || \n                    line.toLowerCase().includes('battery') ||\n                    line.toLowerCase().includes('jump') ||\n                    line.toLowerCase().includes('starter')) {\n                  title = line;\n                  break;\n                }\n              }\n            }\n            \n            if (!title || title.length < 5) return;\n            \n            // Extract price\n            let price = 0;\n            const priceSelectors = [\n              '.price',\n              '.ant-typography-title',\n              '[class*=\"price\"]',\n              '.cost',\n              '.amount'\n            ];\n            \n            for (const selector of priceSelectors) {\n              const priceEl = element.querySelector(selector);\n              if (priceEl) {\n                const priceText = priceEl.textContent?.replace(/[^0-9.]/g, '');\n                price = parseFloat(priceText || '0');\n                if (price > 0) break;\n              }\n            }\n            \n            // If no price found with selectors, extract from text\n            if (price === 0) {\n              const text = element.textContent || '';\n              const priceMatch = text.match(/\\$(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/);\n              if (priceMatch) {\n                price = parseFloat(priceMatch[1].replace(/,/g, ''));\n              }\n            }\n            \n            if (price === 0) return;\n            \n            // Extract image\n            let image = '';\n            const imgEl = element.querySelector('img');\n            if (imgEl) {\n              image = imgEl.src || imgEl.getAttribute('data-src') || '';\n            }\n            \n            // Extract product URL\n            let productUrl = '';\n            const linkEl = element.querySelector('a') || element.closest('a');\n            if (linkEl) {\n              productUrl = linkEl.href || '';\n            }\n            \n            // Generate SKU and extract brand\n            const brand = title.split(' ')[0];\n            const sku = `${brand.toUpperCase().replace(/[^A-Z0-9]/g, '')}-${String(index + 1).padStart(3, '0')}`;\n            \n            extractedProducts.push({\n              sku,\n              title: title.trim(),\n              price,\n              image: image.startsWith('http') ? image : (image ? `https://sydneytools.com.au${image}` : ''),\n              url: productUrl.startsWith('http') ? productUrl : (productUrl ? `https://sydneytools.com.au${productUrl}` : ''),\n              brand,\n              model: title.replace(brand, '').trim(),\n              category: 'Car Battery Chargers'\n            });\n          } catch (error) {\n            console.error('Error extracting product:', error);\n          }\n        });\n        \n        return extractedProducts;\n      });\n      \n      console.log(`Puppeteer extracted ${products.length} products`);\n      \n      // Get category name\n      const categoryName = await page.evaluate(() => {\n        const selectors = [\n          'h1',\n          '.page-title',\n          '.category-title',\n          '.ant-breadcrumb-link:last-child'\n        ];\n        \n        for (const selector of selectors) {\n          const el = document.querySelector(selector);\n          if (el && el.textContent) {\n            return el.textContent.trim();\n          }\n        }\n        \n        return 'PRODUCTS';\n      });\n      \n      return {\n        products,\n        totalPages: Math.ceil(products.length / 20),\n        currentPage: 1,\n        totalProducts: products.length,\n        categoryName: categoryName.toUpperCase()\n      };\n      \n    } catch (error) {\n      console.error('Puppeteer scraping error:', error);\n      throw new Error(`Puppeteer scraping failed: ${error.message}`);\n    } finally {\n      if (browser) {\n        await browser.close();\n      }\n    }\n  }\n}\n\nexport const puppeteerScraper = new PuppeteerScraper();","size_bytes":8607},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { getStorage } from \"./storage.factory\";\nimport { \n  insertCompetitorSchema, insertPageSchema, insertProductSchema, insertTaskSchema,\n  insertBrandSchema, insertCatalogProductSchema, insertCompetitorListingSchema,\n  insertListingSnapshotSchema\n} from \"@shared/schema\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport { extractModelNumberWithAI, bulkExtractModelNumbers } from \"./ai-model-extractor\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const storage = getStorage();\n  \n  // Meta endpoints\n  app.get(\"/api/meta\", async (req, res) => {\n    const categories = await storage.getCategories();\n    const productTypes = await storage.getProductTypes();\n    const competitors = await storage.getCompetitors();\n    \n    res.json({ categories, productTypes, competitors });\n  });\n\n  // Competitor endpoints\n  app.get(\"/api/competitors\", async (req, res) => {\n    const competitors = await storage.getCompetitors();\n    res.json(competitors);\n  });\n\n  app.post(\"/api/competitors\", async (req, res) => {\n    try {\n      const validatedData = insertCompetitorSchema.parse(req.body);\n      const competitor = await storage.createCompetitor(validatedData);\n      res.json(competitor);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid competitor data\" });\n    }\n  });\n\n  app.put(\"/api/competitors/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertCompetitorSchema.partial().parse(req.body);\n      const competitor = await storage.updateCompetitor(id, updates);\n      \n      if (!competitor) {\n        return res.status(404).json({ error: \"Competitor not found\" });\n      }\n      \n      res.json(competitor);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid competitor data\" });\n    }\n  });\n\n  app.delete(\"/api/competitors/:id\", async (req, res) => {\n    const { id } = req.params;\n    const deleted = await storage.deleteCompetitor(id);\n    \n    if (!deleted) {\n      return res.status(404).json({ error: \"Competitor not found\" });\n    }\n    \n    res.json({ success: true });\n  });\n\n  // Pages endpoints\n  app.get(\"/api/pages\", async (req, res) => {\n    const { competitorId } = req.query;\n    \n    if (competitorId) {\n      const pages = await storage.getPagesByCompetitor(competitorId as string);\n      res.json(pages);\n    } else {\n      const pages = await storage.getPages();\n      res.json(pages);\n    }\n  });\n\n  app.post(\"/api/pages\", async (req, res) => {\n    try {\n      const validatedData = insertPageSchema.parse(req.body);\n      const page = await storage.createPage(validatedData);\n      res.json(page);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid page data\" });\n    }\n  });\n\n  app.delete(\"/api/pages/:id\", async (req, res) => {\n    const { id } = req.params;\n    const deleted = await storage.deletePage(id);\n    \n    if (!deleted) {\n      return res.status(404).json({ error: \"Page not found\" });\n    }\n    \n    res.json({ success: true });\n  });\n\n  // Products endpoints\n  app.get(\"/api/products\", async (req, res) => {\n    const { competitorId, productTypeId, brand } = req.query;\n    const filters: any = {};\n    \n    if (competitorId) filters.competitorId = competitorId as string;\n    if (productTypeId) filters.productTypeId = productTypeId as string;\n    if (brand) filters.brand = brand as string;\n    \n    const products = await storage.getProducts(filters);\n    res.json(products);\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    const { id } = req.params;\n    const product = await storage.getProduct(id);\n    \n    if (!product) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n    \n    const specs = await storage.getProductSpecs(id);\n    const priceSnapshots = await storage.getPriceSnapshots(id);\n    \n    res.json({ ...product, specs, priceSnapshots });\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid product data\" });\n    }\n  });\n\n  // Brand coverage matrix\n  app.get(\"/api/brands/matrix\", async (req, res) => {\n    const { productTypeId } = req.query;\n    \n    if (!productTypeId) {\n      return res.status(400).json({ error: \"productTypeId is required\" });\n    }\n    \n    const matrix = await storage.getBrandCoverageMatrix(productTypeId as string);\n    res.json(matrix);\n  });\n\n  // Price bands\n  app.get(\"/api/price-bands\", async (req, res) => {\n    const { productTypeId, brand } = req.query;\n    const bands = await storage.getPriceBands(\n      productTypeId as string, \n      brand as string\n    );\n    res.json(bands);\n  });\n\n  // Recent changes\n  app.get(\"/api/changes/recent\", async (req, res) => {\n    const { hours = \"24\" } = req.query;\n    const changes = await storage.getRecentPriceChanges(parseInt(hours as string));\n    res.json(changes);\n  });\n\n  // KPI metrics\n  app.get(\"/api/kpi\", async (req, res) => {\n    const metrics = await storage.getKPIMetrics();\n    res.json(metrics);\n  });\n\n  // Scraping endpoints\n  app.post(\"/api/scrape/run\", async (req, res) => {\n    try {\n      const { pageId, competitorId, productTypeId } = req.body;\n      \n      const task = await storage.createTask({\n        pageId: pageId || null,\n        status: \"pending\",\n        runReason: \"manual\"\n      });\n      \n      // In a real implementation, this would trigger the scraping process\n      // For now, we'll just return the task\n      res.json({ task, message: \"Scraping task queued\" });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to queue scraping task\" });\n    }\n  });\n\n  // Manual price monitoring trigger\n  app.post(\"/api/price-monitoring/run\", async (req, res) => {\n    try {\n      const { scheduler } = await import('./scheduler');\n      \n      if (scheduler.isCurrentlyRunning()) {\n        return res.status(409).json({ \n          error: \"Price monitoring is already running\",\n          message: \"Please wait for the current monitoring cycle to complete\"\n        });\n      }\n\n      // Run price monitoring in background\n      scheduler.runManualPriceCheck().then(results => {\n        console.log(`Manual price check completed with ${results.length} results`);\n      }).catch(error => {\n        console.error('Manual price check failed:', error);\n      });\n\n      res.json({ \n        message: \"Price monitoring started\",\n        note: \"Check console logs for progress updates\"\n      });\n    } catch (error) {\n      console.error('Price monitoring error:', error);\n      res.status(500).json({ error: \"Failed to start price monitoring\" });\n    }\n  });\n\n  // Get price monitoring status\n  app.get(\"/api/price-monitoring/status\", async (req, res) => {\n    try {\n      const { scheduler } = await import('./scheduler');\n      const isRunning = scheduler.isCurrentlyRunning();\n      \n      // Get recent price monitoring tasks\n      const tasks = await storage.getTasks();\n      const priceTasks = tasks.filter(t => t.runReason === \"schedule\").slice(0, 5);\n      \n      res.json({\n        isRunning,\n        nextRun: \"Daily at 12:00 AM AEST\",\n        recentTasks: priceTasks,\n        currentTime: new Date().toLocaleString('en-AU', { timeZone: 'Australia/Sydney' })\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get monitoring status\" });\n    }\n  });\n\n  // Tasks endpoints\n  app.get(\"/api/tasks\", async (req, res) => {\n    const tasks = await storage.getTasks();\n    res.json(tasks);\n  });\n\n  // Export CSV\n  app.get(\"/api/export/csv\", async (req, res) => {\n    const { productTypeId } = req.query;\n    const products = await storage.getProducts(\n      productTypeId ? { productTypeId: productTypeId as string } : undefined\n    );\n    \n    // Create CSV content\n    const headers = [\"Brand\", \"Model\", \"Title\", \"Competitor\", \"Price\", \"Stock\", \"URL\"];\n    const csvRows = [headers.join(\",\")];\n    \n    for (const product of products) {\n      const competitor = await storage.getCompetitor(product.competitorId);\n      const priceSnapshots = await storage.getPriceSnapshots(product.id);\n      const latestPrice = priceSnapshots[0];\n      \n      const row = [\n        product.brand,\n        product.model || \"\",\n        `\"${product.title}\"`,\n        competitor?.name || \"\",\n        latestPrice?.priceDecimal || \"\",\n        latestPrice?.inStock ? \"In Stock\" : \"Out of Stock\",\n        product.productUrl\n      ];\n      \n      csvRows.push(row.join(\",\"));\n    }\n    \n    res.setHeader(\"Content-Type\", \"text/csv\");\n    res.setHeader(\"Content-Disposition\", \"attachment; filename=products.csv\");\n    res.send(csvRows.join(\"\\n\"));\n  });\n\n  // Brand endpoints\n  app.post(\"/api/brands\", async (req, res) => {\n    try {\n      const validatedData = insertBrandSchema.parse(req.body);\n      const brand = await storage.createBrand(validatedData);\n      res.json(brand);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid brand data\" });\n    }\n  });\n\n  app.get(\"/api/brands\", async (req, res) => {\n    const brands = await storage.getBrands();\n    res.json(brands);\n  });\n\n  // Catalog Product endpoints\n  app.post(\"/api/catalog/products\", async (req, res) => {\n    try {\n      const validatedData = insertCatalogProductSchema.parse(req.body);\n      const product = await storage.createCatalogProduct(validatedData);\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid catalog product data\" });\n    }\n  });\n\n  app.get(\"/api/catalog/products\", async (req, res) => {\n    const products = await storage.listCatalogProducts();\n    res.json(products);\n  });\n\n  app.get(\"/api/catalog/products/:id\", async (req, res) => {\n    const product = await storage.getCatalogProductById(req.params.id);\n    if (!product) {\n      return res.status(404).json({ error: \"Catalog product not found\" });\n    }\n    res.json(product);\n  });\n\n  // Competitor Listing endpoints\n  app.post(\"/api/listings\", async (req, res) => {\n    try {\n      const validatedData = insertCompetitorListingSchema.parse(req.body);\n      const listing = await storage.createCompetitorListing(validatedData);\n      res.json(listing);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid listing data\" });\n    }\n  });\n\n  app.get(\"/api/listings\", async (req, res) => {\n    const { productId } = req.query;\n    if (!productId) {\n      return res.status(400).json({ error: \"productId query parameter is required\" });\n    }\n    const listings = await storage.listListingsByProduct(productId as string);\n    res.json(listings);\n  });\n\n  app.patch(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const listing = await storage.updateListing(req.params.id, req.body);\n      if (!listing) {\n        return res.status(404).json({ error: \"Listing not found\" });\n      }\n      res.json(listing);\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to update listing\" });\n    }\n  });\n\n  // Listing History endpoints\n  app.get(\"/api/listings/:id/history\", async (req, res) => {\n    const { limit } = req.query;\n    const history = await storage.getListingHistory(\n      req.params.id,\n      limit ? parseInt(limit as string, 10) : 30\n    );\n    res.json(history);\n  });\n\n  // Scrape endpoint for running listing scrapes\n  app.post(\"/api/scrape/run\", async (req, res) => {\n    const { listingId, productId } = req.body;\n    \n    if (!listingId && !productId) {\n      return res.status(400).json({ error: \"Either listingId or productId is required\" });\n    }\n\n    // For now, just return a placeholder response\n    // In Stage D, this will be replaced with actual scraping logic\n    res.json({ \n      status: \"queued\", \n      message: \"Scraping task queued\",\n      listingId,\n      productId \n    });\n  });\n\n  // Unified products routes\n  app.get(\"/api/products-unified\", async (req, res) => {\n    try {\n      const productsWithLinks = await storage.getUnifiedProducts();\n      res.json(productsWithLinks);\n    } catch (error) {\n      console.error(\"Error fetching unified products:\", error);\n      res.json([]); // Return empty array for now\n    }\n  });\n\n  app.post(\"/api/products-unified\", async (req, res) => {\n    try {\n      const { sku, name, ourPrice, competitorUrls } = req.body;\n      const product = await storage.createUnifiedProduct({ sku, name, ourPrice });\n      \n      // Add competitor links\n      if (competitorUrls && competitorUrls.length > 0) {\n        for (const url of competitorUrls) {\n          await storage.addCompetitorLink(product.id, url);\n        }\n      }\n      \n      const productWithLinks = await storage.getUnifiedProduct(product.id);\n      res.json(productWithLinks);\n    } catch (error) {\n      console.error(\"Error creating unified product:\", error);\n      res.status(500).json({ error: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products-unified/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { name, sku, ourPrice, brand, category } = req.body;\n      \n      // Get existing product\n      const product = await storage.getUnifiedProduct(id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      // Update product by recreating it (for memory storage)\n      await storage.deleteUnifiedProduct(id);\n      const updatedProduct = await storage.createUnifiedProduct({\n        name: name || product.name,\n        sku: sku || product.sku,\n        ourPrice: ourPrice !== undefined ? ourPrice : product.ourPrice\n      });\n      \n      // Re-add competitor links\n      if (product.competitorLinks) {\n        for (const link of product.competitorLinks) {\n          await storage.addCompetitorLink(updatedProduct.id, link.url);\n        }\n      }\n      \n      const finalProduct = await storage.getUnifiedProduct(updatedProduct.id);\n      res.json(finalProduct);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products-unified/:id\", async (req, res) => {\n    try {\n      await storage.deleteUnifiedProduct(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting unified product:\", error);\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  app.post(\"/api/extract-url\", async (req, res) => {\n    try {\n      const { url } = req.body;\n      // Simulate extracting product from URL\n      const mockData = {\n        title: \"Sample Product Title\",\n        price: 199.99,\n        competitorName: new URL(url).hostname.replace(\"www.\", \"\").split(\".\")[0],\n        image: \"https://via.placeholder.com/150\"\n      };\n      res.json(mockData);\n    } catch (error) {\n      console.error(\"Error extracting URL:\", error);\n      res.status(500).json({ error: \"Failed to extract URL data\" });\n    }\n  });\n\n  // Import AI service if OpenAI key is available\n  const aiService = process.env.OPENAI_API_KEY \n    ? await import(\"./ai-service\")\n    : null;\n\n  // Preview competitor products before importing\n  app.post(\"/api/preview-competitor\", async (req, res) => {\n    try {\n      const { url } = req.body;\n      \n      if (!url) {\n        return res.status(400).json({ error: \"URL is required\" });\n      }\n\n      console.log(`Previewing competitor products from: ${url}`);\n      \n      // Detect if we need special scrapers for JavaScript-heavy sites\n      const hostname = new URL(url).hostname.toLowerCase();\n      let result;\n      \n      // Use appropriate scraper based on the site\n      if (hostname.includes('sydneytools')) {\n        console.log('Using Playwright scraper for Sydney Tools SPA...');\n        const { playwrightScraper } = await import('./playwright-scraper');\n        result = await playwrightScraper.scrapeSydneyTools(url);\n      } \n      else if (hostname.includes('totaltools')) {\n        console.log('Using Playwright scraper for Total Tools (lazy-loaded images)...');\n        const { playwrightScraper } = await import('./playwright-scraper');\n        result = await playwrightScraper.scrapeTotalTools(url);\n      }\n      else if (hostname.includes('tradetools')) {\n        console.log('Using specialized Trade Tools scraper...');\n        const { tradeToolsScraper } = await import('./trade-tools-scraper');\n        result = await tradeToolsScraper.scrapeTradeTools(url);\n      }\n      else if (hostname.includes('bunnings') || hostname.includes('repco')) {\n        console.log('Using rendered DOM scraper for JavaScript site...');\n        const { renderedGet } = await import('./rendered-get');\n        const html = await renderedGet(url);\n        const { multiSiteScraper } = await import('./multi-site-scraper');\n        const cheerio = await import('cheerio');\n        const $ = cheerio.load(html);\n        result = await multiSiteScraper.scrapeCompetitor(url);\n      }\n      else {\n        console.log('Using standard scraper...');\n        const { multiSiteScraper } = await import('./multi-site-scraper');\n        result = await multiSiteScraper.scrapeCompetitor(url);\n      }\n      \n      if (result.products.length === 0) {\n        return res.status(400).json({ \n          error: \"No products found on this competitor page\",\n          details: `Attempted to scrape ${result.competitorName} but found no products.`,\n          suggestion: \"Please verify the URL is a product listing page.\"\n        });\n      }\n\n      // Check for existing products and competitors\n      const siteDomain = new URL(url).hostname;\n      const existingCompetitors = await storage.getCompetitors();\n      const existingProducts = await storage.listCatalogProducts();\n      \n      // Check if competitor exists\n      const existingCompetitor = existingCompetitors.find(c => \n        c.siteDomain === siteDomain || \n        (c.name.toLowerCase().replace(/\\s+/g, '') === result.competitorName.toLowerCase().replace(/\\s+/g, ''))\n      );\n\n      // Check for matching products\n      const productsWithMatches = result.products.map((product: any) => {\n        // Extract model number\n        let modelNumber = product.model || product.modelNumber || '';\n        if (!modelNumber || modelNumber === 'Unknown') {\n          const modelPatterns = [\n            /\\b([A-Z]{2,}\\d{4,})\\b/i,\n            /\\b([A-Z]+\\d+[A-Z]*\\d*)\\b/i,\n            /\\b(GENIUS\\d+[A-Z]*)\\b/i,\n            /\\b([A-Z]+[\\d]+[A-Z]*)\\b/i\n          ];\n          \n          for (const pattern of modelPatterns) {\n            const match = product.title.match(pattern);\n            if (match) {\n              modelNumber = match[1].toUpperCase();\n              break;\n            }\n          }\n        }\n\n        // Check for existing match\n        let matchedProduct = null;\n        if (modelNumber && modelNumber !== 'Unknown' && modelNumber !== 'N/A') {\n          matchedProduct = existingProducts.find(p => \n            p.modelNumber === modelNumber\n          );\n        }\n\n        return {\n          ...product,\n          modelNumber,\n          isNew: !matchedProduct,\n          matchedProduct: matchedProduct ? {\n            id: matchedProduct.id,\n            name: matchedProduct.name,\n            modelNumber: matchedProduct.modelNumber\n          } : null\n        };\n      });\n\n      // Count stats\n      const newProducts = productsWithMatches.filter((p: any) => p.isNew);\n      const matchedProducts = productsWithMatches.filter((p: any) => !p.isNew);\n\n      res.json({\n        success: true,\n        competitorName: result.competitorName,\n        competitorExists: !!existingCompetitor,\n        sourceUrl: url,\n        totalProducts: result.products.length,\n        newProducts: newProducts.length,\n        matchedProducts: matchedProducts.length,\n        products: productsWithMatches,\n        scraperUsed: result.scraperUsed || 'Standard'\n      });\n\n    } catch (error: any) {\n      console.error(\"Error previewing competitor:\", error);\n      res.status(500).json({ \n        error: \"Failed to preview competitor products\",\n        details: error.message\n      });\n    }\n  });\n\n  // Confirm and import reviewed products\n  app.post(\"/api/confirm-import\", async (req, res) => {\n    try {\n      const { products, competitorName, sourceUrl } = req.body;\n      \n      if (!products || !Array.isArray(products)) {\n        return res.status(400).json({ error: \"Products array is required\" });\n      }\n\n      let savedCount = 0;\n      let matchedCount = 0;\n      const errors: string[] = [];\n      \n      // Find or create competitor - handle missing sourceUrl gracefully\n      let siteDomain = '';\n      if (sourceUrl) {\n        try {\n          siteDomain = new URL(sourceUrl).hostname;\n        } catch (e) {\n          console.warn('Invalid or missing sourceUrl, falling back to competitorName');\n        }\n      }\n      \n      // If no siteDomain from URL, derive it from competitorName\n      if (!siteDomain && competitorName) {\n        siteDomain = competitorName.toLowerCase().replace(/\\s+/g, '') + '.com.au';\n      }\n      const existingCompetitors = await storage.getCompetitors();\n      \n      let competitor = existingCompetitors.find(c => \n        c.siteDomain === siteDomain || \n        (c.name.toLowerCase().replace(/\\s+/g, '') === competitorName.toLowerCase().replace(/\\s+/g, ''))\n      );\n      \n      if (!competitor) {\n        competitor = await storage.createCompetitor({\n          name: competitorName,\n          siteDomain,\n          status: 'active',\n          isUs: false\n        });\n        console.log(`Created new competitor: ${competitorName} (${siteDomain})`);\n      } else {\n        console.log(`Using existing competitor: ${competitor.name} (${competitor.siteDomain})`);\n      }\n      \n      // Find or create category and product type\n      const existingCategories = await storage.getCategories();\n      let category = existingCategories.find(c => c.slug === 'battery-chargers');\n      \n      if (!category) {\n        category = await storage.createCategory({\n          name: 'Battery Chargers',\n          slug: 'battery-chargers'\n        });\n      }\n      \n      const existingProductTypes = await storage.getProductTypes();\n      let productType = existingProductTypes.find(pt => pt.slug === 'battery-chargers');\n      \n      if (!productType) {\n        productType = await storage.createProductType({\n          categoryId: category.id,\n          name: 'Battery Chargers',\n          slug: 'battery-chargers'\n        });\n      }\n      \n      // Find or create brand for each product\n      const brandMap = new Map<string, any>();\n      \n      // Import selected products\n      for (const product of products) {\n        try {\n          // Find or create brand\n          const brandName = product.brand || 'Unknown';\n          let brand = brandMap.get(brandName);\n          if (!brand) {\n            const existingBrands = await storage.getBrands();\n            brand = existingBrands.find(b => b.name.toLowerCase() === brandName.toLowerCase());\n            \n            if (!brand) {\n              brand = await storage.createBrand({\n                name: brandName,\n                slug: brandName.toLowerCase().replace(/[^a-z0-9]/g, '-')\n              });\n            }\n            brandMap.set(brandName, brand);\n          }\n          \n          let catalogProduct;\n          \n          // If product has a match, use the existing catalog product\n          if (product.matchedProduct && product.matchedProduct.id) {\n            catalogProduct = await storage.getCatalogProductById(product.matchedProduct.id);\n            if (catalogProduct) {\n              matchedCount++;\n              console.log(`Using existing product: ${catalogProduct.name} (${product.modelNumber})`);\n            }\n          }\n          \n          // If no match or product not found, create new catalog product\n          if (!catalogProduct) {\n            catalogProduct = await storage.createCatalogProduct({\n              name: product.title,\n              brandId: brand.id,\n              categoryId: category.id,\n              productTypeId: productType.id,\n              modelNumber: product.modelNumber || product.title.split(' ')[0],\n              imageUrl: product.image,\n              price: (product.price || 0).toString()\n            });\n            console.log(`Created new catalog product: ${product.title}`);\n          }\n          \n          // Create competitor listing linked to the catalog product\n          const competitorListing = await storage.createCompetitorListing({\n            productId: catalogProduct.id,\n            competitorId: competitor.id,\n            url: product.url || sourceUrl,\n            mainImageUrl: product.image\n          });\n          \n          // Create listing snapshot with pricing\n          if (product.price && product.price > 0) {\n            await storage.createListingSnapshot({\n              listingId: competitorListing.id,\n              price: (product.price || 0).toString(),\n              currency: 'AUD',\n              inStock: true\n            });\n          }\n          \n          savedCount++;\n        } catch (error: any) {\n          console.error(`Error saving product ${product.title}:`, error);\n          errors.push(`Product \"${product.title}\": ${error.message}`);\n        }\n      }\n      \n      res.json({\n        success: true,\n        message: `Successfully imported ${savedCount}/${products.length} products from ${competitorName}`,\n        savedProducts: savedCount,\n        matchedProducts: matchedCount,\n        totalProducts: products.length,\n        competitorName,\n        sourceUrl,\n        errors\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error confirming import:\", error);\n      res.status(500).json({ \n        error: \"Failed to import products\",\n        details: error.message\n      });\n    }\n  });\n\n  // Import competitor products from any site (DEPRECATED - use preview + confirm instead)\n  app.post(\"/api/import-competitor\", async (req, res) => {\n    try {\n      const { url } = req.body;\n      \n      if (!url) {\n        return res.status(400).json({ error: \"URL is required\" });\n      }\n\n      console.log(`Importing competitor products from: ${url}`);\n      \n      // Detect if we need special scrapers for JavaScript-heavy sites\n      const hostname = new URL(url).hostname.toLowerCase();\n      let result;\n      \n      // Use Playwright for Sydney Tools (JavaScript-heavy React site)\n      if (hostname.includes('sydneytools')) {\n        console.log('Using Playwright scraper for Sydney Tools SPA...');\n        const { playwrightScraper } = await import('./playwright-scraper');\n        result = await playwrightScraper.scrapeSydneyTools(url);\n      } \n      // Use specialized scraper for Trade Tools (JavaScript SPA)\n      else if (hostname.includes('tradetools')) {\n        console.log('Using specialized Trade Tools scraper...');\n        const { tradeToolsScraper } = await import('./trade-tools-scraper');\n        result = await tradeToolsScraper.scrapeTradeTools(url);\n      }\n      // Use rendered-get for sites that need DOM rendering but not scrolling\n      else if (hostname.includes('bunnings') || hostname.includes('repco')) {\n        console.log('Using rendered DOM scraper for JavaScript site...');\n        const { renderedGet } = await import('./rendered-get');\n        const html = await renderedGet(url);\n        const { multiSiteScraper } = await import('./multi-site-scraper');\n        // Parse the rendered HTML with Cheerio\n        const cheerio = await import('cheerio');\n        const $ = cheerio.load(html);\n        // Use the multi-site scraper with pre-rendered HTML\n        result = await multiSiteScraper.scrapeCompetitor(url);\n      }\n      // Use standard scraper for static HTML sites\n      else {\n        console.log('Using standard scraper...');\n        const { multiSiteScraper } = await import('./multi-site-scraper');\n        result = await multiSiteScraper.scrapeCompetitor(url);\n      }\n      \n      if (result.products.length === 0) {\n        return res.status(400).json({ \n          error: \"No products found on this competitor page\",\n          details: `Attempted to scrape ${result.competitorName} but found no products.`,\n          suggestion: \"Please verify the URL is a product listing page.\"\n        });\n      }\n\n      // Save the products to the database\n      let savedCount = 0;\n      const errors: string[] = [];\n      \n      try {\n        // Find or create competitor - check both name and domain to avoid duplicates\n        const siteDomain = new URL(url).hostname;\n        const existingCompetitors = await storage.getCompetitors();\n        \n        // Check by domain first (more reliable), then by normalized name\n        let competitor = existingCompetitors.find(c => \n          c.siteDomain === siteDomain || \n          (c.name.toLowerCase().replace(/\\s+/g, '') === result.competitorName.toLowerCase().replace(/\\s+/g, ''))\n        );\n        \n        if (!competitor) {\n          competitor = await storage.createCompetitor({\n            name: result.competitorName,\n            siteDomain,\n            status: 'active',\n            isUs: false\n          });\n          console.log(`Created new competitor: ${result.competitorName} (${siteDomain})`);\n        } else {\n          console.log(`Using existing competitor: ${competitor.name} (${competitor.siteDomain})`);\n        }\n        \n        // Find or create category and product type\n        const existingCategories = await storage.getCategories();\n        let category = existingCategories.find(c => c.slug === 'battery-chargers');\n        \n        if (!category) {\n          category = await storage.createCategory({\n            name: 'Battery Chargers',\n            slug: 'battery-chargers'\n          });\n        }\n        \n        const existingProductTypes = await storage.getProductTypes();\n        let productType = existingProductTypes.find(pt => pt.slug === 'battery-chargers');\n        \n        if (!productType) {\n          productType = await storage.createProductType({\n            categoryId: category.id,\n            name: 'Battery Chargers',\n            slug: 'battery-chargers'\n          });\n        }\n        \n        // Find or create brand for each product\n        const brandMap = new Map<string, any>();\n        \n        // Create the products in the unified catalog system\n        for (const product of result.products) {\n          try {\n            // Find or create brand\n            const brandName = (product as any).brand || 'Unknown';\n            let brand = brandMap.get(brandName);\n            if (!brand) {\n              const existingBrands = await storage.getBrands();\n              brand = existingBrands.find(b => b.name.toLowerCase() === brandName.toLowerCase());\n              \n              if (!brand) {\n                brand = await storage.createBrand({\n                  name: brandName,\n                  slug: brandName.toLowerCase().replace(/[^a-z0-9]/g, '-')\n                });\n              }\n              brandMap.set(brandName, brand);\n            }\n            \n            // Extract model number using AI if available\n            let modelNumber = (product as any).model || (product as any).modelNumber || '';\n            if (!modelNumber || modelNumber === 'Unknown') {\n              // Try basic extraction from title\n              const modelPatterns = [\n                /\\b([A-Z]{2,}\\d{4,})\\b/i,  // SP61084 format\n                /\\b([A-Z]+\\d+[A-Z]*\\d*)\\b/i,  // General alphanumeric\n                /\\b(GENIUS\\d+[A-Z]*)\\b/i,  // NOCO format\n                /\\b([A-Z]+[\\d]+[A-Z]*)\\b/i  // Matson format\n              ];\n              \n              for (const pattern of modelPatterns) {\n                const match = product.title.match(pattern);\n                if (match) {\n                  modelNumber = match[1].toUpperCase();\n                  break;\n                }\n              }\n            }\n            \n            // Check if a product with this model number already exists\n            let catalogProduct;\n            if (modelNumber && modelNumber !== 'Unknown' && modelNumber !== 'N/A') {\n              const existingProducts = await storage.listCatalogProducts();\n              catalogProduct = existingProducts.find(p => \n                p.modelNumber === modelNumber && \n                p.brandId === brand.id\n              );\n              \n              if (catalogProduct) {\n                console.log(`Found matching product by model ${modelNumber}: ${catalogProduct.name}`);\n              }\n            }\n            \n            // If no match found, create new catalog product\n            if (!catalogProduct) {\n              catalogProduct = await storage.createCatalogProduct({\n                name: product.title,\n                brandId: brand.id,\n                categoryId: category.id,\n                productTypeId: productType.id,\n                modelNumber: modelNumber || product.title.split(' ')[0],\n                imageUrl: (product as any).image,\n                price: (product.price || 0).toString()\n              });\n              console.log(`Created new catalog product: ${product.title}`);\n            }\n            \n            // Create competitor listing linked to the catalog product\n            const competitorListing = await storage.createCompetitorListing({\n              productId: catalogProduct.id,\n              competitorId: competitor.id,\n              url: (product as any).url || url,\n              mainImageUrl: (product as any).image\n            });\n            \n            // Create listing snapshot with pricing\n            if (product.price && product.price > 0) {\n              await storage.createListingSnapshot({\n                listingId: competitorListing.id,\n                price: (product.price || 0).toString(),\n                currency: 'AUD',\n                inStock: true\n              });\n            }\n            \n            savedCount++;\n          } catch (error: any) {\n            console.error(`Error saving product ${product.title}:`, error);\n            errors.push(`${product.title}: ${error.message}`);\n          }\n        }\n      } catch (error: any) {\n        console.error('Error setting up competitor/category/product type:', error);\n        errors.push(`Setup error: ${error.message}`);\n      }\n      \n      const response = {\n        success: true,\n        message: `Successfully imported ${savedCount}/${result.products.length} products from ${result.competitorName}`,\n        savedProducts: savedCount,\n        totalProducts: (result as any).totalProducts || result.products.length,\n        categoryName: (result as any).categoryName || 'Products',\n        competitorName: result.competitorName,\n        sourceUrl: (result as any).sourceUrl || url,\n        extractedAt: (result as any).extractedAt || new Date().toISOString(),\n        scraperUsed: hostname.includes('sydneytools') ? 'Playwright' : hostname.includes('bunnings') || hostname.includes('repco') ? 'RenderedDOM' : 'Standard',\n        errors: errors.length > 0 ? errors : undefined\n      };\n      \n      console.log(`Saved ${savedCount} products to database`);\n      res.json(response);\n\n    } catch (error: any) {\n      console.error(\"Error importing competitor products:\", error);\n      res.status(500).json({ \n        error: \"Failed to import competitor products\",\n        details: error.message\n      });\n    }\n  });\n\n  // Import Sydney Tools catalog products from JSON\n  app.post(\"/api/import-products\", async (req, res) => {\n    try {\n      const { products } = req.body;\n      \n      if (!products || !Array.isArray(products)) {\n        return res.status(400).json({ error: \"Products array is required\" });\n      }\n      \n      let savedCount = 0;\n      let skippedCount = 0;\n      const errors: string[] = [];\n      \n      // Find or create necessary categories\n      const existingCategories = await storage.getCategories();\n      let category = existingCategories.find(c => c.slug === 'battery-chargers');\n      \n      if (!category) {\n        category = await storage.createCategory({\n          name: 'Battery Chargers',\n          slug: 'battery-chargers'\n        });\n      }\n      \n      const existingProductTypes = await storage.getProductTypes();\n      let productType = existingProductTypes.find(pt => pt.slug === 'battery-chargers');\n      \n      if (!productType) {\n        productType = await storage.createProductType({\n          categoryId: category.id,\n          name: 'Battery Chargers',\n          slug: 'battery-chargers'\n        });\n      }\n      \n      // Find or create brand for each product\n      const brandMap = new Map<string, any>();\n      const existingCatalogProducts = await storage.listCatalogProducts();\n      \n      for (const product of products) {\n        try {\n          // Extract model number from title for better matching\n          let modelNumber = '';\n          const modelPatterns = [\n            /\\b([A-Z]{2,}\\d{4,}[A-Z]*)\\b/i,  // SP61084, AE12000E format\n            /\\b([A-Z]+\\d+[A-Z]*\\d*)\\b/i,  // General alphanumeric\n            /\\b(GENIUS\\d+[A-Z]*)\\b/i,  // NOCO format like GENIUS10AU\n            /\\(([^)]+)\\)/,  // Content in parentheses like (94065325i)\n          ];\n          \n          for (const pattern of modelPatterns) {\n            const match = product.title.match(pattern);\n            if (match) {\n              modelNumber = match[1].toUpperCase();\n              break;\n            }\n          }\n          \n          // Skip if product with this model number already exists\n          if (modelNumber) {\n            const exists = existingCatalogProducts.some(p => \n              p.modelNumber === modelNumber\n            );\n            if (exists) {\n              skippedCount++;\n              continue;\n            }\n          }\n          \n          // Find or create brand\n          const brandName = product.brand || 'Unknown';\n          let brand = brandMap.get(brandName);\n          if (!brand) {\n            const existingBrands = await storage.getBrands();\n            brand = existingBrands.find(b => b.name.toLowerCase() === brandName.toLowerCase());\n            \n            if (!brand) {\n              brand = await storage.createBrand({\n                name: brandName,\n                slug: brandName.toLowerCase().replace(/[^a-z0-9]/g, '-')\n              });\n            }\n            brandMap.set(brandName, brand);\n          }\n          \n          // Create catalog product for Sydney Tools\n          const catalogProduct = await storage.createCatalogProduct({\n            name: product.title,\n            brandId: brand.id,\n            categoryId: category.id,\n            productTypeId: productType.id,\n            modelNumber: modelNumber || `${product.sku || 'UNKNOWN'}`,\n            imageUrl: product.image,\n            price: product.price.toString()\n          });\n          \n          console.log(`Imported Sydney Tools product: ${product.title} (${modelNumber})`);\n          savedCount++;\n          \n        } catch (error: any) {\n          console.error(`Error importing product ${product.title}:`, error);\n          errors.push(`${product.title}: ${error.message}`);\n        }\n      }\n      \n      res.json({\n        success: true,\n        message: `Imported ${savedCount} new products, skipped ${skippedCount} existing products`,\n        savedCount,\n        skippedCount,\n        errors: errors.length > 0 ? errors : undefined\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error importing products:\", error);\n      res.status(500).json({ \n        error: \"Failed to import products\",\n        details: error.message\n      });\n    }\n  });\n\n  // Match and merge duplicate products\n  app.post(\"/api/products/match-merge\", async (req, res) => {\n    try {\n      const { productMatcher } = await import('./product-matcher');\n      \n      // First enhance model numbers with AI\n      console.log('Enhancing model numbers with AI...');\n      const enhanceResults = await productMatcher.enhanceModelNumbers();\n      \n      // Then match and merge duplicates\n      console.log('Matching and merging duplicate products...');\n      const mergeResults = await productMatcher.matchAndMergeProducts();\n      \n      res.json({\n        success: true,\n        enhanced: enhanceResults.updated,\n        merged: mergeResults.merged,\n        matched: mergeResults.matched,\n        errors: [...enhanceResults.errors, ...mergeResults.errors]\n      });\n    } catch (error: any) {\n      console.error('Error in match-merge:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n  \n  // Get price comparison for matched products\n  app.get(\"/api/products/price-comparison\", async (req, res) => {\n    try {\n      const { productMatcher } = await import('./product-matcher');\n      const comparisons = await productMatcher.getProductPriceComparison();\n      \n      res.json({\n        success: true,\n        count: comparisons.length,\n        comparisons: comparisons\n      });\n    } catch (error: any) {\n      console.error('Error getting price comparison:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Extract products from category page (Sydney Tools focused)\n  app.post(\"/api/extract-category\", async (req, res) => {\n    try {\n      const { url } = req.body;\n      \n      console.log(\"Extracting products from:\", url);\n      \n      // Fetch the actual page content\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch page: ${response.status} ${response.statusText}`);\n      }\n      \n      const html = await response.text();\n      console.log(\"Page fetched successfully, length:\", html.length);\n      \n      // Extract products using Sydney Tools specific HTML structure\n      // Based on the provided HTML: ant-card ant-card-bordered product-card\n      const productCardRegex = /<div[^>]*class=\"[^\"]*ant-card[^\"]*ant-card-bordered[^\"]*product-card[^\"]*\"[^>]*>(.*?)<\\/div>\\s*(?:<\\/div>\\s*){0,2}<\\/div>/gs;\n      \n      // Sydney Tools specific patterns for content extraction based on actual HTML structure\n      const titleRegex = /<h2[^>]*title=\"([^\"]+)\"[^>]*>/i;\n      const priceRegex = /<div[^>]*class=\"price\"[^>]*>.*?\\$[^>]*>(\\d+)<\\/span>.*?\\.(\\d+)<\\/span>/s;\n      const imageRegex = /<img[^>]*class=\"img-fluid\"[^>]*src=\"([^\"]+)\"[^>]*>/;\n      const linkRegex = /<a[^>]*href=\"([^\"]+)\"[^>]*>/;\n      \n      // Alternative patterns for different content structures\n      const alternativePatterns = [\n        // Try broader ant-card pattern\n        /<div[^>]*class=\"[^\"]*ant-card[^\"]*\"[^>]*>(.*?)<\\/div>/gs,\n        // Try product-card specific\n        /<div[^>]*class=\"[^\"]*product-card[^\"]*\"[^>]*>(.*?)<\\/div>/gs,\n        // Generic product patterns\n        /<div[^>]*class=\"[^\"]*product[^\"]*\"[^>]*>(.*?)<\\/div>/gs\n      ];\n      \n      const products = [];\n      let index = 0;\n      \n      // Try primary pattern first, then fallback patterns\n      const patterns = [productCardRegex, ...alternativePatterns];\n      \n      for (const pattern of patterns) {\n        let match;\n        pattern.lastIndex = 0; // Reset regex\n        \n        while ((match = pattern.exec(html)) !== null && index < 50) {\n          const cardHtml = match[1] || match[0];\n          \n          // Extract title using Sydney Tools specific patterns\n          const titleMatch = cardHtml.match(titleRegex) || \n                            cardHtml.match(/title=\"([^\"]+)\"/) ||\n                            cardHtml.match(/alt=\"([^\"]+)\"/);\n          const title = titleMatch ? titleMatch[1].trim().replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>') : null;\n          \n          // Extract price using Sydney Tools price structure\n          const priceMatch = cardHtml.match(priceRegex);\n          let price = 0;\n          if (priceMatch) {\n            const dollars = parseInt(priceMatch[1]) || 0;\n            const cents = parseInt(priceMatch[2]) || 0;\n            price = dollars + (cents / 100);\n          } else {\n            // Fallback to simple price extraction\n            const simplePriceMatch = cardHtml.match(/\\$[\\d,]+\\.?\\d*/);\n            if (simplePriceMatch) {\n              price = parseFloat(simplePriceMatch[0].replace(/[\\$,]/g, ''));\n            }\n          }\n          \n          // Skip if no title or price found\n          if (!title || title.length < 3 || price <= 0) {\n            continue;\n          }\n          \n          // Extract image - Sydney Tools uses full URLs\n          const imageMatch = cardHtml.match(imageRegex);\n          let image = imageMatch ? imageMatch[1] : null;\n          \n          // Extract product link - look for href in product link\n          const linkMatch = cardHtml.match(/<a[^>]*href=\"(\\/product\\/[^\"]+)\"[^>]*>/);\n          let productUrl = linkMatch ? `https://sydneytools.com.au${linkMatch[1]}` : url;\n          \n          // Use AI to analyze product if available\n          let brand = \"Unknown\";\n          let category = \"Tools\";\n          \n          if (aiService && title) {\n            try {\n              const analysis = await aiService.analyzeProductTitle(title);\n              brand = analysis.brand;\n              category = analysis.category;\n            } catch (error) {\n              console.log(\"AI analysis failed, using fallback:\", error.message);\n              // Simple brand extraction fallback\n              const brandMatch = title.match(/^([A-Z][a-z]+)/);\n              brand = brandMatch ? brandMatch[1] : \"Unknown\";\n            }\n          } else {\n            // Basic brand extraction without AI\n            const brandMatch = title.match(/^([A-Z][a-zA-Z]+)/);\n            brand = brandMatch ? brandMatch[1] : \"Unknown\";\n          }\n          \n          products.push({\n            sku: `${brand.toUpperCase()}-${String(index + 1).padStart(3, '0')}`,\n            title: title,\n            price: price,\n            image: image,\n            url: productUrl,\n            brand: brand,\n            model: title.replace(brand, '').trim(),\n            category: category\n          });\n          \n          index++;\n        }\n        \n        // If we found products with this pattern, break\n        if (products.length > 0) {\n          console.log(`Found ${products.length} products using pattern ${patterns.indexOf(pattern) + 1}`);\n          break;\n        }\n      }\n      \n      console.log(`Extracted ${products.length} products from page`);\n      \n      if (products.length === 0) {\n        // Try to extract from the provided HTML structure directly if it exists\n        if (html.includes('ant-card ant-card-bordered product-card')) {\n          console.log(\"Found Sydney Tools product structure, trying direct extraction...\");\n          \n          // Use the provided HTML structure to extract real products\n          const directCards = html.match(/<div[^>]*class=\"[^\"]*ant-card[^\"]*ant-card-bordered[^\"]*product-card[^\"]*\"[^>]*>.*?<\\/div>\\s*<\\/div>\\s*<\\/div>/gs);\n          \n          if (directCards) {\n            console.log(`Found ${directCards.length} product cards in HTML`);\n            \n            directCards.forEach((cardHtml, index) => {\n              const titleMatch = cardHtml.match(/<h2[^>]*title=\"([^\"]+)\"[^>]*>/) || \n                                cardHtml.match(/title=\"([^\"]+)\"/) ||\n                                cardHtml.match(/alt=\"([^\"]+)\"/);\n              const title = titleMatch ? titleMatch[1].trim().replace(/&amp;/g, '&') : null;\n              \n              const priceMatch = cardHtml.match(/<span[^>]*>(\\d+)<\\/span>.*?<span[^>]*>(\\d+)<\\/span>/s);\n              let price = 0;\n              if (priceMatch) {\n                price = parseInt(priceMatch[1]) + (parseInt(priceMatch[2]) / 100);\n              }\n              \n              const imageMatch = cardHtml.match(/<img[^>]*src=\"([^\"]+)\"[^>]*>/);\n              const image = imageMatch ? imageMatch[1] : null;\n              \n              const linkMatch = cardHtml.match(/<a[^>]*href=\"(\\/product\\/[^\"]+)\"[^>]*>/);\n              const productUrl = linkMatch ? `https://sydneytools.com.au${linkMatch[1]}` : url;\n              \n              if (title && price > 0) {\n                const brand = title.split(' ')[0];\n                products.push({\n                  sku: `${brand.toUpperCase()}-${String(index + 1).padStart(3, '0')}`,\n                  title: title,\n                  price: price,\n                  image: image,\n                  url: productUrl,\n                  brand: brand,\n                  model: title.replace(brand, '').trim(),\n                  category: \"Car Battery Chargers\"\n                });\n              }\n            });\n            \n            if (products.length > 0) {\n              console.log(`Successfully extracted ${products.length} real products`);\n              return res.json({\n                products: products,\n                totalPages: 1,\n                currentPage: 1,\n                totalProducts: products.length,\n                categoryName: \"CAR BATTERY CHARGERS\",\n                extractedAt: new Date().toISOString(),\n                aiEnhanced: !!aiService,\n                sourceUrl: url,\n                note: \"Extracted from real Sydney Tools product data\"\n              });\n            }\n          }\n        }\n        \n        // Check if this is a React/SPA application\n        const isReactApp = html.includes('<div id=\"root\"></div>') || html.includes('React') || html.includes('__NEXT_DATA__');\n        \n        // For React/SPA applications, try browser automation first, fallback to demo\n        if (isReactApp) {\n          console.log(\"Detected React/SPA application - attempting Playwright browser automation\");\n          \n          // Try real browser automation first\n          try {\n            const { playwrightScraper } = await import('./playwright-scraper');\n            const result = await playwrightScraper.scrapeSydneyTools(url);\n            \n            if (result.totalProducts > 0) {\n              return res.json({\n                ...result,\n                extractedAt: new Date().toISOString(),\n                aiEnhanced: false,\n                sourceUrl: url,\n                note: `🎉 SUCCESS! Extracted ${result.totalProducts} authentic products using real browser automation from Sydney Tools.`,\n                isDemo: false\n              });\n            }\n          } catch (error: any) {\n            console.error(\"Browser automation failed, falling back to demo:\", error.message);\n          }\n          \n          return res.json({\n            products: [],\n            totalPages: 0,\n            currentPage: 1,\n            totalProducts: 0,\n            categoryName: \"PRODUCTS\",\n            extractedAt: new Date().toISOString(),\n            aiEnhanced: false,\n            sourceUrl: url,\n            error: \"Browser automation failed. No authentic product data could be extracted.\",\n            note: \"Browser automation attempted but failed. Only authentic data extraction is enabled.\"\n          });\n        }\n        \n        // Fallback: Try alternative parsing methods\n        console.log(\"No products found with primary method, trying alternative parsing...\");\n        \n        // Look for any price patterns in the HTML\n        const allPrices = html.match(/\\$[\\d,]+\\.?\\d*/g) || [];\n        const allTitles = html.match(/<h[1-6][^>]*>([^<]+)<\\/h[1-6]>/g) || [];\n        \n        console.log(`Found ${allPrices.length} prices and ${allTitles.length} titles in HTML`);\n        \n        if (allPrices.length === 0) {\n          // Return a helpful error with actual page information\n          const pageTitle = html.match(/<title>([^<]+)<\\/title>/)?.[1] || \"Unknown Page\";\n          return res.status(400).json({ \n            error: \"No products found on this page\",\n            details: `Page title: \"${pageTitle}\". The page appears to use JavaScript to load content dynamically.`,\n            suggestion: \"This site requires JavaScript rendering. The products shown are realistic examples for testing.\"\n          });\n        }\n      }\n      \n      // Parse category from URL for metadata\n      const categoryMatch = url.match(/\\/category\\/([^\\/]+)\\/([^\\/\\?]+)/);\n      const categoryName = categoryMatch ? categoryMatch[2].replace(/-/g, ' ').toUpperCase() : 'PRODUCTS';\n      \n      // Use AI to analyze products if available\n      let enrichedProducts = products;\n      if (aiService && products.length > 0) {\n        try {\n          const categoryInfo = await aiService.analyzeCategoryUrl(url);\n          const analyzed = await aiService.bulkAnalyzeProducts(products);\n          \n          enrichedProducts = products.map((product, i) => ({\n            ...product,\n            brand: analyzed[i]?.brand || product.brand,\n            model: analyzed[i]?.model || product.model,\n            category: categoryInfo.category,\n            subcategory: categoryInfo.subcategory,\n            specifications: analyzed[i]?.specifications || []\n          }));\n        } catch (err) {\n          console.log(\"AI analysis failed, using basic extraction\");\n        }\n      }\n      \n      // Return the final extracted products\n      res.json({\n        products: enrichedProducts,\n        totalPages: Math.ceil(enrichedProducts.length / 20),\n        currentPage: 1,\n        totalProducts: enrichedProducts.length,\n        categoryName: categoryName,\n        extractedAt: new Date().toISOString(),\n        aiEnhanced: !!aiService && enrichedProducts.length > 0,\n        sourceUrl: url\n      });\n    } catch (error: any) {\n      console.error(\"Error extracting category:\", error);\n      res.status(500).json({ error: \"Failed to extract category products\" });\n    }\n  });\n\n  // Bulk import products with brand and category extraction\n  app.post(\"/api/products-unified/bulk\", async (req, res) => {\n    try {\n      const { products, sourceUrl } = req.body;\n      let addedCount = 0;\n      let matchedCount = 0;\n      \n      // Extract competitor name from source URL\n      const competitorName = sourceUrl ? \n        new URL(sourceUrl).hostname.replace('www.', '').split('.')[0].toUpperCase() : \n        'Unknown';\n      \n      // Extract category from URL if possible\n      const categoryMatch = sourceUrl?.match(/\\/category\\/[^\\/]+\\/([^\\/\\?]+)/);\n      const category = categoryMatch ? \n        categoryMatch[1].replace(/-/g, ' ').split(' ').map(w => \n          w.charAt(0).toUpperCase() + w.slice(1).toLowerCase()\n        ).join(' ') : \n        'General';\n      \n      for (const product of products) {\n        try {\n          // Extract brand from product title  \n          let brand = 'Unknown';\n          let brandId = null;\n          const brandPatterns = [\n            /^(SP Tools|Schumacher|Matson|NOCO|DeWalt|Makita|Milwaukee|Bosch|Ryobi)/i,\n            /^([A-Z][A-Z0-9]+(?:\\s+[A-Z][a-z]+)?)/,  // Matches \"SP Tools\", \"NOCO\", etc\n            /^([A-Z][a-z]+)/  // Simple brand pattern\n          ];\n          \n          for (const pattern of brandPatterns) {\n            const match = product.title?.match(pattern);\n            if (match) {\n              brand = match[1];\n              // Map to brand IDs we have in database\n              if (brand.toLowerCase().includes('schumacher')) brandId = 'schumacher';\n              else if (brand.toLowerCase().includes('matson')) brandId = 'matson';\n              else if (brand.toLowerCase().includes('sp tools')) brandId = 'sp-tools';\n              else if (brand.toLowerCase().includes('noco')) brandId = 'noco';\n              break;\n            }\n          }\n          \n          // Check if we already have a product with exact same SKU\n          const existingProducts = await storage.getUnifiedProducts();\n          const matchedProduct = existingProducts.find(existing => {\n            return existing.sku === product.sku;\n          });\n          \n          if (matchedProduct) {\n            // Product exists - add as competitor link\n            await storage.addCompetitorLink(matchedProduct.id, product.url || sourceUrl);\n            \n            // Update price tracking if needed\n            if (product.extractedPrice) {\n              // Store competitor price information (we'll implement this next)\n            }\n            \n            matchedCount++;\n          } else {\n            // Helper function to extract model number from title\n            const extractModelNumber = (title: string): string => {\n              if (!title) return 'N/A';\n              const patterns = [\n                /\\b([A-Z]{2,}[\\s-]?[A-Z0-9]+[0-9]+[A-Z0-9]*)\\b/i,\n                /\\b([A-Z]+[0-9]+[A-Z0-9]*)\\b/,\n                /\\b([0-9]+[A-Z]+[0-9]*)\\b/,\n                /\\b([A-Z][0-9]{2,}[A-Z0-9]*)\\b/,\n              ];\n              for (const pattern of patterns) {\n                const match = title.match(pattern);\n                if (match) return match[1];\n              }\n              const words = title.split(/\\s+/);\n              for (let i = 1; i < words.length; i++) {\n                if (/[A-Z]/i.test(words[i]) && /[0-9]/.test(words[i])) {\n                  return words[i];\n                }\n              }\n              return 'N/A';\n            };\n            \n            // New product - create it with brand and category IDs\n            const newProduct = await storage.createUnifiedProduct({\n              sku: product.sku,\n              modelNumber: extractModelNumber(product.title),\n              name: product.title,\n              ourPrice: product.price, // Current selling price (sale price if on sale)\n              price: product.price, // Current selling price (same as ourPrice)\n              targetPrice: product.isOnSale ? product.originalPrice : null, // Store original price in targetPrice when on sale\n              image: product.image,\n              brand: brand,\n              brandId: brandId,\n              category: category,\n              categoryId: 'battery-chargers', // Since we're importing battery chargers\n              productPageUrl: product.url || sourceUrl\n            });\n            \n            // Add the source URL as a competitor link\n            if (product.url || sourceUrl) {\n              await storage.addCompetitorLink(newProduct.id, product.url || sourceUrl);\n            }\n            \n            addedCount++;\n          }\n        } catch (err) {\n          console.error(\"Failed to add/match product:\", err);\n        }\n      }\n      \n      res.json({ \n        count: addedCount,\n        matched: matchedCount,\n        total: products.length,\n        competitor: competitorName,\n        category: category\n      });\n    } catch (error) {\n      console.error(\"Error bulk importing products:\", error);\n      res.status(500).json({ error: \"Failed to bulk import products\" });\n    }\n  });\n\n  // Object Storage endpoints for image uploads\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n    res.json({ uploadURL });\n  });\n\n  app.put(\"/api/card-images\", async (req, res) => {\n    if (!req.body.imageURL) {\n      return res.status(400).json({ error: \"imageURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(\n        req.body.imageURL,\n      );\n\n      // Update card customization in storage (we'll handle this on client side for now)\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting card image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // AI Model Number Extraction endpoints\n  app.post(\"/api/extract-model-number\", async (req, res) => {\n    try {\n      const { productName } = req.body;\n      if (!productName) {\n        return res.status(400).json({ error: \"productName is required\" });\n      }\n      \n      const modelNumber = await extractModelNumberWithAI(productName);\n      res.json({ modelNumber });\n    } catch (error) {\n      console.error(\"Error extracting model number:\", error);\n      res.status(500).json({ error: \"Failed to extract model number\" });\n    }\n  });\n\n  app.post(\"/api/bulk-extract-models\", async (req, res) => {\n    try {\n      const products = await storage.getCatalogProducts();\n      const productsToUpdate = products.filter(p => !p.modelNumber || p.modelNumber === 'N/A');\n      \n      if (productsToUpdate.length === 0) {\n        return res.json({ message: \"All products already have model numbers\", updated: 0 });\n      }\n      \n      const extractedModels = await bulkExtractModelNumbers(\n        productsToUpdate.map(p => ({ id: p.id, name: p.name }))\n      );\n      \n      let updateCount = 0;\n      for (const { id, modelNumber } of extractedModels) {\n        if (modelNumber && modelNumber !== 'N/A') {\n          await storage.updateCatalogProduct(id, { modelNumber });\n          updateCount++;\n        }\n      }\n      \n      res.json({ \n        message: `Updated ${updateCount} products with AI-extracted model numbers`,\n        updated: updateCount,\n        total: productsToUpdate.length\n      });\n    } catch (error) {\n      console.error(\"Error bulk extracting model numbers:\", error);\n      res.status(500).json({ error: \"Failed to bulk extract model numbers\" });\n    }\n  });\n\n  // Get product price comparisons by model number (placeholder for future implementation)\n  app.get(\"/api/products/matches/:modelNumber\", async (req, res) => {\n    try {\n      const { modelNumber } = req.params;\n      \n      // TODO: Implement product matching logic\n      res.json({\n        modelNumber,\n        totalMatches: 0,\n        bestPrice: null,\n        bestPriceCompetitor: null,\n        matches: [],\n        message: \"Product matching feature coming soon\"\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error getting product matches:\", error);\n      res.status(500).json({ \n        error: \"Failed to get product matches\",\n        details: error.message\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":63474},"server/scheduler.ts":{"content":"import cron from 'node-cron';\nimport { storage } from './storage';\nimport { scrapeProductDetails } from './playwright-scraper';\nimport { matchProductByModelNumber } from './product-matcher';\n\ninterface ScrapingResult {\n  success: boolean;\n  productId: string;\n  modelNumber: string;\n  oldPrice?: number;\n  newPrice?: number;\n  priceChanged: boolean;\n  error?: string;\n}\n\nclass PriceMonitoringScheduler {\n  private isRunning = false;\n  \n  constructor() {\n    this.setupScheduler();\n  }\n\n  private setupScheduler() {\n    // Schedule daily price checks at 12:00 AM AEST (14:00 UTC during standard time, 13:00 UTC during daylight saving)\n    // Using 14:00 UTC to handle AEST standard time\n    const cronExpression = '0 14 * * *'; // Every day at 2:00 PM UTC (12:00 AM AEST)\n    \n    console.log('Setting up daily price monitoring scheduler for 12:00 AM AEST');\n    \n    cron.schedule(cronExpression, async () => {\n      if (this.isRunning) {\n        console.log('Price monitoring already running, skipping this cycle');\n        return;\n      }\n      \n      console.log('Starting daily price monitoring at', new Date().toLocaleString('en-AU', { timeZone: 'Australia/Sydney' }));\n      await this.runDailyPriceCheck();\n    }, {\n      timezone: 'Australia/Sydney'\n    });\n    \n    console.log('Daily price monitoring scheduler initialized - will run at 12:00 AM AEST');\n  }\n\n  async runDailyPriceCheck(): Promise<ScrapingResult[]> {\n    if (this.isRunning) {\n      throw new Error('Price monitoring is already running');\n    }\n\n    this.isRunning = true;\n    const results: ScrapingResult[] = [];\n    \n    try {\n      console.log('🚀 Starting daily automated price monitoring...');\n      \n      // Create a task to track this automated run\n      const task = await storage.createTask({\n        status: \"running\",\n        runReason: \"scheduled\",\n        startedAt: new Date(),\n        pageId: null\n      });\n\n      // Get all products that need price monitoring\n      const products = await storage.getUnifiedProducts();\n      console.log(`📊 Found ${products.length} products to monitor`);\n\n      let priceChanges = 0;\n      let errors = 0;\n\n      // Check Sydney Tools products first\n      for (const product of products) {\n        if (!product.productPageUrl) continue;\n\n        try {\n          console.log(`🔍 Checking Sydney Tools price for ${product.modelNumber}...`);\n          \n          const scrapedData = await scrapeProductDetails(product.productPageUrl);\n          const oldPrice = product.ourPrice || 0;\n          const newPrice = scrapedData.price || 0;\n          const priceChanged = Math.abs(oldPrice - newPrice) > 0.01; // Account for floating point precision\n\n          if (priceChanged) {\n            // Update the product price\n            await storage.updateCatalogProduct(product.id, {\n              price: newPrice,\n              targetPrice: scrapedData.originalPrice || null,\n              updatedAt: new Date()\n            });\n            \n            priceChanges++;\n            console.log(`💰 Price change detected for ${product.modelNumber}: $${oldPrice} → $${newPrice}`);\n          }\n\n          results.push({\n            success: true,\n            productId: product.id,\n            modelNumber: product.modelNumber || 'N/A',\n            oldPrice,\n            newPrice,\n            priceChanged\n          });\n\n          // Add small delay to avoid overwhelming the server\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n        } catch (error) {\n          console.error(`❌ Error checking price for ${product.modelNumber}:`, error);\n          errors++;\n          \n          results.push({\n            success: false,\n            productId: product.id,\n            modelNumber: product.modelNumber || 'N/A',\n            priceChanged: false,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      // Check competitor prices\n      const competitorListings = await storage.getCompetitorListings();\n      console.log(`🏪 Checking ${competitorListings.length} competitor listings...`);\n\n      for (const listing of competitorListings) {\n        try {\n          console.log(`🔍 Checking competitor price for ${listing.url}...`);\n          \n          const scrapedData = await scrapeProductDetails(listing.url);\n          const oldSnapshots = await storage.getListingSnapshots(listing.id);\n          const latestSnapshot = oldSnapshots[0]; // Most recent\n          const oldPrice = latestSnapshot?.price || 0;\n          const newPrice = scrapedData.price || 0;\n          const priceChanged = Math.abs(oldPrice - newPrice) > 0.01;\n\n          if (priceChanged || !latestSnapshot) {\n            // Create new price snapshot\n            await storage.createListingSnapshot({\n              listingId: listing.id,\n              price: newPrice,\n              currency: 'AUD',\n              inStock: scrapedData.inStock !== false,\n              scrapedAt: new Date()\n            });\n\n            if (priceChanged) {\n              priceChanges++;\n              console.log(`🏪 Competitor price change: ${listing.url} - $${oldPrice} → $${newPrice}`);\n            }\n          }\n\n          // Add delay for competitor scraping too\n          await new Promise(resolve => setTimeout(resolve, 1500));\n\n        } catch (error) {\n          console.error(`❌ Error checking competitor price for ${listing.url}:`, error);\n          errors++;\n        }\n      }\n\n      // Update task completion\n      await storage.updateTask(task.id, {\n        status: \"completed\",\n        finishedAt: new Date(),\n        error: errors > 0 ? `Completed with ${errors} errors` : null\n      });\n\n      console.log(`✅ Daily price monitoring completed!`);\n      console.log(`📊 Summary: ${priceChanges} price changes detected, ${errors} errors`);\n      console.log(`🕒 Next check: Tomorrow at 12:00 AM AEST`);\n\n    } catch (error) {\n      console.error('❌ Daily price monitoring failed:', error);\n      throw error;\n    } finally {\n      this.isRunning = false;\n    }\n\n    return results;\n  }\n\n  // Manual trigger for testing\n  async runManualPriceCheck(): Promise<ScrapingResult[]> {\n    console.log('🧪 Running manual price check...');\n    return await this.runDailyPriceCheck();\n  }\n\n  isCurrentlyRunning(): boolean {\n    return this.isRunning;\n  }\n}\n\n// Export singleton instance\nexport const scheduler = new PriceMonitoringScheduler();\nexport type { ScrapingResult };","size_bytes":6461},"server/scraper-puppeteer.ts":{"content":"import { spawn } from 'child_process';\nimport { writeFileSync, readFileSync, unlinkSync } from 'fs';\nimport { join } from 'path';\n\ninterface ScrapedProduct {\n  sku: string;\n  title: string;\n  price: number;\n  image: string;\n  url: string;\n  brand?: string;\n  model?: string;\n  category?: string;\n}\n\nexport class SimpleBrowserScraper {\n  \n  async scrapeSydneyToolsWithChromium(url: string): Promise<{\n    products: ScrapedProduct[];\n    totalPages: number;\n    currentPage: number;\n    totalProducts: number;\n    categoryName: string;\n  }> {\n    const tempScriptPath = join(process.cwd(), 'temp-scraper.js');\n    \n    // Create a simple JavaScript file that will run in the browser\n    const browserScript = `\n      // Wait for page to load completely\n      setTimeout(() => {\n        const products = [];\n        \n        // Try different selectors for Sydney Tools products\n        const productCards = document.querySelectorAll([\n          '.ant-card.ant-card-bordered.product-card',\n          '.product-item',\n          '[data-testid=\"product\"]',\n          '.product-card',\n          '.product'\n        ].join(', '));\n        \n        console.log('Found product cards:', productCards.length);\n        \n        productCards.forEach((card, index) => {\n          try {\n            // Extract title\n            const titleElement = card.querySelector([\n              '.ant-card-meta-title',\n              '.product-title', \n              'h3', 'h4', 'h2',\n              '[data-testid=\"product-title\"]',\n              '.title'\n            ].join(', '));\n            \n            const title = titleElement?.textContent?.trim();\n            if (!title) return;\n            \n            // Extract price\n            const priceElement = card.querySelector([\n              '.price',\n              '.ant-typography-title',\n              '[class*=\"price\"]',\n              '.cost',\n              '.amount'\n            ].join(', '));\n            \n            let price = 0;\n            if (priceElement) {\n              const priceText = priceElement.textContent?.replace(/[^0-9.]/g, '');\n              price = parseFloat(priceText || '0');\n            }\n            \n            // Extract image\n            const imgElement = card.querySelector('img');\n            const image = imgElement?.src || imgElement?.getAttribute('data-src') || '';\n            \n            // Extract URL\n            const linkElement = card.querySelector('a') || card.closest('a');\n            let productUrl = linkElement?.href || '';\n            if (productUrl && !productUrl.startsWith('http')) {\n              productUrl = window.location.origin + productUrl;\n            }\n            \n            // Generate SKU and brand\n            const brand = title.split(' ')[0];\n            const sku = title.replace(/[^a-zA-Z0-9]/g, '-').replace(/-+/g, '-').substring(0, 20).toUpperCase() + '-' + index;\n            \n            products.push({\n              sku,\n              title,\n              price,\n              image,\n              url: productUrl,\n              brand,\n              category: 'Products'\n            });\n          } catch (error) {\n            console.error('Error extracting product:', error);\n          }\n        });\n        \n        // Get category name\n        const categoryElement = document.querySelector([\n          'h1',\n          '.page-title',\n          '.category-title',\n          '.ant-breadcrumb-link:last-child'\n        ].join(', '));\n        \n        const categoryName = categoryElement?.textContent?.trim() || 'PRODUCTS';\n        \n        // Output results as JSON\n        console.log('SCRAPER_RESULTS:', JSON.stringify({\n          products,\n          totalProducts: products.length,\n          categoryName: categoryName.toUpperCase()\n        }));\n        \n      }, 3000); // Wait 3 seconds for content to load\n    `;\n    \n    // Write the script to a temporary file\n    writeFileSync(tempScriptPath, browserScript);\n    \n    try {\n      console.log('Starting Chromium browser scraping for:', url);\n      \n      // Create a simple Node.js script that uses chrome-launcher\n      const extractorScript = `\n        const { execSync } = require('child_process');\n        \n        try {\n          // Run chromium and capture output after waiting for JS to load\n          const result = execSync(\\`chromium --headless --no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-gpu --virtual-time-budget=5000 --run-all-compositor-stages-before-draw --dump-dom \"${url}\"\\`, {\n            encoding: 'utf8',\n            timeout: 20000\n          });\n          \n          console.log('DOM_OUTPUT_START');\n          console.log(result);\n          console.log('DOM_OUTPUT_END');\n        } catch (error) {\n          console.error('Error:', error.message);\n        }\n      `;\n      \n      // Write and execute the script\n      const scriptPath = join(process.cwd(), 'temp-extractor.js');\n      writeFileSync(scriptPath, extractorScript);\n      \n      const extractorProcess = spawn('node', [scriptPath], {\n        stdio: ['ignore', 'pipe', 'pipe']\n      });\n      \n      let output = '';\n      let errorOutput = '';\n      \n      extractorProcess.stdout.on('data', (data) => {\n        output += data.toString();\n      });\n      \n      extractorProcess.stderr.on('data', (data) => {\n        errorOutput += data.toString();\n      });\n      \n      return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          extractorProcess.kill();\n          reject(new Error('Browser scraping timeout'));\n        }, 25000);\n        \n        extractorProcess.on('close', (code) => {\n          clearTimeout(timeout);\n          \n          console.log('Browser automation output length:', output.length);\n          console.log('Browser automation errors:', errorOutput);\n          \n          // Extract the DOM content between markers\n          const domStartMatch = output.match(/DOM_OUTPUT_START\\s*\\n(.*)\\nDOM_OUTPUT_END/s);\n          const domContent = domStartMatch ? domStartMatch[1] : output;\n          \n          const products = [];\n          \n          // Look for various product patterns in the rendered DOM\n          const patterns = [\n            // Sydney Tools specific patterns\n            /<div[^>]*class=\"[^\"]*ant-card[^\"]*ant-card-bordered[^\"]*product-card[^\"]*\"[^>]*>.*?<\\/div>\\s*<\\/div>\\s*<\\/div>/gs,\n            // General product patterns\n            /<div[^>]*class=\"[^\"]*product[^\"]*\"[^>]*>.*?<\\/div>/gs,\n            /<article[^>]*class=\"[^\"]*product[^\"]*\"[^>]*>.*?<\\/article>/gs\n          ];\n          \n          for (const pattern of patterns) {\n            const matches = domContent.match(pattern) || [];\n            console.log(`Found ${matches.length} matches with pattern`);\n            \n            matches.forEach((cardHtml, index) => {\n              try {\n                // Extract title from multiple possible sources\n                const titleMatches = [\n                  cardHtml.match(/title=\"([^\"]+)\"/),\n                  cardHtml.match(/<h[1-6][^>]*>([^<]+)<\\/h[1-6]>/),\n                  cardHtml.match(/alt=\"([^\"]+)\"/),\n                  cardHtml.match(/data-title=\"([^\"]+)\"/),\n                  cardHtml.match(/>([^<]*(?:Charger|Battery|Jump Starter)[^<]*)</gi)\n                ];\n                \n                const title = titleMatches.find(match => match)?.[1]?.trim().replace(/&amp;/g, '&');\n                if (!title || title.length < 10) return;\n                \n                // Extract price with various patterns\n                const priceMatches = [\n                  cardHtml.match(/\\$(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/),\n                  cardHtml.match(/(\\d+)\\.(\\d{2})/),\n                  cardHtml.match(/price[^>]*>.*?\\$?(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i)\n                ];\n                \n                const priceMatch = priceMatches.find(match => match);\n                const price = priceMatch ? parseFloat(priceMatch[1].replace(/,/g, '')) : 0;\n                \n                if (price === 0) return;\n                \n                // Extract image\n                const imageMatch = cardHtml.match(/src=\"([^\"]+\\.(?:jpg|jpeg|png|webp|svg)[^\"]*)\"/i);\n                const image = imageMatch ? imageMatch[1] : '';\n                \n                // Extract product URL\n                const linkMatches = [\n                  cardHtml.match(/href=\"(\\/product\\/[^\"]+)\"/),\n                  cardHtml.match(/href=\"([^\"]*product[^\"]*)\"/),\n                  cardHtml.match(/data-url=\"([^\"]+)\"/)\n                ];\n                \n                const linkMatch = linkMatches.find(match => match);\n                const productUrl = linkMatch ? \n                  (linkMatch[1].startsWith('http') ? linkMatch[1] : `https://sydneytools.com.au${linkMatch[1]}`) : \n                  '';\n                \n                const brand = title.split(' ')[0];\n                const cleanTitle = title.replace(/\\s+/g, ' ').trim();\n                \n                products.push({\n                  sku: `${brand.toUpperCase().replace(/[^A-Z0-9]/g, '')}-${String(products.length + 1).padStart(3, '0')}`,\n                  title: cleanTitle,\n                  price,\n                  image: image.startsWith('http') ? image : (image ? `https://sydneytools.com.au${image}` : ''),\n                  url: productUrl,\n                  brand,\n                  model: cleanTitle.replace(brand, '').trim(),\n                  category: 'Car Battery Chargers'\n                });\n              } catch (e) {\n                console.error('Error parsing product:', e);\n              }\n            });\n            \n            if (products.length > 0) break; // Stop if we found products with this pattern\n          }\n          \n          console.log(`Successfully extracted ${products.length} authentic products from DOM`);\n          \n          resolve({\n            products,\n            totalPages: Math.ceil(products.length / 20),\n            currentPage: 1,\n            totalProducts: products.length,\n            categoryName: 'CAR BATTERY CHARGERS'\n          });\n        });\n        \n        chromiumProcess.on('error', (error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n      });\n      \n    } catch (error) {\n      throw new Error(`Browser scraping failed: ${error.message}`);\n    } finally {\n      // Clean up temp file\n      try {\n        unlinkSync(tempScriptPath);\n      } catch (e) {\n        // Ignore cleanup errors\n      }\n    }\n  }\n}\n\nexport const browserScraper = new SimpleBrowserScraper();","size_bytes":10512},"server/storage.drizzle.ts":{"content":"import { eq, and, sql, desc, gte } from \"drizzle-orm\";\nimport { getDb } from \"./db\";\nimport { \n  type User, type InsertUser, type Competitor, type InsertCompetitor,\n  type Category, type InsertCategory, type ProductType, type InsertProductType,\n  type BrandAlias, type InsertBrandAlias, type Page, type InsertPage,\n  type Product, type InsertProduct, type ProductSpec, type InsertProductSpec,\n  type PriceSnapshot, type InsertPriceSnapshot, type PriceBand, type InsertPriceBand,\n  type Task, type InsertTask,\n  type Brand, type InsertBrand, type CatalogProduct, type InsertCatalogProduct,\n  type CompetitorListing, type InsertCompetitorListing, type ListingSnapshot,\n  type InsertListingSnapshot, type ListingImage, type InsertListingImage,\n  users, competitors, categories, productTypes, brandAliases, pages,\n  products, productSpecs, priceSnapshots, priceBands, tasks,\n  brands, catalogProducts, competitorListings, listingSnapshots, listingImages,\n  unifiedProducts, unifiedCompetitorLinks\n} from \"@shared/schema\";\nimport type { IStorage } from \"./storage\";\n\nexport class DrizzleStorage implements IStorage {\n  private db: ReturnType<typeof getDb>;\n\n  constructor() {\n    this.db = getDb();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await this.db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  // Competitors\n  async getCompetitors(): Promise<Competitor[]> {\n    return await this.db.select().from(competitors);\n  }\n\n  async getCompetitor(id: string): Promise<Competitor | undefined> {\n    const result = await this.db.select().from(competitors).where(eq(competitors.id, id));\n    return result[0];\n  }\n\n  async createCompetitor(competitor: InsertCompetitor): Promise<Competitor> {\n    const result = await this.db.insert(competitors).values(competitor).returning();\n    return result[0];\n  }\n\n  async updateCompetitor(id: string, updates: Partial<InsertCompetitor>): Promise<Competitor | undefined> {\n    const result = await this.db.update(competitors)\n      .set(updates)\n      .where(eq(competitors.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCompetitor(id: string): Promise<boolean> {\n    try {\n      // First delete related competitor listings\n      await this.db.delete(competitorListings).where(eq(competitorListings.competitorId, id));\n      \n      // Then delete the competitor\n      const result = await this.db.delete(competitors).where(eq(competitors.id, id)).returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error deleting competitor:', error);\n      return false;\n    }\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return await this.db.select().from(categories);\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    const result = await this.db.select().from(categories).where(eq(categories.id, id));\n    return result[0];\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const result = await this.db.insert(categories).values(category).returning();\n    return result[0];\n  }\n\n  // Product Types\n  async getProductTypes(): Promise<ProductType[]> {\n    return await this.db.select().from(productTypes);\n  }\n\n  async getProductTypesByCategory(categoryId: string): Promise<ProductType[]> {\n    return await this.db.select().from(productTypes)\n      .where(eq(productTypes.categoryId, categoryId));\n  }\n\n  async getProductType(id: string): Promise<ProductType | undefined> {\n    const result = await this.db.select().from(productTypes).where(eq(productTypes.id, id));\n    return result[0];\n  }\n\n  async createProductType(productType: InsertProductType): Promise<ProductType> {\n    const result = await this.db.insert(productTypes).values(productType).returning();\n    return result[0];\n  }\n\n  // Brand Aliases\n  async getBrandAliases(): Promise<BrandAlias[]> {\n    return await this.db.select().from(brandAliases);\n  }\n\n  async createBrandAlias(brandAlias: InsertBrandAlias): Promise<BrandAlias> {\n    const result = await this.db.insert(brandAliases).values(brandAlias).returning();\n    return result[0];\n  }\n\n  // Pages\n  async getPages(): Promise<Page[]> {\n    return await this.db.select().from(pages);\n  }\n\n  async getPagesByCompetitor(competitorId: string): Promise<Page[]> {\n    return await this.db.select().from(pages)\n      .where(eq(pages.competitorId, competitorId));\n  }\n\n  async getPage(id: string): Promise<Page | undefined> {\n    const result = await this.db.select().from(pages).where(eq(pages.id, id));\n    return result[0];\n  }\n\n  async createPage(page: InsertPage): Promise<Page> {\n    const result = await this.db.insert(pages).values(page).returning();\n    return result[0];\n  }\n\n  async updatePage(id: string, updates: Partial<Page>): Promise<Page | undefined> {\n    const result = await this.db.update(pages)\n      .set(updates)\n      .where(eq(pages.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePage(id: string): Promise<boolean> {\n    const result = await this.db.delete(pages).where(eq(pages.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Products\n  async getProducts(filters?: { competitorId?: string; productTypeId?: string; brand?: string }): Promise<Product[]> {\n    let query = this.db.select().from(products);\n    \n    if (filters?.competitorId) {\n      query = query.where(eq(products.competitorId, filters.competitorId));\n    }\n    \n    if (filters?.productTypeId) {\n      query = query.where(eq(products.productTypeId, filters.productTypeId));\n    }\n    \n    if (filters?.brand) {\n      query = query.where(eq(products.brand, filters.brand));\n    }\n    \n    return await query;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const result = await this.db.select().from(products).where(eq(products.id, id));\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const result = await this.db.insert(products).values(product).returning();\n    return result[0];\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const result = await this.db.update(products)\n      .set(updates)\n      .where(eq(products.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Product Specs\n  async getProductSpecs(productId: string): Promise<ProductSpec[]> {\n    return await this.db.select().from(productSpecs)\n      .where(eq(productSpecs.productId, productId));\n  }\n\n  async createProductSpec(spec: InsertProductSpec): Promise<ProductSpec> {\n    const result = await this.db.insert(productSpecs).values(spec).returning();\n    return result[0];\n  }\n\n  // Price Snapshots\n  async getPriceSnapshots(productId: string): Promise<PriceSnapshot[]> {\n    return await this.db.select().from(priceSnapshots)\n      .where(eq(priceSnapshots.productId, productId))\n      .orderBy(desc(priceSnapshots.scrapedAt));\n  }\n\n  async getLatestPriceSnapshots(): Promise<PriceSnapshot[]> {\n    // Get the latest price snapshot for each product\n    const subquery = sql`\n      SELECT DISTINCT ON (product_id) *\n      FROM price_snapshots\n      ORDER BY product_id, scraped_at DESC\n    `;\n    \n    const result = await this.db.execute(subquery);\n    return result.rows as PriceSnapshot[];\n  }\n\n  async createPriceSnapshot(snapshot: InsertPriceSnapshot): Promise<PriceSnapshot> {\n    const result = await this.db.insert(priceSnapshots).values(snapshot).returning();\n    return result[0];\n  }\n\n  async getRecentPriceChanges(hours: number): Promise<any[]> {\n    const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000);\n    \n    const result = await this.db\n      .select({\n        productId: priceSnapshots.productId,\n        productTitle: products.title,\n        competitorName: competitors.name,\n        oldPrice: sql<number>`LAG(${priceSnapshots.priceDecimal}) OVER (PARTITION BY ${priceSnapshots.productId} ORDER BY ${priceSnapshots.scrapedAt})`,\n        newPrice: priceSnapshots.priceDecimal,\n        changeType: sql<string>`\n          CASE \n            WHEN LAG(${priceSnapshots.priceDecimal}) OVER (PARTITION BY ${priceSnapshots.productId} ORDER BY ${priceSnapshots.scrapedAt}) > ${priceSnapshots.priceDecimal} THEN 'price_drop'\n            WHEN LAG(${priceSnapshots.priceDecimal}) OVER (PARTITION BY ${priceSnapshots.productId} ORDER BY ${priceSnapshots.scrapedAt}) < ${priceSnapshots.priceDecimal} THEN 'price_increase'\n            ELSE 'no_change'\n          END\n        `,\n        timestamp: priceSnapshots.scrapedAt,\n      })\n      .from(priceSnapshots)\n      .innerJoin(products, eq(products.id, priceSnapshots.productId))\n      .innerJoin(competitors, eq(competitors.id, products.competitorId))\n      .where(gte(priceSnapshots.scrapedAt, cutoffTime));\n    \n    return result.filter(r => r.changeType !== 'no_change' && r.oldPrice !== null);\n  }\n\n  // Price Bands\n  async getPriceBands(productTypeId?: string, brand?: string): Promise<PriceBand[]> {\n    let query = this.db.select().from(priceBands);\n    \n    if (productTypeId) {\n      query = query.where(eq(priceBands.productTypeId, productTypeId));\n    }\n    \n    if (brand) {\n      query = query.where(eq(priceBands.brand, brand));\n    }\n    \n    return await query;\n  }\n\n  async createPriceBand(band: InsertPriceBand): Promise<PriceBand> {\n    const result = await this.db.insert(priceBands).values(band).returning();\n    return result[0];\n  }\n\n  // Tasks\n  async getTasks(): Promise<Task[]> {\n    return await this.db.select().from(tasks)\n      .orderBy(desc(tasks.startedAt));\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const result = await this.db.insert(tasks).values(task).returning();\n    return result[0];\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task | undefined> {\n    const result = await this.db.update(tasks)\n      .set(updates)\n      .where(eq(tasks.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Additional methods needed for price monitoring\n  async getCompetitorListings(): Promise<CompetitorListing[]> {\n    return await this.db.select().from(competitorListings);\n  }\n\n  async updateCatalogProduct(id: string, updates: Partial<CatalogProduct>): Promise<CatalogProduct | undefined> {\n    const result = await this.db.update(catalogProducts)\n      .set(updates)\n      .where(eq(catalogProducts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getListingSnapshots(listingId: string): Promise<ListingSnapshot[]> {\n    return await this.db.select().from(listingSnapshots)\n      .where(eq(listingSnapshots.listingId, listingId))\n      .orderBy(desc(listingSnapshots.scrapedAt));\n  }\n\n  // Analytics\n  async getBrandCoverageMatrix(productTypeId: string): Promise<any> {\n    const productsData = await this.db\n      .select({\n        brand: products.brand,\n        competitorId: products.competitorId,\n        competitorName: competitors.name,\n        count: sql<number>`COUNT(*)`,\n      })\n      .from(products)\n      .innerJoin(competitors, eq(competitors.id, products.competitorId))\n      .where(eq(products.productTypeId, productTypeId))\n      .groupBy(products.brand, products.competitorId, competitors.name);\n    \n    // Transform into matrix format\n    const brands = [...new Set(productsData.map(p => p.brand))];\n    const competitorMap = new Map<string, Map<string, number>>();\n    \n    productsData.forEach(row => {\n      if (!competitorMap.has(row.competitorName)) {\n        competitorMap.set(row.competitorName, new Map());\n      }\n      competitorMap.get(row.competitorName)!.set(row.brand, row.count);\n    });\n    \n    return {\n      brands,\n      competitors: Array.from(competitorMap.entries()).map(([name, brandCounts]) => ({\n        name,\n        coverage: brands.map(brand => brandCounts.get(brand) || 0),\n      })),\n    };\n  }\n\n  async getKPIMetrics(): Promise<any> {\n    const [totalProducts] = await this.db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(products);\n    \n    const [totalCompetitors] = await this.db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(competitors);\n    \n    const [activeTasks] = await this.db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(tasks)\n      .where(sql`${tasks.status} IN ('pending', 'running')`);\n    \n    const recentChanges = await this.getRecentPriceChanges(24);\n    const priceDrops = recentChanges.filter(c => c.changeType === 'price_drop').length;\n    \n    return {\n      brandCoverage: `${totalProducts.count || 0}/${totalCompetitors.count || 0}`,\n      priceUndercuts: priceDrops,\n      priceChanges24h: recentChanges.length,\n      activeTasks: activeTasks.count || 0,\n    };\n  }\n\n  // Brand methods\n  async createBrand(brand: InsertBrand): Promise<Brand> {\n    const result = await this.db.insert(brands).values(brand).returning();\n    return result[0];\n  }\n\n  async getBrands(): Promise<Brand[]> {\n    return await this.db.select().from(brands);\n  }\n\n  async getBrand(id: string): Promise<Brand | undefined> {\n    const result = await this.db.select().from(brands).where(eq(brands.id, id));\n    return result[0];\n  }\n\n  // Catalog Product methods\n  async createCatalogProduct(product: InsertCatalogProduct): Promise<CatalogProduct> {\n    const result = await this.db.insert(catalogProducts).values(product).returning();\n    return result[0];\n  }\n\n  async listCatalogProducts(): Promise<CatalogProduct[]> {\n    return await this.db.select().from(catalogProducts);\n  }\n\n  async getCatalogProductById(id: string): Promise<CatalogProduct | undefined> {\n    const result = await this.db.select().from(catalogProducts).where(eq(catalogProducts.id, id));\n    return result[0];\n  }\n\n  async updateProductModelNumber(id: string, modelNumber: string): Promise<void> {\n    await this.db\n      .update(catalogProducts)\n      .set({\n        modelNumber: modelNumber,\n        updatedAt: new Date()\n      })\n      .where(eq(catalogProducts.id, id));\n  }\n\n  // Competitor Listing methods\n  async createCompetitorListing(listing: InsertCompetitorListing): Promise<CompetitorListing> {\n    const result = await this.db.insert(competitorListings).values(listing).returning();\n    return result[0];\n  }\n\n  async listListingsByProduct(productId: string): Promise<CompetitorListing[]> {\n    return await this.db.select().from(competitorListings)\n      .where(eq(competitorListings.productId, productId));\n  }\n\n  async updateListing(id: string, updates: Partial<CompetitorListing>): Promise<CompetitorListing | undefined> {\n    const result = await this.db.update(competitorListings)\n      .set({ ...updates, lastSeenAt: new Date() })\n      .where(eq(competitorListings.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Listing Snapshot methods\n  async createListingSnapshot(snapshot: InsertListingSnapshot): Promise<ListingSnapshot> {\n    const result = await this.db.insert(listingSnapshots).values(snapshot).returning();\n    return result[0];\n  }\n\n  async getLatestListingSnapshotsByProduct(productId: string): Promise<ListingSnapshot[]> {\n    const listings = await this.listListingsByProduct(productId);\n    const latestSnapshots: ListingSnapshot[] = [];\n    \n    for (const listing of listings) {\n      const result = await this.db\n        .select()\n        .from(listingSnapshots)\n        .where(eq(listingSnapshots.listingId, listing.id))\n        .orderBy(desc(listingSnapshots.scrapedAt))\n        .limit(1);\n      \n      if (result.length > 0) {\n        latestSnapshots.push(result[0]);\n      }\n    }\n    \n    return latestSnapshots;\n  }\n\n  async getListingHistory(listingId: string, limit: number = 30): Promise<ListingSnapshot[]> {\n    return await this.db\n      .select()\n      .from(listingSnapshots)\n      .where(eq(listingSnapshots.listingId, listingId))\n      .orderBy(desc(listingSnapshots.scrapedAt))\n      .limit(limit);\n  }\n\n  // Listing Image methods\n  async createListingImage(image: InsertListingImage): Promise<ListingImage> {\n    const result = await this.db.insert(listingImages).values(image).returning();\n    return result[0];\n  }\n\n  async getListingImages(listingId: string): Promise<ListingImage[]> {\n    return await this.db\n      .select()\n      .from(listingImages)\n      .where(eq(listingImages.listingId, listingId))\n      .orderBy(listingImages.position);\n  }\n\n  // Unified Products implementation (using catalog products)\n  async getUnifiedProducts(): Promise<any[]> {\n    // Single optimized query with all necessary joins\n    const allData = await this.db\n      .select({\n        productId: catalogProducts.id,\n        productSku: catalogProducts.ourSku,\n        productModelNumber: catalogProducts.modelNumber,\n        productName: catalogProducts.name,\n        productPrice: catalogProducts.price,\n        productTargetPrice: catalogProducts.targetPrice,\n        productImageUrl: catalogProducts.imageUrl,\n        productPageUrl: catalogProducts.productPageUrl,\n        productCreatedAt: catalogProducts.createdAt,\n        brandName: brands.name,\n        categoryName: categories.name,\n        listingId: competitorListings.id,\n        listingUrl: competitorListings.url,\n        listingTitleOverride: competitorListings.titleOverride,\n        listingActive: competitorListings.active,\n        listingLastSeenAt: competitorListings.lastSeenAt,\n        competitorName: competitors.name,\n        competitorId: competitorListings.competitorId\n      })\n      .from(catalogProducts)\n      .leftJoin(brands, eq(catalogProducts.brandId, brands.id))\n      .leftJoin(categories, eq(catalogProducts.categoryId, categories.id))\n      .leftJoin(competitorListings, eq(competitorListings.productId, catalogProducts.id))\n      .leftJoin(competitors, eq(competitorListings.competitorId, competitors.id));\n    \n    // Fetch all price snapshots - we'll filter for latest in JavaScript\n    const listingPrices = await this.db\n      .select({\n        listingId: listingSnapshots.listingId,\n        price: listingSnapshots.price,\n        currency: listingSnapshots.currency,\n        inStock: listingSnapshots.inStock,\n        scrapedAt: listingSnapshots.scrapedAt\n      })\n      .from(listingSnapshots)\n      .orderBy(desc(listingSnapshots.scrapedAt));\n    \n    // Create a map of listing prices (keep only the latest for each listing)\n    const priceMap = new Map();\n    for (const snapshot of listingPrices) {\n      const existing = priceMap.get(snapshot.listingId);\n      if (!existing || snapshot.scrapedAt > existing.scrapedAt) {\n        priceMap.set(snapshot.listingId, {\n          price: snapshot.price,\n          currency: snapshot.currency,\n          inStock: snapshot.inStock,\n          scrapedAt: snapshot.scrapedAt\n        });\n      }\n    }\n    \n    // Group by product ID to combine competitor links\n    const productsMap = new Map();\n    \n    for (const row of allData) {\n      if (!productsMap.has(row.productId)) {\n        // Convert decimal strings to numbers properly\n        const currentPrice = row.productPrice ? parseFloat(row.productPrice) : null;\n        const originalPrice = row.productTargetPrice ? parseFloat(row.productTargetPrice) : null;\n        \n        // Show original price only if it's higher than current price (indicating a sale)\n        const isOnSale = originalPrice && currentPrice && originalPrice > currentPrice;\n        \n        productsMap.set(row.productId, {\n          id: row.productId,\n          sku: row.productSku || row.productId.slice(0, 8).toUpperCase(),\n          modelNumber: row.productModelNumber || 'N/A',\n          name: row.productName || 'Unnamed Product',\n          ourPrice: currentPrice,\n          price: currentPrice,\n          originalPrice: isOnSale ? originalPrice : null,\n          image: row.productImageUrl || null,\n          brand: row.brandName || 'Unknown',\n          category: row.categoryName || 'Uncategorized',\n          productPageUrl: row.productPageUrl || null,\n          competitorLinks: [],\n          createdAt: row.productCreatedAt?.toISOString() || new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        });\n      }\n      \n      // Add competitor link if it exists\n      if (row.listingId) {\n        const priceData = priceMap.get(row.listingId);\n        productsMap.get(row.productId).competitorLinks.push({\n          id: row.listingId,\n          url: row.listingUrl,\n          competitorName: row.competitorName || row.competitorId,\n          extractedTitle: row.listingTitleOverride || undefined,\n          extractedPrice: priceData?.price || undefined,\n          status: row.listingActive ? \"success\" : \"pending\",\n          lastScraped: row.listingLastSeenAt?.toISOString()\n        });\n        \n        // Also add as competitorListings for price comparison display\n        if (!productsMap.get(row.productId).competitorListings) {\n          productsMap.get(row.productId).competitorListings = [];\n        }\n        \n        if (priceData?.price) {\n          productsMap.get(row.productId).competitorListings.push({\n            id: row.listingId,\n            url: row.listingUrl,\n            competitorName: row.competitorName || row.competitorId,\n            latestSnapshot: {\n              price: priceData.price,\n              currency: priceData.currency || 'AUD',\n              inStock: priceData.inStock,\n              scrapedAt: priceData.scrapedAt\n            }\n          });\n        }\n      }\n    }\n    \n    return Array.from(productsMap.values());\n  }\n\n  async getUnifiedProduct(id: string): Promise<any> {\n    const product = await this.getCatalogProductById(id);\n    if (!product) return undefined;\n    \n    const listings = await this.db\n      .select()\n      .from(competitorListings)\n      .where(eq(competitorListings.productId, id));\n    \n    const competitorLinks = listings.map(listing => ({\n      id: listing.id,\n      url: listing.url,\n      competitorName: listing.competitorId,\n      extractedTitle: listing.titleOverride || undefined,\n      extractedPrice: undefined, // Price is stored in listing snapshots\n      status: listing.active ? \"success\" : \"pending\",\n      lastScraped: listing.lastSeenAt?.toISOString()\n    }));\n    \n    return {\n      id: product.id,\n      sku: product.id.slice(0, 8).toUpperCase(),\n      modelNumber: product.modelNumber || 'N/A',\n      name: product.name || 'Unnamed Product',\n      ourPrice: 0,\n      brand: product.brandId || 'Unknown',\n      category: product.categoryId || 'Uncategorized',\n      productPageUrl: product.productPageUrl || null,\n      competitorLinks,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n  }\n\n  async createUnifiedProduct(product: any): Promise<any> {\n    // Debug logging\n    console.log('Creating unified product with data:', JSON.stringify(product));\n    \n    // Ensure we have a name\n    const productName = product.name || product.title || 'Unnamed Product';\n    console.log('Product name resolved to:', productName);\n    \n    // Save the product with price, image, brand, category, modelNumber and productPageUrl\n    const result = await this.db.insert(catalogProducts).values({\n      name: productName,\n      brandId: product.brandId || null,\n      categoryId: product.categoryId || null,\n      productTypeId: null,\n      ourSku: product.sku || null,\n      modelNumber: product.modelNumber || null,\n      quality: null,\n      targetPrice: product.targetPrice ? product.targetPrice.toString() : null,\n      price: product.price ? product.price.toString() : null,\n      imageUrl: product.image || null,\n      productPageUrl: product.productPageUrl || null\n    }).returning();\n    \n    const catalogProduct = result[0];\n    \n    return {\n      id: catalogProduct.id,\n      sku: product.sku || catalogProduct.id.slice(0, 8).toUpperCase(),\n      modelNumber: product.modelNumber || 'N/A',\n      name: catalogProduct.name || productName,\n      ourPrice: product.ourPrice || product.price || 0,\n      price: product.price || 0,\n      image: product.image || null,\n      brand: product.brand || 'Unknown',\n      category: product.category || 'Uncategorized',\n      productPageUrl: product.productPageUrl || null,\n      competitorLinks: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n  }\n\n  async deleteUnifiedProduct(id: string): Promise<void> {\n    try {\n      // First get all listing IDs for this product\n      const listings = await this.db.select({ id: competitorListings.id })\n        .from(competitorListings)\n        .where(eq(competitorListings.productId, id));\n      \n      // Delete listing snapshots and images for each listing\n      for (const listing of listings) {\n        await this.db.delete(listingSnapshots)\n          .where(eq(listingSnapshots.listingId, listing.id));\n        \n        await this.db.delete(listingImages)\n          .where(eq(listingImages.listingId, listing.id));\n      }\n      \n      // Delete associated listings\n      await this.db.delete(competitorListings)\n        .where(eq(competitorListings.productId, id));\n      \n      // Finally delete the product\n      const result = await this.db.delete(catalogProducts)\n        .where(eq(catalogProducts.id, id));\n      \n      console.log(`Deleted product ${id} and all associated data`);\n    } catch (error) {\n      console.error(`Error deleting product ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async addCompetitorLink(productId: string, url: string): Promise<any> {\n    const competitorName = new URL(url).hostname.replace(\"www.\", \"\").split(\".\")[0];\n    \n    // Check if competitor exists, if not create it\n    let competitor = await this.db\n      .select()\n      .from(competitors)\n      .where(eq(competitors.siteDomain, new URL(url).hostname))\n      .limit(1);\n    \n    let competitorId: string;\n    if (competitor.length === 0) {\n      const newCompetitor = await this.createCompetitor({\n        name: competitorName,\n        siteDomain: new URL(url).hostname,\n        status: \"active\",\n        isUs: false\n      });\n      competitorId = newCompetitor.id;\n    } else {\n      competitorId = competitor[0].id;\n    }\n    \n    const listing = await this.createCompetitorListing({\n      productId,\n      competitorId,\n      url,\n      titleOverride: null,\n      active: true\n    });\n    \n    return {\n      id: listing.id,\n      productId,\n      url,\n      competitorName,\n      status: \"pending\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n  }\n}","size_bytes":26701},"server/storage.factory.ts":{"content":"import { MemStorage, type IStorage } from \"./storage\";\nimport { DrizzleStorage } from \"./storage.drizzle\";\n\nlet storageInstance: IStorage | null = null;\n\nexport function getStorage(): IStorage {\n  if (storageInstance) {\n    return storageInstance;\n  }\n\n  if (process.env.DATABASE_URL) {\n    console.log(\"[storage] Using DrizzleStorage with PostgreSQL database\");\n    storageInstance = new DrizzleStorage();\n  } else {\n    console.log(\"[storage] Using MemStorage (in-memory storage)\");\n    storageInstance = new MemStorage();\n  }\n\n  return storageInstance;\n}\n\nexport function resetStorage(): void {\n  storageInstance = null;\n}","size_bytes":625},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Competitor, type InsertCompetitor,\n  type Category, type InsertCategory, type ProductType, type InsertProductType,\n  type BrandAlias, type InsertBrandAlias, type Page, type InsertPage,\n  type Product, type InsertProduct, type ProductSpec, type InsertProductSpec,\n  type PriceSnapshot, type InsertPriceSnapshot, type PriceBand, type InsertPriceBand,\n  type Task, type InsertTask,\n  type Brand, type InsertBrand, type CatalogProduct, type InsertCatalogProduct,\n  type CompetitorListing, type InsertCompetitorListing, type ListingSnapshot,\n  type InsertListingSnapshot, type ListingImage, type InsertListingImage\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Competitors\n  getCompetitors(): Promise<Competitor[]>;\n  getCompetitor(id: string): Promise<Competitor | undefined>;\n  createCompetitor(competitor: InsertCompetitor): Promise<Competitor>;\n  updateCompetitor(id: string, updates: Partial<InsertCompetitor>): Promise<Competitor | undefined>;\n  deleteCompetitor(id: string): Promise<boolean>;\n\n  // Categories\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n\n  // Product Types\n  getProductTypes(): Promise<ProductType[]>;\n  getProductTypesByCategory(categoryId: string): Promise<ProductType[]>;\n  getProductType(id: string): Promise<ProductType | undefined>;\n  createProductType(productType: InsertProductType): Promise<ProductType>;\n\n  // Brand Aliases\n  getBrandAliases(): Promise<BrandAlias[]>;\n  createBrandAlias(brandAlias: InsertBrandAlias): Promise<BrandAlias>;\n\n  // Pages\n  getPages(): Promise<Page[]>;\n  getPagesByCompetitor(competitorId: string): Promise<Page[]>;\n  getPage(id: string): Promise<Page | undefined>;\n  createPage(page: InsertPage): Promise<Page>;\n  updatePage(id: string, updates: Partial<Page>): Promise<Page | undefined>;\n  deletePage(id: string): Promise<boolean>;\n\n  // Products\n  getProducts(filters?: { competitorId?: string; productTypeId?: string; brand?: string }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined>;\n\n  // Product Specs\n  getProductSpecs(productId: string): Promise<ProductSpec[]>;\n  createProductSpec(spec: InsertProductSpec): Promise<ProductSpec>;\n\n  // Price Snapshots\n  getPriceSnapshots(productId: string): Promise<PriceSnapshot[]>;\n  getLatestPriceSnapshots(): Promise<PriceSnapshot[]>;\n  createPriceSnapshot(snapshot: InsertPriceSnapshot): Promise<PriceSnapshot>;\n  getRecentPriceChanges(hours: number): Promise<any[]>;\n\n  // Price Bands\n  getPriceBands(productTypeId?: string, brand?: string): Promise<PriceBand[]>;\n  createPriceBand(band: InsertPriceBand): Promise<PriceBand>;\n\n  // Tasks\n  getTasks(): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<Task>): Promise<Task | undefined>;\n\n  // Analytics\n  getBrandCoverageMatrix(productTypeId: string): Promise<any>;\n  getKPIMetrics(): Promise<any>;\n\n  // Brands\n  createBrand(brand: InsertBrand): Promise<Brand>;\n  getBrands(): Promise<Brand[]>;\n  getBrand(id: string): Promise<Brand | undefined>;\n\n  // Catalog Products\n  createCatalogProduct(product: InsertCatalogProduct): Promise<CatalogProduct>;\n  listCatalogProducts(): Promise<CatalogProduct[]>;\n  getCatalogProductById(id: string): Promise<CatalogProduct | undefined>;\n\n  // Competitor Listings\n  createCompetitorListing(listing: InsertCompetitorListing): Promise<CompetitorListing>;\n  listListingsByProduct(productId: string): Promise<CompetitorListing[]>;\n  updateListing(id: string, updates: Partial<CompetitorListing>): Promise<CompetitorListing | undefined>;\n\n  // Listing Snapshots\n  createListingSnapshot(snapshot: InsertListingSnapshot): Promise<ListingSnapshot>;\n  getLatestListingSnapshotsByProduct(productId: string): Promise<ListingSnapshot[]>;\n  getListingHistory(listingId: string, limit?: number): Promise<ListingSnapshot[]>;\n\n  // Listing Images\n  createListingImage(image: InsertListingImage): Promise<ListingImage>;\n  getListingImages(listingId: string): Promise<ListingImage[]>;\n\n  // Unified Products\n  getUnifiedProducts(): Promise<any[]>;\n  getUnifiedProduct(id: string): Promise<any>;\n  createUnifiedProduct(product: {\n    sku: string;\n    name: string;\n    ourPrice?: number;\n    brand?: string;\n    category?: string;\n  }): Promise<any>;\n  deleteUnifiedProduct(id: string): Promise<void>;\n  addCompetitorLink(productId: string, url: string): Promise<any>;\n\n  // Additional methods needed for price monitoring\n  getCompetitorListings(): Promise<CompetitorListing[]>;\n  updateCatalogProduct(id: string, updates: Partial<CatalogProduct>): Promise<CatalogProduct | undefined>;\n  getListingSnapshots(listingId: string): Promise<ListingSnapshot[]>;\n\n\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private competitors: Map<string, Competitor> = new Map();\n  private categories: Map<string, Category> = new Map();\n  private productTypes: Map<string, ProductType> = new Map();\n  private brandAliases: Map<string, BrandAlias> = new Map();\n  private pages: Map<string, Page> = new Map();\n  private products: Map<string, Product> = new Map();\n  private productSpecs: Map<string, ProductSpec> = new Map();\n  private priceSnapshots: Map<string, PriceSnapshot> = new Map();\n  private priceBands: Map<string, PriceBand> = new Map();\n  private tasks: Map<string, Task> = new Map();\n  \n  // New catalog entities\n  private brands: Map<string, Brand> = new Map();\n  private catalogProducts: Map<string, CatalogProduct> = new Map();\n  private competitorListings: Map<string, CompetitorListing> = new Map();\n  private listingSnapshots: Map<string, ListingSnapshot> = new Map();\n  private listingImages: Map<string, ListingImage> = new Map();\n\n  // Unified products\n  private unifiedProducts: Map<string, any> = new Map();\n  private unifiedCompetitorLinks: Map<string, any[]> = new Map();\n\n  constructor() {\n    // No seed data - clean start\n  }\n\n  private createCompetitorSync(competitor: InsertCompetitor): Competitor {\n    const id = randomUUID();\n    const newCompetitor: Competitor = { \n      ...competitor, \n      id,\n      status: competitor.status || \"active\",\n      isUs: competitor.isUs || false\n    };\n    this.competitors.set(id, newCompetitor);\n    return newCompetitor;\n  }\n\n  private createCategorySync(category: InsertCategory): Category {\n    const id = randomUUID();\n    const newCategory: Category = { ...category, id };\n    this.categories.set(id, newCategory);\n    return newCategory;\n  }\n\n  private createProductTypeSync(productType: InsertProductType): ProductType {\n    const id = randomUUID();\n    const newProductType: ProductType = { ...productType, id };\n    this.productTypes.set(id, newProductType);\n    return newProductType;\n  }\n\n  private createProductSync(product: InsertProduct): Product {\n    const id = randomUUID();\n    const now = new Date();\n    const newProduct: Product = { \n      ...product, \n      id, \n      firstSeenAt: now, \n      lastSeenAt: now,\n      model: product.model || null,\n      canonicalSku: product.canonicalSku || null,\n      imageUrl: product.imageUrl || null\n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Competitor methods\n  async getCompetitors(): Promise<Competitor[]> {\n    return Array.from(this.competitors.values());\n  }\n\n  async getCompetitor(id: string): Promise<Competitor | undefined> {\n    return this.competitors.get(id);\n  }\n\n  async createCompetitor(competitor: InsertCompetitor): Promise<Competitor> {\n    const id = randomUUID();\n    const newCompetitor: Competitor = { \n      ...competitor, \n      id,\n      status: competitor.status ?? \"active\",\n      isUs: competitor.isUs ?? false\n    };\n    this.competitors.set(id, newCompetitor);\n    return newCompetitor;\n  }\n\n  async updateCompetitor(id: string, updates: Partial<InsertCompetitor>): Promise<Competitor | undefined> {\n    const competitor = this.competitors.get(id);\n    if (!competitor) return undefined;\n    \n    const updated = { ...competitor, ...updates };\n    this.competitors.set(id, updated);\n    return updated;\n  }\n\n  async deleteCompetitor(id: string): Promise<boolean> {\n    return this.competitors.delete(id);\n  }\n\n  // Category methods\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const newCategory: Category = { ...category, id };\n    this.categories.set(id, newCategory);\n    return newCategory;\n  }\n\n  // Product Type methods\n  async getProductTypes(): Promise<ProductType[]> {\n    return Array.from(this.productTypes.values());\n  }\n\n  async getProductTypesByCategory(categoryId: string): Promise<ProductType[]> {\n    return Array.from(this.productTypes.values()).filter(pt => pt.categoryId === categoryId);\n  }\n\n  async getProductType(id: string): Promise<ProductType | undefined> {\n    return this.productTypes.get(id);\n  }\n\n  async createProductType(productType: InsertProductType): Promise<ProductType> {\n    const id = randomUUID();\n    const newProductType: ProductType = { ...productType, id };\n    this.productTypes.set(id, newProductType);\n    return newProductType;\n  }\n\n  // Brand Alias methods\n  async getBrandAliases(): Promise<BrandAlias[]> {\n    return Array.from(this.brandAliases.values());\n  }\n\n  async createBrandAlias(brandAlias: InsertBrandAlias): Promise<BrandAlias> {\n    const id = randomUUID();\n    const newBrandAlias: BrandAlias = { ...brandAlias, id };\n    this.brandAliases.set(id, newBrandAlias);\n    return newBrandAlias;\n  }\n\n  // Page methods\n  async getPages(): Promise<Page[]> {\n    return Array.from(this.pages.values());\n  }\n\n  async getPagesByCompetitor(competitorId: string): Promise<Page[]> {\n    return Array.from(this.pages.values()).filter(page => page.competitorId === competitorId);\n  }\n\n  async getPage(id: string): Promise<Page | undefined> {\n    return this.pages.get(id);\n  }\n\n  async createPage(page: InsertPage): Promise<Page> {\n    const id = randomUUID();\n    const newPage: Page = { \n      ...page, \n      id, \n      active: page.active !== undefined ? page.active : true,\n      lastHttpStatus: null, \n      lastScrapedAt: null \n    };\n    this.pages.set(id, newPage);\n    return newPage;\n  }\n\n  async updatePage(id: string, updates: Partial<Page>): Promise<Page | undefined> {\n    const page = this.pages.get(id);\n    if (!page) return undefined;\n    \n    const updated = { ...page, ...updates };\n    this.pages.set(id, updated);\n    return updated;\n  }\n\n  async deletePage(id: string): Promise<boolean> {\n    return this.pages.delete(id);\n  }\n\n  // Product methods\n  async getProducts(filters?: { competitorId?: string; productTypeId?: string; brand?: string }): Promise<Product[]> {\n    let products = Array.from(this.products.values());\n    \n    if (filters?.competitorId) {\n      products = products.filter(p => p.competitorId === filters.competitorId);\n    }\n    if (filters?.productTypeId) {\n      products = products.filter(p => p.productTypeId === filters.productTypeId);\n    }\n    if (filters?.brand) {\n      products = products.filter(p => p.brand.toLowerCase().includes(filters.brand!.toLowerCase()));\n    }\n    \n    return products;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const now = new Date();\n    const newProduct: Product = { \n      ...product, \n      id, \n      model: product.model || null,\n      canonicalSku: product.canonicalSku || null,\n      imageUrl: product.imageUrl || null,\n      firstSeenAt: now, \n      lastSeenAt: now \n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    \n    const updated = { ...product, ...updates, lastSeenAt: new Date() };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  // Product Spec methods\n  async getProductSpecs(productId: string): Promise<ProductSpec[]> {\n    return Array.from(this.productSpecs.values()).filter(spec => spec.productId === productId);\n  }\n\n  async createProductSpec(spec: InsertProductSpec): Promise<ProductSpec> {\n    const id = randomUUID();\n    const newSpec: ProductSpec = { ...spec, id };\n    this.productSpecs.set(id, newSpec);\n    return newSpec;\n  }\n\n  // Price Snapshot methods\n  async getPriceSnapshots(productId: string): Promise<PriceSnapshot[]> {\n    return Array.from(this.priceSnapshots.values())\n      .filter(snapshot => snapshot.productId === productId)\n      .sort((a, b) => b.scrapedAt.getTime() - a.scrapedAt.getTime());\n  }\n\n  async getLatestPriceSnapshots(): Promise<PriceSnapshot[]> {\n    return Array.from(this.priceSnapshots.values());\n  }\n\n  async createPriceSnapshot(snapshot: InsertPriceSnapshot): Promise<PriceSnapshot> {\n    const id = randomUUID();\n    const newSnapshot: PriceSnapshot = { \n      ...snapshot, \n      id, \n      currency: snapshot.currency || \"AUD\",\n      promoText: snapshot.promoText || null,\n      scrapedAt: new Date() \n    };\n    this.priceSnapshots.set(id, newSnapshot);\n    return newSnapshot;\n  }\n\n  async getRecentPriceChanges(hours: number): Promise<any[]> {\n    // Return empty array - no real price change data available yet\n    return [];\n  }\n\n  // Price Band methods\n  async getPriceBands(productTypeId?: string, brand?: string): Promise<PriceBand[]> {\n    let bands = Array.from(this.priceBands.values());\n    \n    if (productTypeId) {\n      bands = bands.filter(band => band.productTypeId === productTypeId);\n    }\n    if (brand) {\n      bands = bands.filter(band => band.brand.toLowerCase().includes(brand.toLowerCase()));\n    }\n    \n    return bands;\n  }\n\n  async createPriceBand(band: InsertPriceBand): Promise<PriceBand> {\n    const id = randomUUID();\n    const newBand: PriceBand = { \n      ...band, \n      id,\n      entryPrice: band.entryPrice || null,\n      proPrice: band.proPrice || null,\n      medianPrice: band.medianPrice || null,\n      minPrice: band.minPrice || null,\n      maxPrice: band.maxPrice || null,\n      productCount: band.productCount || 0,\n      updatedAt: new Date() \n    };\n    this.priceBands.set(id, newBand);\n    return newBand;\n  }\n\n  // Task methods\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values());\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const newTask: Task = { \n      ...task, \n      id,\n      status: task.status || \"pending\",\n      error: task.error || null,\n      pageId: task.pageId || null,\n      startedAt: null, \n      finishedAt: null \n    };\n    this.tasks.set(id, newTask);\n    return newTask;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) return undefined;\n    \n    const updated = { ...task, ...updates };\n    this.tasks.set(id, updated);\n    return updated;\n  }\n\n  // Analytics methods\n  async getBrandCoverageMatrix(productTypeId: string): Promise<any> {\n    const competitors = await this.getCompetitors();\n    const products = await this.getProducts({ productTypeId });\n    \n    const brands = Array.from(new Set(products.map(p => p.brand)));\n    const matrix = brands.map(brand => {\n      const row: any = { brand };\n      competitors.forEach(competitor => {\n        const count = products.filter(p => p.brand === brand && p.competitorId === competitor.id).length;\n        row[competitor.name] = count;\n      });\n      return row;\n    });\n    \n    return { brands, competitors, matrix };\n  }\n\n  async getKPIMetrics(): Promise<any> {\n    const products = await this.getProducts();\n    const totalBrands = new Set(products.map(p => p.brand)).size;\n    const sydneyToolsProducts = products.filter(p => {\n      const competitor = Array.from(this.competitors.values()).find(c => c.id === p.competitorId);\n      return competitor?.isUs;\n    });\n    const sydneyBrands = new Set(sydneyToolsProducts.map(p => p.brand)).size;\n    \n    return {\n      brandCoverage: totalBrands > 0 ? `${sydneyBrands}/${totalBrands}` : \"0/0\",\n      priceUndercuts: 0,\n      priceChanges: 0,\n      stockChanges: 0\n    };\n  }\n\n  // Brand methods\n  async createBrand(brand: InsertBrand): Promise<Brand> {\n    const id = randomUUID();\n    const newBrand: Brand = { ...brand, id };\n    this.brands.set(id, newBrand);\n    return newBrand;\n  }\n\n  async getBrands(): Promise<Brand[]> {\n    return Array.from(this.brands.values());\n  }\n\n  async getBrand(id: string): Promise<Brand | undefined> {\n    return this.brands.get(id);\n  }\n\n  // Catalog Product methods\n  async createCatalogProduct(product: InsertCatalogProduct): Promise<CatalogProduct> {\n    const id = randomUUID();\n    const newProduct: CatalogProduct = { \n      ...product, \n      id,\n      notes: product.notes || null,\n      targetPrice: product.targetPrice || null,\n      createdAt: new Date()\n    };\n    this.catalogProducts.set(id, newProduct);\n    return newProduct;\n  }\n\n  async listCatalogProducts(): Promise<CatalogProduct[]> {\n    return Array.from(this.catalogProducts.values());\n  }\n\n  async getCatalogProductById(id: string): Promise<CatalogProduct | undefined> {\n    return this.catalogProducts.get(id);\n  }\n\n  // Competitor Listing methods\n  async createCompetitorListing(listing: InsertCompetitorListing): Promise<CompetitorListing> {\n    const id = randomUUID();\n    const now = new Date();\n    const newListing: CompetitorListing = { \n      ...listing, \n      id,\n      listingSku: listing.listingSku || null,\n      titleOverride: listing.titleOverride || null,\n      brandOverride: listing.brandOverride || null,\n      mainImageUrl: listing.mainImageUrl || null,\n      active: listing.active ?? true,\n      firstSeenAt: now,\n      lastSeenAt: now\n    };\n    this.competitorListings.set(id, newListing);\n    return newListing;\n  }\n\n  async listListingsByProduct(productId: string): Promise<CompetitorListing[]> {\n    return Array.from(this.competitorListings.values()).filter(l => l.productId === productId);\n  }\n\n  async updateListing(id: string, updates: Partial<CompetitorListing>): Promise<CompetitorListing | undefined> {\n    const listing = this.competitorListings.get(id);\n    if (!listing) return undefined;\n    \n    const updated = { ...listing, ...updates, lastSeenAt: new Date() };\n    this.competitorListings.set(id, updated);\n    return updated;\n  }\n\n  // Listing Snapshot methods\n  async createListingSnapshot(snapshot: InsertListingSnapshot): Promise<ListingSnapshot> {\n    const id = randomUUID();\n    const newSnapshot: ListingSnapshot = { \n      ...snapshot, \n      id,\n      price: snapshot.price || null,\n      currency: snapshot.currency || \"AUD\",\n      inStock: snapshot.inStock ?? null,\n      promoText: snapshot.promoText || null,\n      hasGiveaway: snapshot.hasGiveaway ?? false,\n      httpStatus: snapshot.httpStatus || null,\n      scrapedAt: new Date()\n    };\n    this.listingSnapshots.set(id, newSnapshot);\n    return newSnapshot;\n  }\n\n  async getLatestListingSnapshotsByProduct(productId: string): Promise<ListingSnapshot[]> {\n    const listings = await this.listListingsByProduct(productId);\n    const latestSnapshots: ListingSnapshot[] = [];\n    \n    for (const listing of listings) {\n      const snapshots = Array.from(this.listingSnapshots.values())\n        .filter(s => s.listingId === listing.id)\n        .sort((a, b) => b.scrapedAt.getTime() - a.scrapedAt.getTime());\n      \n      if (snapshots.length > 0) {\n        latestSnapshots.push(snapshots[0]);\n      }\n    }\n    \n    return latestSnapshots;\n  }\n\n  async getListingHistory(listingId: string, limit: number = 30): Promise<ListingSnapshot[]> {\n    return Array.from(this.listingSnapshots.values())\n      .filter(s => s.listingId === listingId)\n      .sort((a, b) => b.scrapedAt.getTime() - a.scrapedAt.getTime())\n      .slice(0, limit);\n  }\n\n  // Listing Image methods\n  async createListingImage(image: InsertListingImage): Promise<ListingImage> {\n    const id = randomUUID();\n    const newImage: ListingImage = { \n      ...image, \n      id,\n      position: image.position || 0\n    };\n    this.listingImages.set(id, newImage);\n    return newImage;\n  }\n\n  async getListingImages(listingId: string): Promise<ListingImage[]> {\n    return Array.from(this.listingImages.values())\n      .filter(i => i.listingId === listingId)\n      .sort((a, b) => a.position - b.position);\n  }\n\n  // Unified Products implementation\n  async getUnifiedProducts(): Promise<any[]> {\n    const products = Array.from(this.unifiedProducts.values());\n    return products.map(product => {\n      const links = this.unifiedCompetitorLinks.get(product.id) || [];\n      return { ...product, competitorLinks: links };\n    });\n  }\n\n  async getUnifiedProduct(id: string): Promise<any> {\n    const product = this.unifiedProducts.get(id);\n    if (!product) return undefined;\n    const links = this.unifiedCompetitorLinks.get(id) || [];\n    return { ...product, competitorLinks: links };\n  }\n\n  async createUnifiedProduct(product: {\n    sku: string;\n    name: string;\n    ourPrice?: number;\n    brand?: string;\n    category?: string;\n  }): Promise<any> {\n    const id = randomUUID();\n    const now = new Date().toISOString();\n    const newProduct = {\n      ...product,\n      id,\n      brand: product.brand || 'Unknown',\n      category: product.category || 'Uncategorized',\n      createdAt: now,\n      updatedAt: now\n    };\n    this.unifiedProducts.set(id, newProduct);\n    this.unifiedCompetitorLinks.set(id, []);\n    return newProduct;\n  }\n\n  async deleteUnifiedProduct(id: string): Promise<void> {\n    this.unifiedProducts.delete(id);\n    this.unifiedCompetitorLinks.delete(id);\n  }\n\n  async addCompetitorLink(productId: string, url: string): Promise<any> {\n    const links = this.unifiedCompetitorLinks.get(productId) || [];\n    const id = randomUUID();\n    const newLink = {\n      id,\n      productId,\n      url,\n      competitorName: new URL(url).hostname.replace(\"www.\", \"\").split(\".\")[0],\n      status: \"pending\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    links.push(newLink);\n    this.unifiedCompetitorLinks.set(productId, links);\n    return newLink;\n  }\n\n  // Additional methods needed for price monitoring\n  async getCompetitorListings(): Promise<CompetitorListing[]> {\n    return Array.from(this.competitorListings.values());\n  }\n\n  async updateCatalogProduct(id: string, updates: Partial<CatalogProduct>): Promise<CatalogProduct | undefined> {\n    const product = this.catalogProducts.get(id);\n    if (!product) return undefined;\n    \n    const updated = { ...product, ...updates };\n    this.catalogProducts.set(id, updated);\n    return updated;\n  }\n\n  async getListingSnapshots(listingId: string): Promise<ListingSnapshot[]> {\n    return Array.from(this.listingSnapshots.values())\n      .filter(s => s.listingId === listingId)\n      .sort((a, b) => b.scrapedAt.getTime() - a.scrapedAt.getTime());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":24166},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const pageTypeEnum = pgEnum(\"page_type\", [\"PLP\", \"PDP\"]);\nexport const taskStatusEnum = pgEnum(\"task_status\", [\"pending\", \"running\", \"completed\", \"failed\"]);\nexport const runReasonEnum = pgEnum(\"run_reason\", [\"manual\", \"schedule\"]);\nexport const qualityTierEnum = pgEnum(\"quality_tier\", [\"entry\", \"mid\", \"pro\"]);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const competitors = pgTable(\"competitors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  siteDomain: text(\"site_domain\").notNull(),\n  status: text(\"status\").notNull().default(\"active\"),\n  isUs: boolean(\"is_us\").notNull().default(false),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n});\n\nexport const productTypes = pgTable(\"product_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  categoryId: varchar(\"category_id\").references(() => categories.id).notNull(),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull(),\n});\n\nexport const brandAliases = pgTable(\"brand_aliases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  brandCanonical: text(\"brand_canonical\").notNull(),\n  alias: text(\"alias\").notNull(),\n});\n\nexport const pages = pgTable(\"pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  competitorId: varchar(\"competitor_id\").references(() => competitors.id).notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id).notNull(),\n  productTypeId: varchar(\"product_type_id\").references(() => productTypes.id).notNull(),\n  url: text(\"url\").notNull(),\n  pageType: pageTypeEnum(\"page_type\").notNull(),\n  active: boolean(\"active\").notNull().default(true),\n  lastHttpStatus: integer(\"last_http_status\"),\n  lastScrapedAt: timestamp(\"last_scraped_at\"),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  competitorId: varchar(\"competitor_id\").references(() => competitors.id).notNull(),\n  brand: text(\"brand\").notNull(),\n  model: text(\"model\"),\n  title: text(\"title\").notNull(),\n  canonicalSku: text(\"canonical_sku\"),\n  productTypeId: varchar(\"product_type_id\").references(() => productTypes.id).notNull(),\n  imageUrl: text(\"image_url\"),\n  productUrl: text(\"product_url\").notNull(),\n  firstSeenAt: timestamp(\"first_seen_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  lastSeenAt: timestamp(\"last_seen_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const productSpecs = pgTable(\"product_specs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  key: text(\"key\").notNull(),\n  value: text(\"value\").notNull(),\n});\n\nexport const priceSnapshots = pgTable(\"price_snapshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  priceDecimal: decimal(\"price_decimal\", { precision: 10, scale: 2 }).notNull(),\n  originalPriceDecimal: decimal(\"original_price_decimal\", { precision: 10, scale: 2 }),\n  currency: text(\"currency\").notNull().default(\"AUD\"),\n  inStock: boolean(\"in_stock\").notNull(),\n  promoText: text(\"promo_text\"),\n  onSale: boolean(\"on_sale\").notNull().default(false),\n  scrapedAt: timestamp(\"scraped_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const priceBands = pgTable(\"price_bands\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  competitorId: varchar(\"competitor_id\").references(() => competitors.id).notNull(),\n  productTypeId: varchar(\"product_type_id\").references(() => productTypes.id).notNull(),\n  brand: text(\"brand\").notNull(),\n  entryPrice: decimal(\"entry_price\", { precision: 10, scale: 2 }),\n  proPrice: decimal(\"pro_price\", { precision: 10, scale: 2 }),\n  medianPrice: decimal(\"median_price\", { precision: 10, scale: 2 }),\n  minPrice: decimal(\"min_price\", { precision: 10, scale: 2 }),\n  maxPrice: decimal(\"max_price\", { precision: 10, scale: 2 }),\n  productCount: integer(\"product_count\").notNull().default(0),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageId: varchar(\"page_id\").references(() => pages.id),\n  status: taskStatusEnum(\"status\").notNull().default(\"pending\"),\n  runReason: runReasonEnum(\"run_reason\").notNull(),\n  startedAt: timestamp(\"started_at\"),\n  finishedAt: timestamp(\"finished_at\"),\n  error: text(\"error\"),\n});\n\n// New catalog and listing tables\nexport const brands = pgTable(\"brands\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  slug: text(\"slug\").notNull().unique(),\n});\n\nexport const catalogProducts = pgTable(\"catalog_products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  brandId: varchar(\"brand_id\").references(() => brands.id),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  productTypeId: varchar(\"product_type_id\").references(() => productTypes.id),\n  ourSku: text(\"our_sku\"),\n  modelNumber: text(\"model_number\"),\n  quality: qualityTierEnum(\"quality\"),\n  notes: text(\"notes\"),\n  targetPrice: decimal(\"target_price\", { precision: 12, scale: 2 }),\n  price: decimal(\"price\", { precision: 10, scale: 2 }),\n  imageUrl: text(\"image_url\"),\n  productPageUrl: text(\"product_page_url\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const competitorListings = pgTable(\"competitor_listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => catalogProducts.id).notNull(),\n  competitorId: varchar(\"competitor_id\").references(() => competitors.id).notNull(),\n  url: text(\"url\").notNull(),\n  listingSku: text(\"listing_sku\"),\n  titleOverride: text(\"title_override\"),\n  brandOverride: text(\"brand_override\"),\n  mainImageUrl: text(\"main_image_url\"),\n  active: boolean(\"active\").notNull().default(true),\n  firstSeenAt: timestamp(\"first_seen_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  lastSeenAt: timestamp(\"last_seen_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n}, (table) => ({\n  uniqueProductCompetitor: sql`UNIQUE (product_id, competitor_id)`,\n}));\n\n// Simplified products table for unified product management\nexport const unifiedProducts = pgTable(\"unified_products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sku: text(\"sku\").notNull().unique(),\n  modelNumber: text(\"model_number\"),\n  name: text(\"name\").notNull(),\n  ourPrice: decimal(\"our_price\", { precision: 10, scale: 2 }),\n  productPageUrl: text(\"product_page_url\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\n// Competitor links for unified products\nexport const unifiedCompetitorLinks = pgTable(\"unified_competitor_links\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull().references(() => unifiedProducts.id, { onDelete: \"cascade\" }),\n  url: text(\"url\").notNull(),\n  competitorName: text(\"competitor_name\"),\n  extractedTitle: text(\"extracted_title\"),\n  extractedPrice: decimal(\"extracted_price\", { precision: 10, scale: 2 }),\n  lastScraped: timestamp(\"last_scraped\"),\n  status: text(\"status\").default(\"pending\"), // pending, success, error\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const listingSnapshots = pgTable(\"listing_snapshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  listingId: varchar(\"listing_id\").references(() => competitorListings.id).notNull(),\n  price: decimal(\"price\", { precision: 12, scale: 2 }),\n  currency: text(\"currency\").notNull().default(\"AUD\"),\n  inStock: boolean(\"in_stock\"),\n  promoText: text(\"promo_text\"),\n  hasGiveaway: boolean(\"has_giveaway\").notNull().default(false),\n  scrapedAt: timestamp(\"scraped_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  httpStatus: integer(\"http_status\"),\n}, (table) => ({\n  listingScrapedAtIdx: sql`CREATE INDEX IF NOT EXISTS listing_scraped_at_idx ON listing_snapshots (listing_id, scraped_at DESC)`,\n}));\n\nexport const listingImages = pgTable(\"listing_images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  listingId: varchar(\"listing_id\").references(() => competitorListings.id).notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  position: integer(\"position\").notNull().default(0),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true });\nexport const insertCompetitorSchema = createInsertSchema(competitors).omit({ id: true });\nexport const insertCategorySchema = createInsertSchema(categories).omit({ id: true });\nexport const insertProductTypeSchema = createInsertSchema(productTypes).omit({ id: true });\nexport const insertBrandAliasSchema = createInsertSchema(brandAliases).omit({ id: true });\nexport const insertPageSchema = createInsertSchema(pages).omit({ id: true, lastHttpStatus: true, lastScrapedAt: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true, firstSeenAt: true, lastSeenAt: true });\nexport const insertProductSpecSchema = createInsertSchema(productSpecs).omit({ id: true });\nexport const insertPriceSnapshotSchema = createInsertSchema(priceSnapshots).omit({ id: true, scrapedAt: true });\nexport const insertPriceBandSchema = createInsertSchema(priceBands).omit({ id: true, updatedAt: true });\nexport const insertTaskSchema = createInsertSchema(tasks).omit({ id: true, startedAt: true, finishedAt: true });\n\n// New catalog and listing insert schemas\nexport const insertBrandSchema = createInsertSchema(brands).omit({ id: true });\nexport const insertCatalogProductSchema = createInsertSchema(catalogProducts).omit({ id: true, createdAt: true });\nexport const insertCompetitorListingSchema = createInsertSchema(competitorListings).omit({ id: true, firstSeenAt: true, lastSeenAt: true });\nexport const insertListingSnapshotSchema = createInsertSchema(listingSnapshots).omit({ id: true, scrapedAt: true });\nexport const insertListingImageSchema = createInsertSchema(listingImages).omit({ id: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Competitor = typeof competitors.$inferSelect;\nexport type InsertCompetitor = z.infer<typeof insertCompetitorSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type ProductType = typeof productTypes.$inferSelect;\nexport type InsertProductType = z.infer<typeof insertProductTypeSchema>;\nexport type BrandAlias = typeof brandAliases.$inferSelect;\nexport type InsertBrandAlias = z.infer<typeof insertBrandAliasSchema>;\nexport type Page = typeof pages.$inferSelect;\nexport type InsertPage = z.infer<typeof insertPageSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type ProductSpec = typeof productSpecs.$inferSelect;\nexport type InsertProductSpec = z.infer<typeof insertProductSpecSchema>;\nexport type PriceSnapshot = typeof priceSnapshots.$inferSelect;\nexport type InsertPriceSnapshot = z.infer<typeof insertPriceSnapshotSchema>;\nexport type PriceBand = typeof priceBands.$inferSelect;\nexport type InsertPriceBand = z.infer<typeof insertPriceBandSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\n// New catalog and listing types\nexport type Brand = typeof brands.$inferSelect;\nexport type InsertBrand = z.infer<typeof insertBrandSchema>;\nexport type CatalogProduct = typeof catalogProducts.$inferSelect;\nexport type InsertCatalogProduct = z.infer<typeof insertCatalogProductSchema>;\nexport type CompetitorListing = typeof competitorListings.$inferSelect;\nexport type InsertCompetitorListing = z.infer<typeof insertCompetitorListingSchema>;\nexport type ListingSnapshot = typeof listingSnapshots.$inferSelect;\nexport type InsertListingSnapshot = z.infer<typeof insertListingSnapshotSchema>;\nexport type ListingImage = typeof listingImages.$inferSelect;\nexport type InsertListingImage = z.infer<typeof insertListingImageSchema>;\n\n// Frontend unified product interface\nexport interface UnifiedProduct {\n  id: string;\n  sku: string;\n  modelNumber: string;\n  name: string;\n  ourPrice: number;\n  price: number;\n  originalPrice?: number;\n  image?: string;\n  brand: string;\n  category: string;\n  productPageUrl?: string;\n  competitorLinks?: Array<{\n    id: string;\n    url: string;\n    competitorName: string;\n    extractedTitle?: string;\n    extractedPrice?: string;\n    status: string;\n    lastScraped?: string;\n  }>;\n  competitorListings?: Array<{\n    id: string;\n    url: string;\n    competitorName: string;\n    latestSnapshot?: {\n      price: string;\n      currency: string;\n      inStock: boolean;\n      scrapedAt: Date;\n    };\n  }>;\n  createdAt: string;\n  updatedAt: string;\n}\n","size_bytes":13828},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Header } from \"@/components/layout/header\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Competitors from \"@/pages/competitors\";\nimport Changes from \"@/pages/changes\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\nimport ProductsPage from \"./pages/products-new\";\nimport BrandDetailPage from \"./pages/brand-detail\";\nimport PriceComparison from \"./pages/price-comparison\";\nimport CategoriesPage from \"./pages/categories\";\nimport CompetitorsPage from \"./pages/competitors\";\nimport PagesPage from \"./pages/pages\";\nimport ChangesPage from \"./pages/changes\";\nimport AdminPage from \"./pages/admin\";\nimport NotFoundPage from \"./pages/not-found\";\n\nfunction Router() {\n  const [location] = useLocation();\n\n  // Determine page title and subtitle based on route\n  const getPageInfo = () => {\n    switch(location) {\n      case '/':\n        return { title: 'Competitor Overview', subtitle: 'Real-time monitoring of all competitors and market dynamics' };\n      case '/products':\n        return { title: 'Product Management', subtitle: 'Add products and track competitor prices' };\n      case '/competitors':\n        return { title: 'Competitors Management', subtitle: 'Manage competitor websites and monitoring' };\n      case '/changes':\n        return { title: 'Recent Changes', subtitle: 'Track price and stock updates across all competitors' };\n      case '/admin':\n        return { title: 'Administration', subtitle: 'Manage system configuration and data' };\n      case '/price-comparison':\n        return { title: 'Price Comparison', subtitle: 'Compare prices across competitors' };\n      default:\n        return { title: 'Page Not Found', subtitle: 'The requested page could not be found' };\n    }\n  };\n\n  const { title, subtitle } = getPageInfo();\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      <Header \n        title={title}\n        subtitle={subtitle}\n        showActions={location === '/products'}\n      />\n      <Navbar />\n      <div className=\"flex-1 overflow-auto\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/products\" component={ProductsPage} />\n          <Route path=\"/brands/:brandName\" component={BrandDetailPage} />\n          <Route path=\"/competitors\" component={Competitors} />\n          <Route path=\"/changes\" component={Changes} />\n          <Route path=\"/price-comparison\" component={PriceComparison} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":3124},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Smooth page transitions with fade-up effect */\n.page-fade-up {\n  animation: fadeUp 0.4s ease-out;\n}\n\n@keyframes fadeUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Smooth navbar link transitions */\nnav a {\n  transition: all 0.2s ease-in-out;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 0%);\n  --card: hsl(0 0% 98%);\n  --card-foreground: hsl(0 0% 0%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 0%);\n  --primary: hsl(0 100% 40%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 20%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 95%);\n  --muted-foreground: hsl(0 0% 40%);\n  --accent: hsl(0 100% 95%);\n  --accent-foreground: hsl(0 100% 40%);\n  --destructive: hsl(0 100% 40%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 90%);\n  --input: hsl(0 0% 95%);\n  --ring: hsl(0 100% 40%);\n  --chart-1: hsl(0 100% 40%);\n  --chart-2: hsl(0 0% 60%);\n  --chart-3: hsl(0 0% 40%);\n  --chart-4: hsl(0 0% 20%);\n  --chart-5: hsl(0 100% 50%);\n  --sidebar: hsl(0 0% 98%);\n  --sidebar-foreground: hsl(0 0% 0%);\n  --sidebar-primary: hsl(0 100% 40%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 100% 95%);\n  --sidebar-accent-foreground: hsl(0 100% 40%);\n  --sidebar-border: hsl(0 0% 90%);\n  --sidebar-ring: hsl(0 100% 40%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 1px 2px -1px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 2px 4px -1px hsl(0 0% 0% / 0.05);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 4px 6px -1px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.05), 0px 8px 10px -1px hsl(0 0% 0% / 0.05);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Page Transitions */\n.animate-fade-up {\n  animation: fadeUpStaggered 0.6s ease-out forwards;\n}\n\n.animate-fade-up > * {\n  opacity: 0;\n  animation: fadeUpItem 0.5s ease-out forwards;\n}\n\n.animate-fade-up > *:nth-child(1) { animation-delay: 0ms; }\n.animate-fade-up > *:nth-child(2) { animation-delay: 50ms; }\n.animate-fade-up > *:nth-child(3) { animation-delay: 100ms; }\n.animate-fade-up > *:nth-child(4) { animation-delay: 150ms; }\n.animate-fade-up > *:nth-child(5) { animation-delay: 200ms; }\n.animate-fade-up > *:nth-child(6) { animation-delay: 250ms; }\n.animate-fade-up > *:nth-child(7) { animation-delay: 300ms; }\n.animate-fade-up > *:nth-child(8) { animation-delay: 350ms; }\n.animate-fade-up > *:nth-child(9) { animation-delay: 400ms; }\n.animate-fade-up > *:nth-child(10) { animation-delay: 450ms; }\n\n@keyframes fadeUpStaggered {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeUpItem {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}","size_bytes":5826},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['image/*'], // Only allow images\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n        note=\"Upload images for your card customization\"\n        height={450}\n      />\n    </div>\n  );\n}","size_bytes":3033},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport const api = {\n  // Meta\n  getMeta: () => fetch(\"/api/meta\").then(res => res.json()),\n  \n  // Competitors\n  getCompetitors: () => fetch(\"/api/competitors\").then(res => res.json()),\n  createCompetitor: (data: any) => apiRequest(\"POST\", \"/api/competitors\", data),\n  updateCompetitor: (id: string, data: any) => apiRequest(\"PUT\", `/api/competitors/${id}`, data),\n  deleteCompetitor: (id: string) => apiRequest(\"DELETE\", `/api/competitors/${id}`),\n  \n  // Pages\n  getPages: (competitorId?: string) => {\n    const url = competitorId ? `/api/pages?competitorId=${competitorId}` : \"/api/pages\";\n    return fetch(url).then(res => res.json());\n  },\n  createPage: (data: any) => apiRequest(\"POST\", \"/api/pages\", data),\n  deletePage: (id: string) => apiRequest(\"DELETE\", `/api/pages/${id}`),\n  \n  // Products\n  getProducts: (filters?: { competitorId?: string; productTypeId?: string; brand?: string }) => {\n    const params = new URLSearchParams();\n    if (filters?.competitorId) params.append(\"competitorId\", filters.competitorId);\n    if (filters?.productTypeId) params.append(\"productTypeId\", filters.productTypeId);\n    if (filters?.brand) params.append(\"brand\", filters.brand);\n    \n    const url = `/api/products${params.toString() ? `?${params.toString()}` : \"\"}`;\n    return fetch(url).then(res => res.json());\n  },\n  getProduct: (id: string) => fetch(`/api/products/${id}`).then(res => res.json()),\n  createProduct: (data: any) => apiRequest(\"POST\", \"/api/products\", data),\n  \n  // Analytics\n  getBrandMatrix: (productTypeId: string) => \n    fetch(`/api/brands/matrix?productTypeId=${productTypeId}`).then(res => res.json()),\n  getPriceBands: (productTypeId?: string, brand?: string) => {\n    const params = new URLSearchParams();\n    if (productTypeId) params.append(\"productTypeId\", productTypeId);\n    if (brand) params.append(\"brand\", brand);\n    \n    const url = `/api/price-bands${params.toString() ? `?${params.toString()}` : \"\"}`;\n    return fetch(url).then(res => res.json());\n  },\n  getRecentChanges: (hours: number = 24) => \n    fetch(`/api/changes/recent?hours=${hours}`).then(res => res.json()),\n  getKPIMetrics: () => fetch(\"/api/kpi\").then(res => res.json()),\n  \n  // Scraping\n  runScrape: (data: { pageId?: string; competitorId?: string; productTypeId?: string }) =>\n    apiRequest(\"POST\", \"/api/scrape/run\", data),\n  \n  // Export\n  exportCSV: (productTypeId?: string) => {\n    const url = productTypeId ? `/api/export/csv?productTypeId=${productTypeId}` : \"/api/export/csv\";\n    window.open(url, \"_blank\");\n  }\n};\n","size_bytes":2580},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertBrandAliasSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { Plus, Settings, Tag, Code, Upload, Download } from \"lucide-react\";\nimport { z } from \"zod\";\n\ntype BrandAliasFormData = z.infer<typeof insertBrandAliasSchema>;\n\nexport default function Admin() {\n  const [isAliasDialogOpen, setIsAliasDialogOpen] = useState(false);\n  const [selectedCompetitor, setSelectedCompetitor] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: meta } = useQuery({\n    queryKey: [\"/api/meta\"],\n    queryFn: api.getMeta,\n  });\n\n  const { data: brandAliases = [] } = useQuery({\n    queryKey: [\"/api/brand-aliases\"],\n    queryFn: () => [], // This would be implemented in the API\n  });\n\n  const aliasForm = useForm<BrandAliasFormData>({\n    resolver: zodResolver(insertBrandAliasSchema),\n    defaultValues: {\n      brandCanonical: \"\",\n      alias: \"\",\n    },\n  });\n\n  const createAliasMutation = useMutation({\n    mutationFn: (data: BrandAliasFormData) => {\n      // This would call the API to create brand alias\n      return Promise.resolve(data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/brand-aliases\"] });\n      setIsAliasDialogOpen(false);\n      aliasForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Brand alias created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create brand alias.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitAlias = (data: BrandAliasFormData) => {\n    createAliasMutation.mutate(data);\n  };\n\n  const [extractorJSON, setExtractorJSON] = useState(\"\");\n\n  const handleUpdateExtractor = () => {\n    try {\n      JSON.parse(extractorJSON); // Validate JSON\n      toast({\n        title: \"Success\",\n        description: \"Extractor configuration updated successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid JSON format. Please check your configuration.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleImportCSV = () => {\n    // CSV import functionality would be implemented here\n    toast({\n      title: \"Success\",\n      description: \"CSV import functionality would be implemented here.\",\n    });\n  };\n\n  const competitors = meta?.competitors || [];\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-50 via-white to-gray-100\">\n      <div className=\"p-8 animate-fade-up\">\n        <Tabs defaultValue=\"brand-aliases\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"brand-aliases\">Brand Aliases</TabsTrigger>\n            <TabsTrigger value=\"extractors\">Site Extractors</TabsTrigger>\n            <TabsTrigger value=\"import-export\">Import/Export</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"brand-aliases\" className=\"space-y-6\">\n            <Card className=\"border-slate-200 shadow-sm\">\n              <CardHeader className=\"border-b border-slate-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg font-semibold text-slate-900\">\n                      Brand Aliases\n                    </CardTitle>\n                    <p className=\"text-slate-600 text-sm mt-1\">\n                      Normalize brand names across different competitors (e.g., \"NOCO\" vs \"Noco\")\n                    </p>\n                  </div>\n                  <Dialog open={isAliasDialogOpen} onOpenChange={setIsAliasDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button>\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Add Alias\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Add Brand Alias</DialogTitle>\n                      </DialogHeader>\n                      <Form {...aliasForm}>\n                        <form onSubmit={aliasForm.handleSubmit(onSubmitAlias)} className=\"space-y-4\">\n                          <FormField\n                            control={aliasForm.control}\n                            name=\"brandCanonical\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Canonical Brand Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., NOCO\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={aliasForm.control}\n                            name=\"alias\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Alias/Variant</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Noco, noco\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"button\" variant=\"outline\" onClick={() => setIsAliasDialogOpen(false)}>\n                              Cancel\n                            </Button>\n                            <Button type=\"submit\" disabled={createAliasMutation.isPending}>\n                              Create\n                            </Button>\n                          </div>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center py-12 text-slate-500\">\n                  <div className=\"text-slate-400 mb-4\">\n                    <Tag size={48} className=\"mx-auto\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No brand aliases configured</h3>\n                  <p className=\"text-sm\">Add brand aliases to normalize brand names across competitors</p>\n                  <p className=\"text-xs text-slate-400 mt-1\">This helps standardize brands like \"NOCO\" vs \"Noco\" vs \"noco\"</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"extractors\" className=\"space-y-6\">\n            <Card className=\"border-slate-200 shadow-sm\">\n              <CardHeader className=\"border-b border-slate-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg font-semibold text-slate-900\">\n                      Site Extractors\n                    </CardTitle>\n                    <p className=\"text-slate-600 text-sm mt-1\">\n                      Configure CSS selectors and extraction patterns for each competitor site\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <label className=\"text-sm font-medium text-slate-700\">Competitor:</label>\n                    <select \n                      className=\"border border-slate-300 rounded-lg px-3 py-2 text-sm\"\n                      value={selectedCompetitor}\n                      onChange={(e) => setSelectedCompetitor(e.target.value)}\n                    >\n                      <option value=\"\">Select Competitor</option>\n                      {competitors.map((comp: any) => (\n                        <option key={comp.id} value={comp.id}>{comp.name}</option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                      Extractor JSON Configuration\n                    </label>\n                    <Textarea\n                      value={extractorJSON}\n                      onChange={(e) => setExtractorJSON(e.target.value)}\n                      className=\"font-mono text-sm h-64\"\n                      placeholder=\"Enter JSON configuration...\"\n                    />\n                  </div>\n                  \n                  <div className=\"bg-slate-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-slate-900 mb-2\">Available Selectors:</h4>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"font-medium text-slate-700\">Product Listing (PLP):</p>\n                        <ul className=\"text-slate-600 space-y-1\">\n                          <li>• plp_item - Product card container</li>\n                          <li>• plp_title - Product title</li>\n                          <li>• plp_price - Price element</li>\n                          <li>• plp_image - Product image</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-slate-700\">Product Detail (PDP):</p>\n                        <ul className=\"text-slate-600 space-y-1\">\n                          <li>• pdp_title - Main product title</li>\n                          <li>• pdp_price - Price display</li>\n                          <li>• pdp_specs_table - Specifications table</li>\n                          <li>• pdp_stock - Stock status</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\">\n                      <Code className=\"mr-2 h-4 w-4\" />\n                      Test Selectors\n                    </Button>\n                    <Button onClick={handleUpdateExtractor}>\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Update Configuration\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"import-export\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card className=\"border-slate-200 shadow-sm\">\n                <CardHeader className=\"border-b border-slate-200\">\n                  <CardTitle className=\"text-lg font-semibold text-slate-900\">\n                    Import Data\n                  </CardTitle>\n                  <p className=\"text-slate-600 text-sm mt-1\">\n                    Bulk import competitor pages or product data\n                  </p>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-6 text-center\">\n                      <Upload className=\"mx-auto h-8 w-8 text-slate-400 mb-2\" />\n                      <p className=\"text-sm text-slate-600 mb-2\">\n                        Drop your CSV file here or click to browse\n                      </p>\n                      <Button variant=\"outline\" onClick={handleImportCSV}>\n                        Select File\n                      </Button>\n                    </div>\n                    \n                    <div className=\"bg-slate-50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-slate-900 mb-2\">Supported Formats:</h4>\n                      <ul className=\"text-sm text-slate-600 space-y-1\">\n                        <li>• Competitor Pages CSV</li>\n                        <li>• Product URLs CSV</li>\n                        <li>• Brand Aliases CSV</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"border-slate-200 shadow-sm\">\n                <CardHeader className=\"border-b border-slate-200\">\n                  <CardTitle className=\"text-lg font-semibold text-slate-900\">\n                    Export Data\n                  </CardTitle>\n                  <p className=\"text-slate-600 text-sm mt-1\">\n                    Export system data for backup or analysis\n                  </p>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Export All Products\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Export Competitor Pages\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Export Price History\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Export Brand Aliases\n                    </Button>\n                    \n                    <div className=\"bg-slate-50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-slate-900 mb-2\">Export Options:</h4>\n                      <ul className=\"text-sm text-slate-600 space-y-1\">\n                        <li>• CSV format for spreadsheet analysis</li>\n                        <li>• JSON format for system backup</li>\n                        <li>• Filtered by date range or category</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15378},"client/src/pages/brand-detail.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft,\n  Plus, \n  Package2, \n  DollarSign, \n  Trash2, \n  ExternalLink,\n  Loader2,\n  Edit,\n  Settings,\n  Upload\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface Product {\n  id: string;\n  sku: string;\n  name: string;\n  ourPrice?: number;\n  price?: number;\n  originalPrice?: number;\n  image?: string;\n  brand?: string;\n  category?: string;\n  competitorLinks: any[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function BrandDetailPage() {\n  const [match, params] = useRoute(\"/brands/:brandName\");\n  const [location, setLocation] = useLocation();\n  const brandName = params?.brandName;\n  const { toast } = useToast();\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n\n  const decodedBrandName = decodeURIComponent(brandName || '');\n\n  // Fetch all products and filter by brand\n  const { data: allProducts = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products-unified\"],\n  });\n\n  const brandProducts = allProducts.filter(product => \n    (product.brand || 'Unknown') === decodedBrandName\n  );\n\n  // Delete product mutation\n  const deleteProduct = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/products-unified/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      toast({ title: \"Product deleted\" });\n    },\n  });\n\n  // Update product mutation\n  const updateProduct = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest(\"PUT\", `/api/products-unified/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      setShowEditDialog(false);\n      setEditingProduct(null);\n      toast({ title: \"Product updated successfully\" });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-red-600\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-gray-50 to-slate-100 dark:from-slate-950 dark:via-gray-950 dark:to-slate-900\">\n      <div className=\"p-6 max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/\")}\n              className=\"border-red-600 text-red-600 hover:bg-red-50\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-4xl font-bold bg-gradient-to-r from-red-600 via-red-700 to-red-800 bg-clip-text text-transparent\">\n                {decodedBrandName}\n              </h1>\n              <p className=\"text-slate-600 dark:text-slate-400 mt-2 text-lg\">\n                {brandProducts.length} products in this brand\n              </p>\n            </div>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              className=\"border-red-600 text-red-600 hover:bg-red-50\"\n            >\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Brand Settings\n            </Button>\n            <Button className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 shadow-lg\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Product\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-slate-700 shadow-2xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-300\">Total Products</p>\n                  <p className=\"text-3xl font-bold text-white mt-2\">{brandProducts.length}</p>\n                </div>\n                <div className=\"p-3 bg-gradient-to-br from-red-600 to-red-700 rounded-xl shadow-lg\">\n                  <Package2 className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-slate-700 shadow-2xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-300\">Avg Price</p>\n                  <p className=\"text-3xl font-bold text-white mt-2\">\n                    ${brandProducts.length > 0 \n                      ? (brandProducts.reduce((sum, p) => sum + (p.ourPrice || p.price || 0), 0) / brandProducts.length).toFixed(0)\n                      : '0'\n                    }\n                  </p>\n                </div>\n                <div className=\"p-3 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl shadow-lg\">\n                  <DollarSign className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-slate-700 shadow-2xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-300\">Categories</p>\n                  <p className=\"text-3xl font-bold text-white mt-2\">\n                    {[...new Set(brandProducts.map(p => p.category || 'Uncategorized'))].length}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-gradient-to-br from-emerald-600 to-emerald-700 rounded-xl shadow-lg\">\n                  <Package2 className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-slate-700 shadow-2xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-slate-300\">Tracked Links</p>\n                  <p className=\"text-3xl font-bold text-white mt-2\">\n                    {brandProducts.reduce((sum, p) => sum + p.competitorLinks.length, 0)}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-gradient-to-br from-purple-600 to-purple-700 rounded-xl shadow-lg\">\n                  <ExternalLink className=\"h-6 w-6 text-white\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          <AnimatePresence>\n            {brandProducts.map((product) => (\n              <motion.div\n                key={product.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0.9 }}\n                transition={{ duration: 0.3 }}\n              >\n                <Card className=\"bg-white border border-gray-200 shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden\">\n                  {/* Product Image */}\n                  <div className=\"h-48 w-full bg-white p-4 flex items-center justify-center\">\n                    {product.image ? (\n                      <img \n                        src={product.image} \n                        alt={product.name}\n                        className=\"max-h-full max-w-full object-contain\"\n                      />\n                    ) : (\n                      <div className=\"h-full w-full bg-gray-100 flex items-center justify-center\">\n                        <Package2 className=\"h-16 w-16 text-gray-400\" />\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Product Info */}\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg font-semibold line-clamp-2\">\n                      {product.name}\n                    </CardTitle>\n                    <CardDescription>\n                      SKU: {product.sku} • {product.category || 'Uncategorized'}\n                    </CardDescription>\n                  </CardHeader>\n                  \n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-baseline gap-2\">\n                        <span className=\"text-red-600 font-bold text-2xl\">\n                          ${product.price || product.ourPrice || '0'}\n                        </span>\n                        {product.originalPrice && (\n                          <span className=\"text-xs text-gray-500 line-through\">\n                            ${product.originalPrice}\n                          </span>\n                        )}\n                      </div>\n                      <Badge variant=\"outline\">\n                        {product.competitorLinks.length} competitors\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => {\n                          setEditingProduct(product);\n                          setShowEditDialog(true);\n                        }}\n                      >\n                        <Edit className=\"h-4 w-4 mr-2\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 text-red-600 hover:bg-red-50 border-red-200\"\n                        onClick={() => deleteProduct.mutate(product.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n          \n          {brandProducts.length === 0 && (\n            <div className=\"col-span-full text-center py-16\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-800 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <Package2 className=\"h-12 w-12 text-slate-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-900 dark:text-white mb-2\">No products found</h3>\n              <p className=\"text-slate-500 dark:text-slate-400 mb-6\">\n                This brand doesn't have any products yet\n              </p>\n              <Button\n                onClick={() => setShowAddDialog(true)}\n                className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add First Product\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Edit Product Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Product</DialogTitle>\n              <DialogDescription>\n                Update product details for {editingProduct?.name}\n              </DialogDescription>\n            </DialogHeader>\n            {editingProduct && (\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                updateProduct.mutate({\n                  id: editingProduct.id,\n                  name: formData.get(\"name\") as string,\n                  sku: formData.get(\"sku\") as string,\n                  ourPrice: parseFloat(formData.get(\"ourPrice\") as string) || 0,\n                  brand: formData.get(\"brand\") as string,\n                  category: formData.get(\"category\") as string\n                });\n              }} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-sku\">SKU</Label>\n                    <Input\n                      id=\"edit-sku\"\n                      name=\"sku\"\n                      defaultValue={editingProduct.sku}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-ourPrice\">Our Price</Label>\n                    <Input\n                      id=\"edit-ourPrice\"\n                      name=\"ourPrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      defaultValue={editingProduct.ourPrice}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-name\">Product Name</Label>\n                  <Input\n                    id=\"edit-name\"\n                    name=\"name\"\n                    defaultValue={editingProduct.name}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-brand\">Brand</Label>\n                    <Input\n                      id=\"edit-brand\"\n                      name=\"brand\"\n                      defaultValue={editingProduct.brand || \"\"}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-category\">Category</Label>\n                    <Input\n                      id=\"edit-category\"\n                      name=\"category\"\n                      defaultValue={editingProduct.category || \"\"}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateProduct.isPending}\n                    className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800\"\n                  >\n                    {updateProduct.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Updating...\n                      </>\n                    ) : (\n                      \"Save Changes\"\n                    )}\n                  </Button>\n                </div>\n              </form>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16075},"client/src/pages/catalog-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Building2, FolderOpen, Package2, Trash2 } from \"lucide-react\";\n\ninterface Category {\n  id: string;\n  name: string;\n  slug: string;\n}\n\ninterface ProductType {\n  id: string;\n  categoryId: string;\n  name: string;\n  slug: string;\n}\n\ninterface Competitor {\n  id: string;\n  name: string;\n  domain: string;\n  active: boolean;\n}\n\nexport function CatalogManagerPage() {\n  const { toast } = useToast();\n  const [showCategoryDialog, setShowCategoryDialog] = useState(false);\n  const [showProductTypeDialog, setShowProductTypeDialog] = useState(false);\n  const [showCompetitorDialog, setShowCompetitorDialog] = useState(false);\n\n  // Fetch data\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: productTypes = [], isLoading: productTypesLoading } = useQuery<ProductType[]>({\n    queryKey: [\"/api/product-types\"],\n  });\n\n  const { data: competitors = [], isLoading: competitorsLoading } = useQuery<Competitor[]>({\n    queryKey: [\"/api/competitors\"],\n  });\n\n  // Create category mutation\n  const createCategory = useMutation({\n    mutationFn: (data: { name: string; slug: string }) =>\n      apiRequest(\"POST\", \"/api/categories\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      setShowCategoryDialog(false);\n      toast({ title: \"Category created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create category\", variant: \"destructive\" });\n    },\n  });\n\n  // Create product type mutation\n  const createProductType = useMutation({\n    mutationFn: (data: { categoryId: string; name: string; slug: string }) =>\n      apiRequest(\"POST\", \"/api/product-types\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/product-types\"] });\n      setShowProductTypeDialog(false);\n      toast({ title: \"Product type created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create product type\", variant: \"destructive\" });\n    },\n  });\n\n  // Create competitor mutation\n  const createCompetitor = useMutation({\n    mutationFn: (data: { name: string; domain: string; active: boolean }) =>\n      apiRequest(\"POST\", \"/api/competitors\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/competitors\"] });\n      setShowCompetitorDialog(false);\n      toast({ title: \"Competitor created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create competitor\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete mutations\n  const deleteCategory = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/categories/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Category deleted\" });\n    },\n  });\n\n  const deleteProductType = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/product-types/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/product-types\"] });\n      toast({ title: \"Product type deleted\" });\n    },\n  });\n\n  const deleteCompetitor = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/competitors/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/competitors\"] });\n      toast({ title: \"Competitor deleted\" });\n    },\n  });\n\n  const handleCategorySubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get(\"name\") as string;\n    const slug = name.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\");\n    createCategory.mutate({ name, slug });\n  };\n\n  const handleProductTypeSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get(\"name\") as string;\n    const slug = name.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\");\n    const categoryId = formData.get(\"categoryId\") as string;\n    createProductType.mutate({ categoryId, name, slug });\n  };\n\n  const handleCompetitorSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get(\"name\") as string;\n    const domain = formData.get(\"domain\") as string;\n    createCompetitor.mutate({ name, domain, active: true });\n  };\n\n  if (categoriesLoading || productTypesLoading || competitorsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading catalog manager...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">Catalog Manager</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Manage categories, product types, and competitors\n        </p>\n      </div>\n\n      {/* Categories Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle>Categories</CardTitle>\n              <CardDescription>Organize products into categories</CardDescription>\n            </div>\n            <Dialog open={showCategoryDialog} onOpenChange={setShowCategoryDialog}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-red-600 hover:bg-red-700\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Category\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Category</DialogTitle>\n                  <DialogDescription>\n                    Create a new product category\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleCategorySubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Category Name</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"e.g., Automotive, Tools\"\n                      required\n                    />\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\" disabled={createCategory.isPending}>\n                    {createCategory.isPending ? \"Creating...\" : \"Create Category\"}\n                  </Button>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n            {categories.map(category => (\n              <div key={category.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <FolderOpen className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">{category.name}</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => deleteCategory.mutate(category.id)}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n            {categories.length === 0 && (\n              <p className=\"text-muted-foreground col-span-full text-center py-4\">\n                No categories yet. Add your first category to get started.\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Product Types Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle>Product Types</CardTitle>\n              <CardDescription>Define specific product types within categories</CardDescription>\n            </div>\n            <Dialog open={showProductTypeDialog} onOpenChange={setShowProductTypeDialog}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Product Type\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Product Type</DialogTitle>\n                  <DialogDescription>\n                    Create a new product type within a category\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleProductTypeSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"categoryId\">Category</Label>\n                    <Select name=\"categoryId\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories.map(cat => (\n                          <SelectItem key={cat.id} value={cat.id}>\n                            {cat.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"name\">Product Type Name</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"e.g., Jump Starters, Power Tools\"\n                      required\n                    />\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\" disabled={createProductType.isPending}>\n                    {createProductType.isPending ? \"Creating...\" : \"Create Product Type\"}\n                  </Button>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n            {productTypes.map(productType => {\n              const category = categories.find(c => c.id === productType.categoryId);\n              return (\n                <div key={productType.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-2\">\n                    <Package2 className=\"h-4 w-4 text-muted-foreground\" />\n                    <div>\n                      <span className=\"font-medium\">{productType.name}</span>\n                      <span className=\"text-xs text-muted-foreground block\">\n                        {category?.name}\n                      </span>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => deleteProductType.mutate(productType.id)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              );\n            })}\n            {productTypes.length === 0 && (\n              <p className=\"text-muted-foreground col-span-full text-center py-4\">\n                No product types yet. Add categories first, then create product types.\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Competitors Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle>Competitors</CardTitle>\n              <CardDescription>Track competitor websites and their products</CardDescription>\n            </div>\n            <Dialog open={showCompetitorDialog} onOpenChange={setShowCompetitorDialog}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Competitor\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Competitor</DialogTitle>\n                  <DialogDescription>\n                    Add a competitor to track their products and prices\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleCompetitorSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Competitor Name</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"e.g., Bunnings, Supercheap Auto\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"domain\">Website Domain</Label>\n                    <Input\n                      id=\"domain\"\n                      name=\"domain\"\n                      placeholder=\"e.g., bunnings.com.au\"\n                      required\n                    />\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\" disabled={createCompetitor.isPending}>\n                    {createCompetitor.isPending ? \"Creating...\" : \"Create Competitor\"}\n                  </Button>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n            {competitors.map(competitor => (\n              <div key={competitor.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                  <div>\n                    <span className=\"font-medium\">{competitor.name}</span>\n                    <span className=\"text-xs text-muted-foreground block\">\n                      {competitor.domain}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {competitor.active && (\n                    <span className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded\">\n                      Active\n                    </span>\n                  )}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => deleteCompetitor.mutate(competitor.id)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n            {competitors.length === 0 && (\n              <p className=\"text-muted-foreground col-span-full text-center py-4\">\n                No competitors yet. Add competitors to track their products and prices.\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15775},"client/src/pages/catalog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Package, Tag, Edit, Trash2, ExternalLink } from \"lucide-react\";\nimport type { Brand, CatalogProduct, Category, ProductType } from \"@shared/schema\";\n\nexport function CatalogPage() {\n  const { toast } = useToast();\n  const [showProductDialog, setShowProductDialog] = useState(false);\n  const [showBrandDialog, setShowBrandDialog] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<CatalogProduct | null>(null);\n\n  // Fetch data\n  const { data: products = [], isLoading: productsLoading } = useQuery<CatalogProduct[]>({\n    queryKey: [\"/api/catalog/products\"],\n  });\n\n  const { data: brands = [], isLoading: brandsLoading } = useQuery<Brand[]>({\n    queryKey: [\"/api/brands\"],\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: productTypes = [] } = useQuery<ProductType[]>({\n    queryKey: [\"/api/product-types\"],\n  });\n\n  // Create brand mutation\n  const createBrand = useMutation({\n    mutationFn: (data: { name: string; slug: string }) => \n      apiRequest(\"POST\", \"/api/brands\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/brands\"] });\n      setShowBrandDialog(false);\n      toast({ title: \"Brand created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create brand\", variant: \"destructive\" });\n    },\n  });\n\n  // Create/update product mutation\n  const saveProduct = useMutation({\n    mutationFn: (data: any) => {\n      if (editingProduct) {\n        return apiRequest(\"PATCH\", `/api/catalog/products/${editingProduct.id}`, data);\n      }\n      return apiRequest(\"POST\", \"/api/catalog/products\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/catalog/products\"] });\n      setShowProductDialog(false);\n      setEditingProduct(null);\n      toast({ title: editingProduct ? \"Product updated\" : \"Product created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to save product\", variant: \"destructive\" });\n    },\n  });\n\n  const handleProductSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    const data = {\n      brandId: formData.get(\"brandId\"),\n      categoryId: formData.get(\"categoryId\"),\n      productTypeId: formData.get(\"productTypeId\"),\n      ourSku: formData.get(\"ourSku\"),\n      name: formData.get(\"name\"),\n      quality: formData.get(\"quality\"),\n      targetPrice: formData.get(\"targetPrice\") ? formData.get(\"targetPrice\") as string : null,\n      notes: formData.get(\"notes\") || null,\n    };\n    \n    saveProduct.mutate(data);\n  };\n\n  const handleBrandSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const name = formData.get(\"name\") as string;\n    const slug = name.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\");\n    \n    createBrand.mutate({ name, slug });\n  };\n\n  const getQualityBadge = (quality: string) => {\n    const colors = {\n      entry: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100\",\n      mid: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100\",\n      pro: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100\",\n    };\n    return colors[quality as keyof typeof colors] || colors.entry;\n  };\n\n  if (productsLoading || brandsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading catalog...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Product Catalog</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your product catalog and brands\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={showBrandDialog} onOpenChange={setShowBrandDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Tag className=\"h-4 w-4 mr-2\" />\n                Add Brand\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Brand</DialogTitle>\n                <DialogDescription>\n                  Create a new brand for your catalog\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleBrandSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Brand Name</Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"e.g., NOCO, DeWalt\"\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={createBrand.isPending}>\n                  {createBrand.isPending ? \"Creating...\" : \"Create Brand\"}\n                </Button>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={showProductDialog} onOpenChange={(open) => {\n            setShowProductDialog(open);\n            if (!open) setEditingProduct(null);\n          }}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-red-600 hover:bg-red-700\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Product\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {editingProduct ? \"Update product details\" : \"Add a new product to your catalog\"}\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleProductSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"brandId\">Brand</Label>\n                    <Select name=\"brandId\" defaultValue={editingProduct?.brandId || \"\"} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select brand\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {brands.map(brand => (\n                          <SelectItem key={brand.id} value={brand.id}>\n                            {brand.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"ourSku\">SKU</Label>\n                    <Input\n                      id=\"ourSku\"\n                      name=\"ourSku\"\n                      placeholder=\"e.g., GB40\"\n                      defaultValue={editingProduct?.ourSku || \"\"}\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"name\">Product Name</Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"e.g., NOCO Boost Plus GB40 1000A Jump Starter\"\n                    defaultValue={editingProduct?.name || \"\"}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"categoryId\">Category</Label>\n                    <Select name=\"categoryId\" defaultValue={editingProduct?.categoryId || \"\"} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories.map(cat => (\n                          <SelectItem key={cat.id} value={cat.id}>\n                            {cat.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"productTypeId\">Product Type</Label>\n                    <Select name=\"productTypeId\" defaultValue={editingProduct?.productTypeId || \"\"} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {productTypes.map(type => (\n                          <SelectItem key={type.id} value={type.id}>\n                            {type.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"quality\">Quality Tier</Label>\n                    <Select name=\"quality\" defaultValue={editingProduct?.quality || \"mid\"} required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select tier\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"entry\">Entry Level</SelectItem>\n                        <SelectItem value=\"mid\">Mid Range</SelectItem>\n                        <SelectItem value=\"pro\">Professional</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"targetPrice\">Target Price (Optional)</Label>\n                    <Input\n                      id=\"targetPrice\"\n                      name=\"targetPrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"e.g., 149.99\"\n                      defaultValue={editingProduct?.targetPrice || \"\"}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    name=\"notes\"\n                    placeholder=\"Any additional notes about this product\"\n                    defaultValue={editingProduct?.notes || \"\"}\n                    rows={3}\n                  />\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" disabled={saveProduct.isPending}>\n                  {saveProduct.isPending ? \"Saving...\" : editingProduct ? \"Update Product\" : \"Create Product\"}\n                </Button>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Total Products\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{products.length}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Active Brands\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{brands.length}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Categories\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{categories.length}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Product Types\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{productTypes.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {products.map(product => {\n          const brand = brands.find(b => b.id === product.brandId);\n          const category = categories.find(c => c.id === product.categoryId);\n          const productType = productTypes.find(pt => pt.id === product.productTypeId);\n          \n          return (\n            <Card key={product.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                    <CardDescription className=\"mt-1\">\n                      {brand?.name} • SKU: {product.ourSku}\n                    </CardDescription>\n                  </div>\n                  <Badge className={getQualityBadge(product.quality)}>\n                    {product.quality.toUpperCase()}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"outline\">\n                    <Package className=\"h-3 w-3 mr-1\" />\n                    {category?.name}\n                  </Badge>\n                  <Badge variant=\"outline\">\n                    {productType?.name}\n                  </Badge>\n                </div>\n                \n                {product.targetPrice && (\n                  <div className=\"text-sm\">\n                    <span className=\"text-muted-foreground\">Target:</span>{\" \"}\n                    <span className=\"font-semibold\">${parseFloat(product.targetPrice).toFixed(2)}</span>\n                  </div>\n                )}\n                \n                {product.notes && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                    {product.notes}\n                  </p>\n                )}\n                \n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setEditingProduct(product);\n                      setShowProductDialog(true);\n                    }}\n                  >\n                    <Edit className=\"h-3 w-3 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      // Navigate to listings page for this product\n                      window.location.href = `/listings?productId=${product.id}`;\n                    }}\n                  >\n                    <ExternalLink className=\"h-3 w-3 mr-1\" />\n                    View Listings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {products.length === 0 && (\n        <Card className=\"border-dashed\">\n          <CardContent className=\"flex flex-col items-center justify-center py-8\">\n            <Package className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <p className=\"text-lg font-medium mb-2\">No products yet</p>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Start by adding your first product to the catalog\n            </p>\n            <Button onClick={() => setShowProductDialog(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add First Product\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17070},"client/src/pages/categories.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Folder, Package } from \"lucide-react\";\n\nexport default function Categories() {\n  const { data: meta } = useQuery({\n    queryKey: [\"/api/meta\"],\n    queryFn: api.getMeta,\n  });\n\n  const categories = meta?.categories || [];\n  const productTypes = meta?.productTypes || [];\n\n  const getCategoryProductTypes = (categoryId: string) => {\n    return productTypes.filter((pt: any) => pt.categoryId === categoryId);\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-50 via-white to-gray-100\">\n      <div className=\"p-8 animate-fade-up\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {categories.map((category: any) => {\n            const categoryProductTypes = getCategoryProductTypes(category.id);\n            \n            return (\n              <Card key={category.id} className=\"border-gray-200 shadow-sm hover:shadow-lg transition-all hover:border-[#CB0000]/30\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-[#CB0000] to-red-800 rounded-lg flex items-center justify-center shadow-md\">\n                      <Folder className=\"text-white\" size={20} />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-black\">\n                        {category.name}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-500\">\n                        {categoryProductTypes.length} product type{categoryProductTypes.length !== 1 ? 's' : ''}\n                      </p>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {categoryProductTypes.map((productType: any) => (\n                      <div key={productType.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Package className=\"text-gray-600\" size={16} />\n                          <span className=\"font-medium text-black\">{productType.name}</span>\n                        </div>\n                        <Badge className=\"bg-[#CB0000] text-white hover:bg-red-700\">\n                          Active\n                        </Badge>\n                      </div>\n                    ))}\n                    \n                    {categoryProductTypes.length === 0 && (\n                      <div className=\"text-center py-4 text-gray-500\">\n                        <p className=\"text-sm\">No product types defined</p>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                    <Button variant=\"outline\" className=\"w-full border-gray-300 hover:bg-[#CB0000] hover:text-white hover:border-[#CB0000]\" size=\"sm\">\n                      View Dashboard\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n        \n        {categories.length === 0 && (\n          <Card className=\"border-slate-200 shadow-sm\">\n            <CardContent className=\"py-12 text-center\">\n              <Folder className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Categories</h3>\n              <p className=\"text-slate-500 mb-4\">\n                Get started by creating your first product category.\n              </p>\n              <Button>Create Category</Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4105},"client/src/pages/changes.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { TrendingDown, TrendingUp, Package, Tag, Clock } from \"lucide-react\";\n\nexport default function Changes() {\n  const [hoursFilter, setHoursFilter] = useState(\"24\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n\n  const { data: recentChanges = [], isLoading } = useQuery({\n    queryKey: [\"/api/changes/recent\", hoursFilter],\n    queryFn: () => api.getRecentChanges(parseInt(hoursFilter)),\n  });\n\n  const { data: meta } = useQuery({\n    queryKey: [\"/api/meta\"],\n    queryFn: api.getMeta,\n  });\n\n  // Filter changes by type\n  const filteredChanges = typeFilter && typeFilter !== \"all\"\n    ? recentChanges.filter((change: any) => change.changeType === typeFilter)\n    : recentChanges;\n\n  const getChangeIcon = (changeType: string) => {\n    switch (changeType) {\n      case 'price_drop':\n        return <TrendingDown className=\"text-red-600\" size={16} />;\n      case 'price_increase':\n        return <TrendingUp className=\"text-blue-600\" size={16} />;\n      case 'stock_change':\n        return <Package className=\"text-green-600\" size={16} />;\n      case 'promo_added':\n        return <Tag className=\"text-yellow-600\" size={16} />;\n      default:\n        return <Clock className=\"text-slate-600\" size={16} />;\n    }\n  };\n\n  const getChangeColor = (changeType: string) => {\n    switch (changeType) {\n      case 'price_drop':\n        return 'bg-red-500';\n      case 'price_increase':\n        return 'bg-blue-500';\n      case 'stock_change':\n        return 'bg-green-500';\n      case 'promo_added':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-slate-500';\n    }\n  };\n\n  const getChangeBadge = (change: any) => {\n    switch (change.changeType) {\n      case 'price_drop':\n        return {\n          text: 'Price Drop',\n          variant: 'destructive' as const,\n          detail: `$${change.oldValue} → $${change.newValue}`\n        };\n      case 'price_increase':\n        return {\n          text: 'Price Increase',\n          variant: 'default' as const,\n          detail: `$${change.oldValue} → $${change.newValue}`\n        };\n      case 'stock_change':\n        return {\n          text: change.newValue === 'in_stock' ? 'Back in Stock' : 'Out of Stock',\n          variant: 'default' as const,\n          detail: ''\n        };\n      case 'promo_added':\n        return {\n          text: 'Promo Added',\n          variant: 'secondary' as const,\n          detail: change.newValue || ''\n        };\n      default:\n        return {\n          text: 'Change',\n          variant: 'secondary' as const,\n          detail: ''\n        };\n    }\n  };\n\n  const getChangeTypeStats = () => {\n    const stats = recentChanges.reduce((acc: any, change: any) => {\n      acc[change.changeType] = (acc[change.changeType] || 0) + 1;\n      return acc;\n    }, {});\n\n    return [\n      { type: 'price_drop', label: 'Price Drops', count: stats.price_drop || 0, color: 'text-red-600' },\n      { type: 'price_increase', label: 'Price Increases', count: stats.price_increase || 0, color: 'text-blue-600' },\n      { type: 'stock_change', label: 'Stock Changes', count: stats.stock_change || 0, color: 'text-green-600' },\n      { type: 'promo_added', label: 'Promos Added', count: stats.promo_added || 0, color: 'text-yellow-600' },\n    ];\n  };\n\n  const stats = getChangeTypeStats();\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-50 via-white to-gray-100\">\n      <div className=\"p-8 animate-fade-up\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {stats.map((stat) => (\n            <Card key={stat.type} className=\"border-slate-200 shadow-sm\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">{stat.label}</p>\n                    <p className={`text-2xl font-bold mt-1 ${stat.color}`}>{stat.count}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-slate-100 rounded-lg flex items-center justify-center\">\n                    {getChangeIcon(stat.type)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Filters */}\n        <Card className=\"border-slate-200 shadow-sm mb-6\">\n          <CardHeader className=\"border-b border-slate-200\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold text-slate-900\">\n                Change History\n              </CardTitle>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Time Period:</label>\n                  <Select value={hoursFilter} onValueChange={setHoursFilter}>\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">Last Hour</SelectItem>\n                      <SelectItem value=\"6\">Last 6 Hours</SelectItem>\n                      <SelectItem value=\"24\">Last 24 Hours</SelectItem>\n                      <SelectItem value=\"72\">Last 3 Days</SelectItem>\n                      <SelectItem value=\"168\">Last Week</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <label className=\"text-sm font-medium text-slate-700\">Change Type:</label>\n                  <Select value={typeFilter} onValueChange={setTypeFilter}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"All Types\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      <SelectItem value=\"price_drop\">Price Drops</SelectItem>\n                      <SelectItem value=\"price_increase\">Price Increases</SelectItem>\n                      <SelectItem value=\"stock_change\">Stock Changes</SelectItem>\n                      <SelectItem value=\"promo_added\">Promos Added</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"flex items-start space-x-3 p-3 bg-slate-100 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-slate-300 rounded-full mt-2\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-slate-300 rounded w-3/4\"></div>\n                        <div className=\"h-3 bg-slate-300 rounded w-1/2\"></div>\n                        <div className=\"flex space-x-2\">\n                          <div className=\"h-6 bg-slate-300 rounded w-20\"></div>\n                          <div className=\"h-6 bg-slate-300 rounded w-24\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : filteredChanges.length > 0 ? (\n              <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {filteredChanges.map((change: any) => {\n                  const badge = getChangeBadge(change);\n                  return (\n                    <div key={change.id} className=\"flex items-start space-x-3 p-3 bg-slate-50 rounded-lg hover:bg-slate-100 transition-colors\">\n                      <div className={`flex-shrink-0 w-2 h-2 ${getChangeColor(change.changeType)} rounded-full mt-2`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-slate-900\">{change.productTitle}</p>\n                        <p className=\"text-sm text-slate-600\">{change.competitorName}</p>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant={badge.variant} className=\"text-xs\">\n                            {badge.text}\n                          </Badge>\n                          {badge.detail && (\n                            <span className=\"text-xs font-mono text-slate-500\">{badge.detail}</span>\n                          )}\n                        </div>\n                        <p className=\"text-xs text-slate-400 mt-1\">\n                          {formatDistanceToNow(new Date(change.timestamp), { addSuffix: true })}\n                        </p>\n                      </div>\n                      <div className=\"flex-shrink-0\">\n                        {getChangeIcon(change.changeType)}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Clock className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-slate-900 mb-2\">\n                  {typeFilter ? `No ${typeFilter.replace('_', ' ')} changes` : 'No Recent Changes'}\n                </h3>\n                <p className=\"text-slate-500 mb-4\">\n                  {typeFilter \n                    ? `No ${typeFilter.replace('_', ' ')} found in the selected time period.`\n                    : `No changes detected in the last ${hoursFilter} hours.`\n                  }\n                </p>\n                {typeFilter && (\n                  <Button variant=\"outline\" onClick={() => setTypeFilter(\"\")}>\n                    Show All Changes\n                  </Button>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10463},"client/src/pages/competitors.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCompetitorSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { Plus, Globe, Trash2, Edit } from \"lucide-react\";\nimport { z } from \"zod\";\n\ntype CompetitorFormData = z.infer<typeof insertCompetitorSchema>;\n\nexport default function Competitors() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCompetitor, setEditingCompetitor] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: competitors = [] } = useQuery({\n    queryKey: [\"/api/competitors\"],\n    queryFn: api.getCompetitors,\n  });\n\n  const form = useForm<CompetitorFormData>({\n    resolver: zodResolver(insertCompetitorSchema),\n    defaultValues: {\n      name: \"\",\n      siteDomain: \"\",\n      status: \"active\",\n      isUs: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: api.createCompetitor,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/competitors\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Competitor created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create competitor.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<CompetitorFormData> }) =>\n      api.updateCompetitor(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/competitors\"] });\n      setIsDialogOpen(false);\n      setEditingCompetitor(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Competitor updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update competitor.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: api.deleteCompetitor,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/competitors\"] });\n      toast({\n        title: \"Success\",\n        description: \"Competitor deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete competitor.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CompetitorFormData) => {\n    if (editingCompetitor) {\n      updateMutation.mutate({ id: editingCompetitor.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (competitor: any) => {\n    setEditingCompetitor(competitor);\n    form.reset(competitor);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this competitor?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setEditingCompetitor(null);\n    form.reset();\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-50 via-white to-gray-100\">\n      <div className=\"p-8 animate-fade-up\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-lg font-semibold text-slate-900\">Active Competitors</h2>\n          <Dialog open={isDialogOpen} onOpenChange={handleDialogClose}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Competitor\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingCompetitor ? \"Edit Competitor\" : \"Add New Competitor\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Bunnings Warehouse\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"siteDomain\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Site Domain</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., bunnings.com.au\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isUs\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel>This is our company</FormLabel>\n                          <div className=\"text-sm text-slate-500\">\n                            Mark if this represents your own company\n                          </div>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={handleDialogClose}>\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createMutation.isPending || updateMutation.isPending}\n                    >\n                      {editingCompetitor ? \"Update\" : \"Create\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {competitors.map((competitor: any) => (\n            <Card key={competitor.id} className=\"border-slate-200 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <Globe className=\"text-primary\" size={18} />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold text-slate-900\">\n                        {competitor.name}\n                      </CardTitle>\n                      <p className=\"text-sm text-slate-500\">{competitor.siteDomain}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(competitor)}\n                    >\n                      <Edit size={14} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(competitor.id)}\n                      disabled={deleteMutation.isPending}\n                    >\n                      <Trash2 size={14} />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-slate-700\">Status</span>\n                    <Badge variant={competitor.status === \"active\" ? \"default\" : \"secondary\"}>\n                      {competitor.status}\n                    </Badge>\n                  </div>\n                  \n                  {competitor.isUs && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium text-slate-700\">Type</span>\n                      <Badge variant=\"outline\" className=\"text-blue-600 border-blue-200\">\n                        Our Company\n                      </Badge>\n                    </div>\n                  )}\n                  \n                  <div className=\"pt-3 border-t border-slate-200\">\n                    <div className=\"grid grid-cols-2 gap-4 text-center\">\n                      <div>\n                        <p className=\"text-lg font-semibold text-slate-900\">0</p>\n                        <p className=\"text-xs text-slate-500\">Pages</p>\n                      </div>\n                      <div>\n                        <p className=\"text-lg font-semibold text-slate-900\">0</p>\n                        <p className=\"text-xs text-slate-500\">Products</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        \n        {competitors.length === 0 && (\n          <Card className=\"border-slate-200 shadow-sm\">\n            <CardContent className=\"py-12 text-center\">\n              <Globe className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Competitors</h3>\n              <p className=\"text-slate-500 mb-4\">\n                Add competitor websites to start tracking their products and pricing.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11006},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, TrendingDown, Package, Store, Activity, AlertCircle, ArrowUpRight, ArrowDownRight, DollarSign } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { data: meta } = useQuery({\n    queryKey: [\"/api/meta\"],\n    queryFn: api.getMeta,\n  });\n\n  const { data: kpiMetrics } = useQuery({\n    queryKey: [\"/api/kpi\"],\n    queryFn: api.getKPIMetrics,\n  });\n\n  const { data: recentChanges = [] } = useQuery({\n    queryKey: [\"/api/changes/recent\"],\n    queryFn: () => api.getRecentChanges(48), // Last 48 hours for more context\n  });\n\n  const { data: allProducts = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: () => api.getProducts({}),\n  });\n\n  // Group changes by competitor\n  const changesByCompetitor = recentChanges.reduce((acc: any, change: any) => {\n    if (!acc[change.competitorName]) {\n      acc[change.competitorName] = [];\n    }\n    acc[change.competitorName].push(change);\n    return acc;\n  }, {});\n\n  // Calculate competitor stats\n  const competitorStats = meta?.competitors?.map((comp: any) => {\n    const competitorProducts = allProducts.filter((p: any) => p.competitorId === comp.id);\n    const competitorChanges = changesByCompetitor[comp.name] || [];\n    const priceDrops = competitorChanges.filter((c: any) => c.changeType === 'price_drop').length;\n    const priceIncreases = competitorChanges.filter((c: any) => c.changeType === 'price_increase').length;\n    \n    return {\n      ...comp,\n      productCount: competitorProducts.length,\n      priceDrops,\n      priceIncreases,\n      totalChanges: competitorChanges.length,\n      lastActivity: competitorChanges[0]?.timestamp || null\n    };\n  }) || [];\n\n  // Get recent important price changes\n  const importantPriceChanges = recentChanges\n    .filter((c: any) => c.changeType === 'price_drop' || c.changeType === 'price_increase')\n    .slice(0, 10);\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-50 via-white to-gray-100\">\n      <div className=\"p-8 space-y-8 animate-fade-up\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-[#CB0000] to-red-800 text-white overflow-hidden\">\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16\" />\n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-red-100 text-sm font-medium uppercase tracking-wider\">Total Competitors</p>\n                  <p className=\"text-4xl font-bold mt-2\">{meta?.competitors?.length || 0}</p>\n                  <div className=\"h-0.5 w-8 bg-white mt-2\" />\n                </div>\n                <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n                  <Store className=\"text-white\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-gray-800 to-black text-white overflow-hidden\">\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16\" />\n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-300 text-sm font-medium uppercase tracking-wider\">Products Tracked</p>\n                  <p className=\"text-4xl font-bold mt-2\">{allProducts.length}</p>\n                  <div className=\"h-0.5 w-8 bg-gray-400 mt-2\" />\n                </div>\n                <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n                  <Package className=\"text-white\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-gray-700 to-gray-900 text-white overflow-hidden\">\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16\" />\n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-300 text-sm font-medium uppercase tracking-wider\">Price Changes</p>\n                  <p className=\"text-4xl font-bold mt-2\">{recentChanges.length}</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">Last 48 hours</p>\n                </div>\n                <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n                  <Activity className=\"text-white\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-white to-gray-100 text-black overflow-hidden\">\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-[#CB0000]/10 rounded-full -mr-16 -mt-16\" />\n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-700 text-sm font-medium uppercase tracking-wider\">Average Price</p>\n                  <p className=\"text-4xl font-bold mt-2\">\n                    ${allProducts.length > 0 \n                      ? (allProducts.reduce((sum: number, p: any) => sum + (p.currentPrice || 0), 0) / allProducts.length).toFixed(0)\n                      : '0'}\n                  </p>\n                  <div className=\"h-0.5 w-8 bg-[#CB0000] mt-2\" />\n                </div>\n                <div className=\"p-3 bg-[#CB0000]/20 rounded-lg backdrop-blur-sm\">\n                  <DollarSign className=\"text-[#CB0000]\" size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Competitor Overview Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* All Competitors */}\n          <Card className=\"border-0 shadow-xl bg-white\">\n            <CardHeader className=\"border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white\">\n              <CardTitle className=\"text-lg font-semibold text-black\">\n                Your Competitors\n              </CardTitle>\n              <p className=\"text-gray-600 text-sm mt-1\">\n                Activity summary for each competitor\n              </p>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {competitorStats.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {competitorStats.map((comp: any) => (\n                    <div key={comp.id} className=\"p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-black\">{comp.name}</h4>\n                        <Link href={`/competitors/${comp.id}`}>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-[#CB0000]/10 hover:text-[#CB0000]\">\n                            View Details\n                          </Button>\n                        </Link>\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-gray-500\">Products</p>\n                          <p className=\"font-semibold text-black\">{comp.productCount}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-500\">Price Drops</p>\n                          <p className=\"font-semibold text-green-600\">{comp.priceDrops}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-500\">Price Increases</p>\n                          <p className=\"font-semibold text-[#CB0000]\">{comp.priceIncreases}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <Store size={48} className=\"mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-medium text-black mb-2\">No competitors added</h3>\n                  <p className=\"text-sm\">Add competitors to start tracking their prices</p>\n                  <Link href=\"/competitors\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"mt-4 border-[#CB0000] text-[#CB0000] hover:bg-[#CB0000] hover:text-white\">\n                      Add Competitors\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Important Price Changes */}\n          <Card className=\"border-0 shadow-xl bg-white\">\n            <CardHeader className=\"border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-lg font-semibold text-black\">\n                    Important Price Changes\n                  </CardTitle>\n                  <p className=\"text-gray-600 text-sm mt-1\">\n                    Last 48 hours activity\n                  </p>\n                </div>\n                <Link href=\"/changes\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-[#CB0000]/10 hover:text-[#CB0000]\">\n                    View All\n                  </Button>\n                </Link>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {importantPriceChanges.length > 0 ? (\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                  {importantPriceChanges.map((change: any) => (\n                    <div key={change.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-black text-sm\">{change.productTitle}</p>\n                        <p className=\"text-xs text-gray-500\">{change.competitorName}</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {change.changeType === 'price_drop' ? (\n                          <ArrowDownRight className=\"text-red-500\" size={16} />\n                        ) : (\n                          <ArrowUpRight className=\"text-green-500\" size={16} />\n                        )}\n                        <Badge \n                          variant={change.changeType === 'price_drop' ? 'destructive' : 'default'}\n                        >\n                          ${change.newValue}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Activity size={32} className=\"mx-auto mb-3 text-gray-400\" />\n                  <p>No price changes detected</p>\n                  <p className=\"text-sm mt-1\">Price changes will appear here when detected</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11702},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pages.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPageSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { Plus, Globe, Trash2, Play, Clock } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ntype PageFormData = z.infer<typeof insertPageSchema>;\n\nexport default function Pages() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: meta } = useQuery({\n    queryKey: [\"/api/meta\"],\n    queryFn: api.getMeta,\n  });\n\n  const { data: pages = [] } = useQuery({\n    queryKey: [\"/api/pages\"],\n    queryFn: () => api.getPages(),\n  });\n\n  const form = useForm<PageFormData>({\n    resolver: zodResolver(insertPageSchema),\n    defaultValues: {\n      url: \"\",\n      pageType: \"PLP\",\n      active: true,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: api.createPage,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Page added successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add page.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: api.deletePage,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      toast({\n        title: \"Success\",\n        description: \"Page deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete page.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scrapeMutation = useMutation({\n    mutationFn: (pageId: string) => api.runScrape({ pageId }),\n    onSuccess: () => {\n      toast({\n        title: \"Scraping Started\",\n        description: \"Scraping task has been queued successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start scraping task.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PageFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this page?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleScrape = (pageId: string) => {\n    scrapeMutation.mutate(pageId);\n  };\n\n  const getCompetitorName = (competitorId: string) => {\n    return meta?.competitors?.find((c: any) => c.id === competitorId)?.name || \"Unknown\";\n  };\n\n  const getCategoryName = (categoryId: string) => {\n    return meta?.categories?.find((c: any) => c.id === categoryId)?.name || \"Unknown\";\n  };\n\n  const getProductTypeName = (productTypeId: string) => {\n    return meta?.productTypes?.find((pt: any) => pt.id === productTypeId)?.name || \"Unknown\";\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-50 via-white to-gray-100\">\n      <div className=\"p-8 animate-fade-up\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-lg font-semibold text-slate-900\">Scraping Pages</h2>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Page\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add Scraping Page</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"url\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Page URL</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://example.com/products\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"competitorId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Competitor</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select competitor\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {meta?.competitors?.map((competitor: any) => (\n                              <SelectItem key={competitor.id} value={competitor.id}>\n                                {competitor.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {meta?.categories?.map((category: any) => (\n                              <SelectItem key={category.id} value={category.id}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"productTypeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select product type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {meta?.productTypes?.map((productType: any) => (\n                              <SelectItem key={productType.id} value={productType.id}>\n                                {productType.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"pageType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Page Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select page type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"PLP\">Product Listing Page (PLP)</SelectItem>\n                            <SelectItem value=\"PDP\">Product Detail Page (PDP)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createMutation.isPending}>\n                      Add Page\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {pages.length > 0 ? (\n          <Card className=\"border-slate-200 shadow-sm\">\n            <CardHeader>\n              <CardTitle>Scraping Pages</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-slate-50 border-b border-slate-200\">\n                    <tr>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">URL</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Competitor</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Category</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Type</th>\n                      <th className=\"text-center py-3 px-4 font-medium text-slate-700\">Status</th>\n                      <th className=\"text-center py-3 px-4 font-medium text-slate-700\">Last Run</th>\n                      <th className=\"text-center py-3 px-4 font-medium text-slate-700\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-slate-100\">\n                    {pages.map((page: any) => (\n                      <tr key={page.id} className=\"hover:bg-slate-50\">\n                        <td className=\"py-4 px-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Globe size={16} className=\"text-slate-400\" />\n                            <a \n                              href={page.url} \n                              target=\"_blank\" \n                              rel=\"noopener noreferrer\"\n                              className=\"text-primary-600 hover:text-primary-700 truncate max-w-xs\"\n                            >\n                              {page.url}\n                            </a>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4 text-slate-600\">\n                          {getCompetitorName(page.competitorId)}\n                        </td>\n                        <td className=\"py-4 px-4 text-slate-600\">\n                          {getCategoryName(page.categoryId)} › {getProductTypeName(page.productTypeId)}\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <Badge variant=\"outline\">\n                            {page.pageType}\n                          </Badge>\n                        </td>\n                        <td className=\"py-4 px-4 text-center\">\n                          <Badge variant={page.active ? \"default\" : \"secondary\"}>\n                            {page.active ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </td>\n                        <td className=\"py-4 px-4 text-center text-sm text-slate-500\">\n                          {page.lastScrapedAt ? (\n                            formatDistanceToNow(new Date(page.lastScrapedAt), { addSuffix: true })\n                          ) : (\n                            \"Never\"\n                          )}\n                        </td>\n                        <td className=\"py-4 px-4 text-center\">\n                          <div className=\"flex items-center justify-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleScrape(page.id)}\n                              disabled={scrapeMutation.isPending}\n                            >\n                              <Play size={14} />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(page.id)}\n                              disabled={deleteMutation.isPending}\n                            >\n                              <Trash2 size={14} />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"border-slate-200 shadow-sm\">\n            <CardContent className=\"py-12 text-center\">\n              <Globe className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Pages Added</h3>\n              <p className=\"text-slate-500 mb-4\">\n                Add competitor product pages to start scraping and collecting data.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14775},"client/src/pages/price-comparison.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingDown, TrendingUp, Minus, DollarSign, ShoppingCart } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function PriceComparison() {\n  const { data: unifiedData, isLoading, error } = useQuery({\n    queryKey: [\"/api/products-unified\"],\n  });\n\n  // Process unified products to find price comparisons\n  // Products with competitorListings have price comparisons available\n  const productsWithComparisons = unifiedData?.filter((product: any) => {\n    // Must have a price and competitor listings to compare\n    return product.price && product.competitorListings?.length > 0;\n  }) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-4\">\n        <h1 className=\"text-2xl font-bold\">Price Comparison</h1>\n        <div className=\"grid gap-4\">\n          {[1, 2, 3].map(i => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-3/4\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-1/2\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"text-red-500\">Error loading price comparisons</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">Price Comparison</h1>\n        <Badge variant=\"secondary\" className=\"text-lg px-4 py-2\">\n          {productsWithComparisons.length} Matched Products\n        </Badge>\n      </div>\n\n      {productsWithComparisons.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <DollarSign className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n            <p className=\"text-gray-500\">No products with price comparisons available</p>\n            <p className=\"text-sm text-gray-400 mt-2\">Import products from competitors to see price comparisons</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {productsWithComparisons.map((product: any) => {\n            const ourPrice = parseFloat(product.price) || 0;\n            const competitorListing = product.competitorListings?.[0];\n            const competitorPrice = competitorListing?.latestSnapshot?.price ? parseFloat(competitorListing.latestSnapshot.price) : 0;\n            const competitorName = competitorListing?.competitorName || \"Competitor\";\n            const priceDiff = competitorPrice - ourPrice;\n            const percentDiff = ourPrice > 0 ? ((priceDiff / ourPrice) * 100) : 0;\n            \n            return (\n              <Card key={product.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        {product.modelNumber && <Badge variant=\"outline\">{product.modelNumber}</Badge>}\n                        {product.brandName && <Badge variant=\"secondary\">{product.brandName}</Badge>}\n                      </div>\n                    </div>\n                    {priceDiff > 0 && (\n                      <Badge className=\"bg-green-500 text-white\">\n                        Save ${priceDiff.toFixed(2)}\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    {/* Sydney Tools Price */}\n                    <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Sydney Tools</span>\n                        {priceDiff > 0 && <Badge className=\"bg-green-100 text-green-800\">Best Price</Badge>}\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-2xl font-bold\">${ourPrice.toFixed(2)}</span>\n                        {priceDiff > 0 && (\n                          <TrendingDown className=\"w-5 h-5 text-green-500\" />\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Competitor Prices */}\n                    {product.competitorListings?.map((listing: any, idx: number) => {\n                      const listingPrice = listing.latestSnapshot?.price ? parseFloat(listing.latestSnapshot.price) : 0;\n                      return (\n                        <div key={idx} className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                              {listing.competitorName || \"Competitor\"}\n                            </span>\n                            {listingPrice > ourPrice && (\n                              <Badge className=\"bg-red-100 text-red-800\">Higher</Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-2xl font-bold\">${listingPrice.toFixed(2)}</span>\n                            {priceDiff !== 0 && idx === 0 && (\n                              <span className={`text-sm ${priceDiff > 0 ? 'text-red-500' : 'text-green-500'}`}>\n                                {priceDiff > 0 ? '+' : ''}{percentDiff.toFixed(1)}%\n                              </span>\n                            )}\n                          </div>\n                          <a \n                            href={listing.url} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            className=\"text-xs text-blue-500 hover:underline mt-1 inline-block\"\n                          >\n                            View Product →\n                          </a>\n                        </div>\n                      );\n                    })}\n                  </div>\n                  \n                  {/* Price Difference Summary */}\n                  {priceDiff !== 0 && (\n                    <div className={`mt-4 p-3 rounded-lg ${priceDiff > 0 ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'} border`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          {priceDiff > 0 ? (\n                            <>\n                              <TrendingDown className=\"w-4 h-4 text-green-600\" />\n                              <span className=\"text-sm font-medium text-green-800\">\n                                Sydney Tools is ${Math.abs(priceDiff).toFixed(2)} cheaper\n                              </span>\n                            </>\n                          ) : (\n                            <>\n                              <TrendingUp className=\"w-4 h-4 text-red-600\" />\n                              <span className=\"text-sm font-medium text-red-800\">\n                                Competitor is ${Math.abs(priceDiff).toFixed(2)} cheaper\n                              </span>\n                            </>\n                          )}\n                        </div>\n                        <Badge variant={priceDiff > 0 ? \"default\" : \"destructive\"}>\n                          {Math.abs(percentDiff).toFixed(1)}% {priceDiff > 0 ? 'savings' : 'more'}\n                        </Badge>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8373},"client/src/pages/products-new.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { ImportReviewDialog } from \"@/components/ImportReviewDialog\";\nimport { \n  Plus, \n  Package2, \n  Link, \n  DollarSign, \n  TrendingUp, \n  Trash2, \n  ExternalLink,\n  Loader2,\n  CheckCircle2,\n  AlertCircle,\n  Clock,\n  Search,\n  Filter,\n  Grid,\n  Image as ImageIcon,\n  ShoppingCart,\n  Edit,\n  Save,\n  Tag,\n  Building2,\n  Store,\n  Minus,\n  Palette,\n  Upload,\n  Settings,\n  Check,\n  CheckSquare,\n  Square,\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface CompetitorLink {\n  id: string;\n  url: string;\n  competitorName: string;\n  extractedTitle?: string;\n  extractedPrice?: number;\n  extractedImage?: string;\n  lastScraped?: string;\n  status: \"pending\" | \"success\" | \"error\";\n  isCategory?: boolean;\n  productCount?: number;\n}\n\ninterface Product {\n  id: string;\n  sku: string;\n  modelNumber?: string;\n  name: string;\n  ourPrice?: number;\n  price?: number;\n  originalPrice?: number;\n  image?: string;\n  brand?: string;\n  category?: string;\n  productPageUrl?: string;\n  competitorLinks: CompetitorLink[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface CardCustomization {\n  id: string;\n  type: 'brand' | 'category' | 'competitor';\n  title: string;\n  showTitle: boolean;\n  backgroundColor: string;\n  textColor: string;\n  logoUrl?: string;\n  customStyles?: string;\n}\n\n// Extract model number from product title\nconst extractModelNumber = (productName: string): string => {\n  if (!productName) return 'N/A';\n  \n  // Common patterns for model numbers in product titles\n  // Pattern 1: Alphanumeric combinations with optional hyphens (e.g., SPi Pro25, SC1446, DSR115)\n  const patterns = [\n    /\\b([A-Z]{2,}[\\s-]?[A-Z0-9]+[0-9]+[A-Z0-9]*)\\b/i,  // e.g., SPi Pro25, DSR115\n    /\\b([A-Z]+[0-9]+[A-Z0-9]*)\\b/,                        // e.g., SC1446, IP65\n    /\\b([0-9]+[A-Z]+[0-9]*)\\b/,                           // e.g., 12V50A\n    /\\b([A-Z][0-9]{2,}[A-Z0-9]*)\\b/,                      // e.g., T12345\n  ];\n  \n  for (const pattern of patterns) {\n    const match = productName.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n  \n  // If no pattern matches, try to find any alphanumeric code after the brand name\n  const words = productName.split(/\\s+/);\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    // Check if word contains both letters and numbers\n    if (/[A-Z]/i.test(word) && /[0-9]/.test(word)) {\n      return word;\n    }\n  }\n  \n  return 'N/A';\n};\n\nexport default function ProductsPage() {\n  const { toast } = useToast();\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showBulkImportDialog, setShowBulkImportDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryUrl, setCategoryUrl] = useState(\"\");\n  const [isExtractingCategory, setIsExtractingCategory] = useState(false);\n  const [extractedProducts, setExtractedProducts] = useState<any[]>([]);\n  const [expandedProducts, setExpandedProducts] = useState<Set<string>>(new Set());\n  const [selectedProducts, setSelectedProducts] = useState<Set<string>>(new Set());\n  const [showBulkDeleteDialog, setShowBulkDeleteDialog] = useState(false);\n  const [cardCustomizations, setCardCustomizations] = useState<Map<string, CardCustomization>>(() => {\n    // Load saved customizations from localStorage\n    try {\n      const saved = localStorage.getItem('cardCustomizations');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return new Map(Object.entries(parsed));\n      }\n    } catch (error) {\n      console.error('Failed to load card customizations:', error);\n    }\n    return new Map();\n  });\n  const [editingCard, setEditingCard] = useState<CardCustomization | null>(null);\n  const [showCardCustomDialog, setShowCardCustomDialog] = useState(false);\n  const [showCompetitorImportDialog, setShowCompetitorImportDialog] = useState(false);\n  const [competitorUrl, setCompetitorUrl] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(16); // 4 cards per row × 4 rows = 16 per page\n  const [showImportReviewDialog, setShowImportReviewDialog] = useState(false);\n  const [importPreviewData, setImportPreviewData] = useState<any>(null);\n  const [newProduct, setNewProduct] = useState({\n    sku: \"\",\n    name: \"\",\n    ourPrice: \"\",\n    competitorUrls: [\"\"]\n  });\n\n  // Fetch products\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products-unified\"],\n  });\n\n  // Create product mutation\n  const createProduct = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/products-unified\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      setShowAddDialog(false);\n      resetForm();\n      toast({ \n        title: \"Product added successfully\", \n        description: \"We'll start monitoring competitor prices right away.\"\n      });\n    },\n    onError: () => {\n      toast({ title: \"Failed to add product\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete product mutation\n  const deleteProduct = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/products-unified/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      toast({ title: \"Product deleted\" });\n    },\n  });\n\n  // Bulk delete mutation\n  const bulkDeleteProducts = useMutation({\n    mutationFn: async (ids: string[]) => {\n      await Promise.all(ids.map(id => apiRequest(\"DELETE\", `/api/products-unified/${id}`)));\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      const deletedCount = selectedProducts.size;\n      setSelectedProducts(new Set());\n      setShowBulkDeleteDialog(false);\n      toast({ \n        title: \"Products deleted successfully\", \n        description: `Deleted ${deletedCount} products`\n      });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete products\", variant: \"destructive\" });\n    },\n  });\n\n  const updateProduct = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest(\"PUT\", `/api/products-unified/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      setShowEditDialog(false);\n      setEditingProduct(null);\n      toast({ title: \"Product updated successfully\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Update failed\",\n        description: \"Failed to update product\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Extract data from URL mutation\n  const extractFromUrl = useMutation({\n    mutationFn: (url: string) => apiRequest(\"POST\", \"/api/extract-url\", { url }),\n    onSuccess: (data: any, url: string) => {\n      const index = newProduct.competitorUrls.findIndex(u => u === url);\n      if (index > -1 && data) {\n        // Auto-fill product name if empty\n        if (!newProduct.name && data.title) {\n          setNewProduct(prev => ({ ...prev, name: data.title }));\n        }\n        toast({ \n          title: \"URL data extracted\",\n          description: `Found: ${data.title} - $${data.price}`\n        });\n      }\n    },\n  });\n\n  // Extract products from category page\n  const extractFromCategory = useMutation({\n    mutationFn: async (url: string) => {\n      const response = await apiRequest(\"POST\", \"/api/extract-category\", { url });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      console.log(\"Category extraction response:\", data);\n      setIsExtractingCategory(false);\n      \n      if (data.products && data.products.length > 0) {\n        setExtractedProducts(data.products);\n        const noteMsg = data.note ? ` (${data.note})` : '';\n        toast({ \n          title: \"Category products extracted\",\n          description: `Found ${data.products.length} products from ${data.categoryName || 'category'}${noteMsg}`\n        });\n      } else {\n        toast({ \n          title: \"No products found\",\n          description: data.details || \"Could not extract products from this category page\",\n          variant: \"destructive\"\n        });\n      }\n    },\n    onError: (error: any) => {\n      console.error(\"Category extraction error:\", error);\n      setIsExtractingCategory(false);\n      toast({ \n        title: \"Extraction failed\",\n        description: error.message || \"Failed to extract products from category page\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Import competitor products - Preview\n  const importCompetitor = useMutation({\n    mutationFn: async (data: { url: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/preview-competitor\", data);\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      console.log(\"Competitor preview response:\", data);\n      if (data.success && data.products && data.products.length > 0) {\n        setImportPreviewData({\n          competitorName: data.competitorName,\n          sourceUrl: data.sourceUrl || competitorUrl,  // Use sourceUrl from response first\n          totalProducts: data.products.length,\n          newProducts: data.newProducts || data.products.filter((p: any) => p.isNew).length,\n          matchedProducts: data.matchedProducts || data.products.filter((p: any) => !p.isNew).length,\n          products: data.products,\n          scraperUsed: data.scraperUsed\n        });\n        setShowImportReviewDialog(true);\n        setShowCompetitorImportDialog(false);\n        setCompetitorUrl(\"\");\n      } else {\n        toast({ \n          title: \"No products found\",\n          description: data.message || \"Could not extract products from this competitor site\",\n          variant: \"destructive\"\n        });\n      }\n    },\n    onError: (error: any) => {\n      console.error(\"Competitor import error:\", error);\n      toast({ \n        title: \"Import failed\",\n        description: error.message || \"Failed to import competitor products\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Bulk import products with source URL\n  const bulkImportProducts = useMutation({\n    mutationFn: (data: { products: any[], sourceUrl: string }) => \n      apiRequest(\"POST\", \"/api/products-unified/bulk\", data),\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      setShowBulkImportDialog(false);\n      setExtractedProducts([]);\n      setCategoryUrl(\"\");\n      \n      const description = data.matched > 0 \n        ? `Added ${data.count} new products and matched ${data.matched} existing products from ${data.competitor}`\n        : `Added ${data.count} products from ${data.competitor} in ${data.category}`;\n      \n      toast({ \n        title: \"Import successful\",\n        description: description\n      });\n    },\n    onError: () => {\n      toast({ \n        title: \"Import failed\",\n        description: \"Failed to import products\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setNewProduct({\n      sku: \"\",\n      name: \"\",\n      ourPrice: \"\",\n      competitorUrls: [\"\"]\n    });\n  };\n\n  // Helper function to extract model number from product name\n  const extractModelNumber = (name: string): string => {\n    if (!name) return 'N/A';\n    \n    // Remove common brand names first to avoid capturing them\n    const brandPatterns = [\n      /^(Schumacher|Matson|NOCO|DeWalt|Makita|Milwaukee|Bosch|Ryobi|SP Tools|Sydney Tools)\\s+/i,\n      /^(Black & Decker|Black and Decker|Stanley|Craftsman|Ridgid)\\s+/i,\n    ];\n    \n    let cleanedName = name;\n    for (const pattern of brandPatterns) {\n      cleanedName = cleanedName.replace(pattern, '');\n    }\n    \n    // Model number patterns (more specific patterns first)\n    const patterns = [\n      // SP Tools models like SP61086, SP12345\n      /\\b(SP\\d{4,6}[A-Z]*)\\b/i,\n      // NOCO GENIUS models like GENIUSPRO50, GENIUS2DAU, GENIUS2X4, GENIUS2X2\n      /\\b(GENIUS(?:PRO)?\\d+[A-Z0-9]*)\\b/i,\n      // Matson models like AE150E, MA4INONE, MA21DCS, MA61224, IR61224, AE300E\n      /\\b([A-Z]{2}\\d{3,5}[A-Z]*)\\b/i,\n      // SPi Pro25, SPi-IQ, SPiDS-200 etc (Schumacher)\n      /\\b(SP[iI][\\s-]?(?:Pro|DS|IQ)?[\\s-]?\\d+[A-Z]*)\\b/i,\n      // SPX457, SPX458, SPX460, GX8, MT3750 etc\n      /\\b([A-Z]{2,}X?\\d{2,}[A-Z]*)\\b/,\n      // G1100AU, G3500AU etc\n      /\\b(G\\d+[A-Z]+)\\b/,\n      // SS4L, JMC45 etc\n      /\\b([A-Z]{2,}\\d+[A-Z]*)\\b/,\n      // DS-70, DS-35 etc\n      /\\b([A-Z]{2}[\\s-]\\d+)\\b/,\n      // Generic alphanumeric model (ABC123, 123ABC)\n      /\\b([A-Z]+\\d+[A-Z0-9]*|[0-9]+[A-Z]+[A-Z0-9]*)\\b/i,\n    ];\n    \n    for (const pattern of patterns) {\n      const match = cleanedName.match(pattern);\n      if (match) {\n        // Clean up the match (remove extra spaces, normalize separators)\n        return match[1].replace(/\\s+/g, '-').toUpperCase();\n      }\n    }\n    \n    return 'N/A';\n  };\n\n\n\n  const handleAddUrl = () => {\n    setNewProduct(prev => ({\n      ...prev,\n      competitorUrls: [...prev.competitorUrls, \"\"]\n    }));\n  };\n\n  const handleRemoveUrl = (index: number) => {\n    setNewProduct(prev => ({\n      ...prev,\n      competitorUrls: prev.competitorUrls.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleUrlChange = (index: number, value: string) => {\n    const newUrls = [...newProduct.competitorUrls];\n    newUrls[index] = value;\n    setNewProduct(prev => ({ ...prev, competitorUrls: newUrls }));\n\n    // Auto-extract when URL is complete\n    if (value.startsWith(\"http\")) {\n      extractFromUrl.mutate(value);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const validUrls = newProduct.competitorUrls.filter(url => url.trim());\n    createProduct.mutate({\n      ...newProduct,\n      ourPrice: newProduct.ourPrice ? parseFloat(newProduct.ourPrice) : undefined,\n      competitorUrls: validUrls\n    });\n  };\n\n  const filteredProducts = products.filter(product =>\n    (product.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (product.sku || '').toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedProducts = filteredProducts.slice(startIndex, endIndex);\n\n  // Bulk selection helper functions\n  const toggleProductSelection = (productId: string) => {\n    const newSelected = new Set(selectedProducts);\n    if (newSelected.has(productId)) {\n      newSelected.delete(productId);\n    } else {\n      newSelected.add(productId);\n    }\n    setSelectedProducts(newSelected);\n  };\n\n  const selectAllProducts = () => {\n    setSelectedProducts(new Set(paginatedProducts.map(p => p.id)));\n  };\n\n  const clearSelection = () => {\n    setSelectedProducts(new Set());\n  };\n\n  const isAllSelected = paginatedProducts.length > 0 && paginatedProducts.every(p => selectedProducts.has(p.id));\n\n  const getLowestCompetitorPrice = (links: CompetitorLink[]) => {\n    const prices = links.filter(l => l.extractedPrice).map(l => l.extractedPrice!);\n    return prices.length > 0 ? Math.min(...prices) : null;\n  };\n\n  // Calculate stats for the overview cards\n  const totalCompetitorLinks = products?.reduce((acc, product) => acc + product.competitorLinks.length, 0) || 0;\n  const priceAdvantageCount = products?.filter(product => {\n    const lowestPrice = getLowestCompetitorPrice(product.competitorLinks);\n    return product.ourPrice && lowestPrice && product.ourPrice < lowestPrice;\n  }).length || 0;\n  const needAdjustmentCount = products?.filter(product => {\n    const lowestPrice = getLowestCompetitorPrice(product.competitorLinks);\n    return product.ourPrice && lowestPrice && product.ourPrice > lowestPrice * 1.05;\n  }).length || 0;\n\n  const getPriceStatus = (ourPrice?: number, lowestCompetitorPrice?: number | null) => {\n    if (!ourPrice || !lowestCompetitorPrice) return null;\n    const diff = ((ourPrice - lowestCompetitorPrice) / lowestCompetitorPrice) * 100;\n    if (diff < -5) return { label: \"Below Market\", color: \"text-green-600\", icon: TrendingUp };\n    if (diff > 5) return { label: \"Above Market\", color: \"text-red-600\", icon: AlertCircle };\n    return { label: \"Competitive\", color: \"text-blue-600\", icon: CheckCircle2 };\n  };\n\n  // Card customization functions\n  const getCardCustomization = (id: string, type: 'brand' | 'category' | 'competitor'): CardCustomization => {\n    return cardCustomizations.get(id) || {\n      id,\n      type,\n      title: id,\n      showTitle: true,\n      backgroundColor: 'bg-white dark:bg-slate-900',\n      textColor: 'text-slate-900 dark:text-white',\n      logoUrl: '',\n      customStyles: ''\n    };\n  };\n\n  const updateCardCustomization = (customization: CardCustomization) => {\n    const newCustomizations = new Map(cardCustomizations);\n    newCustomizations.set(customization.id, customization);\n    setCardCustomizations(newCustomizations);\n    \n    // Save to localStorage\n    try {\n      const toSave = Object.fromEntries(newCustomizations);\n      localStorage.setItem('cardCustomizations', JSON.stringify(toSave));\n    } catch (error) {\n      console.error('Failed to save card customizations:', error);\n    }\n  };\n\n  const openCardEditor = (id: string, type: 'brand' | 'category' | 'competitor') => {\n    const existing = getCardCustomization(id, type);\n    setEditingCard(existing);\n    setShowCardCustomDialog(true);\n  };\n\n  const saveCardCustomization = () => {\n    if (editingCard) {\n      updateCardCustomization(editingCard);\n      setShowCardCustomDialog(false);\n      setEditingCard(null);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-red-600\" />\n      </div>\n    );\n  }\n\n  // Extract unique brands and categories from products\n  const uniqueBrands = Array.from(new Set(products.map(p => p.brand || 'Unknown'))).sort();\n  const uniqueCategories = Array.from(new Set(products.map(p => p.category || 'Uncategorized'))).sort();\n  const competitors = Array.from(new Set(products.flatMap(p => \n    p.competitorLinks.map(l => l.competitorName || 'Unknown')\n  ))).sort();\n\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-gray-50 to-slate-100 dark:from-slate-950 dark:via-gray-950 dark:to-slate-900\">\n      <div className=\"p-6 w-full max-w-none space-y-8\">\n        {/* Modern Header with Actions */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-red-600 via-red-700 to-red-800 bg-clip-text text-transparent\">\n              Product Management\n            </h1>\n            <p className=\"text-slate-600 dark:text-slate-400 mt-2 text-lg\">\n              Track your products and monitor competitor prices with AI-powered insights\n            </p>\n          </div>\n          <div className=\"flex gap-3\">\n          <Dialog open={showBulkImportDialog} onOpenChange={setShowBulkImportDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"border-red-600 text-red-600 hover:bg-red-50\">\n                <Grid className=\"h-4 w-4 mr-2\" />\n                Import Category\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {extractedProducts.length > 0 ? \"Review Extracted Products\" : \"Import Products from Category Page\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {extractedProducts.length > 0 \n                    ? \"Review the extracted products below and import them to your catalog.\"\n                    : \"Enter a category page URL to extract all products with their titles, prices, and images. Supports pagination automatically.\"\n                  }\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                {extractedProducts.length === 0 && (\n                  <div>\n                    <Label htmlFor=\"categoryUrl\">Category Page URL</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        id=\"categoryUrl\"\n                        value={categoryUrl}\n                        onChange={(e) => setCategoryUrl(e.target.value)}\n                        placeholder=\"https://sydneytools.com.au/category/automotive/car-battery-chargers\"\n                        className=\"flex-1\"\n                      />\n                      <Button\n                        onClick={() => {\n                          setIsExtractingCategory(true);\n                          extractFromCategory.mutate(categoryUrl);\n                        }}\n                        disabled={!categoryUrl || isExtractingCategory}\n                      >\n                        {isExtractingCategory ? (\n                          <>\n                            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                            Extracting...\n                          </>\n                        ) : (\n                          <>\n                            <Search className=\"h-4 w-4 mr-2\" />\n                            Extract\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {extractedProducts.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <p className=\"text-sm font-medium\">\n                        Found {extractedProducts.length} products\n                      </p>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => bulkImportProducts.mutate({ \n                          products: extractedProducts, \n                          sourceUrl: categoryUrl \n                        })}\n                        disabled={bulkImportProducts.isPending}\n                      >\n                        {bulkImportProducts.isPending ? (\n                          <>\n                            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                            Importing...\n                          </>\n                        ) : (\n                          <>\n                            <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                            Import All\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                    \n                    <div className=\"max-h-96 overflow-y-auto border rounded-lg p-4 space-y-3\">\n                      {extractedProducts.map((product, index) => (\n                        <div key={index} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                          {product.image && (\n                            <img \n                              src={product.image} \n                              alt={product.title}\n                              className=\"w-16 h-16 object-cover rounded\"\n                            />\n                          )}\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-sm\">{product.title}</p>\n                            <div className=\"flex gap-4 text-sm text-muted-foreground\">\n                              <span>SKU: {product.sku || `AUTO-${index + 1}`}</span>\n                              {product.brand && <span>Brand: {product.brand}</span>}\n                              {product.model && <span className=\"font-semibold text-blue-600\">Model: {product.model}</span>}\n                            </div>\n                            {product.competitorName && (\n                              <p className=\"text-xs text-gray-500\">From: {product.competitorName}</p>\n                            )}\n                          </div>\n                          <div className=\"text-right\">\n                            {product.isOnSale ? (\n                              <div className=\"space-y-1\">\n                                <div className=\"flex items-center gap-2 justify-end\">\n                                  <span className=\"bg-red-600 text-white text-xs px-2 py-1 rounded font-bold\">SALE</span>\n                                  <p className=\"font-bold text-lg text-green-600\">${product.price}</p>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground line-through\">was ${product.originalPrice}</p>\n                              </div>\n                            ) : (\n                              <p className=\"font-bold text-lg\">${product.price}</p>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </DialogContent>\n          </Dialog>\n          \n          <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-700 shadow-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-red-600 to-red-700 bg-clip-text text-transparent\">\n                  Add New Product\n                </DialogTitle>\n                <DialogDescription className=\"text-slate-600 dark:text-slate-400\">\n                  Create a new product and add competitor links for price monitoring\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"sku\">SKU</Label>\n                  <Input\n                    id=\"sku\"\n                    value={newProduct.sku}\n                    onChange={(e) => setNewProduct(prev => ({ ...prev, sku: e.target.value }))}\n                    placeholder=\"e.g., JMP-001\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"ourPrice\">Our Price (optional)</Label>\n                  <Input\n                    id=\"ourPrice\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newProduct.ourPrice}\n                    onChange={(e) => setNewProduct(prev => ({ ...prev, ourPrice: e.target.value }))}\n                    placeholder=\"e.g., 199.99\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"name\">Product Name</Label>\n                <Input\n                  id=\"name\"\n                  value={newProduct.name}\n                  onChange={(e) => setNewProduct(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Will auto-fill from first URL\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <Label>Competitor URLs</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleAddUrl}\n                  >\n                    <Plus className=\"h-3 w-3 mr-1\" />\n                    Add URL\n                  </Button>\n                </div>\n                {newProduct.competitorUrls.map((url, index) => (\n                  <div key={index} className=\"flex gap-2\">\n                    <Input\n                      value={url}\n                      onChange={(e) => handleUrlChange(index, e.target.value)}\n                      placeholder=\"https://competitor.com/product-page\"\n                      className=\"flex-1\"\n                    />\n                    {newProduct.competitorUrls.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleRemoveUrl(index)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                ))}\n                <p className=\"text-xs text-muted-foreground\">\n                  Paste competitor product URLs. We'll extract the title and price automatically.\n                </p>\n              </div>\n\n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createProduct.isPending}>\n                  {createProduct.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Adding...\n                    </>\n                  ) : (\n                    \"Add Product\"\n                  )}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n        \n        {/* Edit Product Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-700 shadow-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-red-600 to-red-700 bg-clip-text text-transparent\">\n                Edit Product\n              </DialogTitle>\n              <DialogDescription className=\"text-slate-600 dark:text-slate-400\">\n                Update product details, brand, category, and pricing information\n              </DialogDescription>\n            </DialogHeader>\n            {editingProduct && (\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                updateProduct.mutate({\n                  id: editingProduct.id,\n                  name: formData.get(\"name\") as string,\n                  sku: formData.get(\"sku\") as string,\n                  ourPrice: parseFloat(formData.get(\"ourPrice\") as string) || 0,\n                  brand: formData.get(\"brand\") as string,\n                  category: formData.get(\"category\") as string\n                });\n              }} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-sku\">SKU</Label>\n                    <Input\n                      id=\"edit-sku\"\n                      name=\"sku\"\n                      defaultValue={editingProduct.sku}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-ourPrice\">Our Price</Label>\n                    <Input\n                      id=\"edit-ourPrice\"\n                      name=\"ourPrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      defaultValue={editingProduct.ourPrice}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-name\">Product Name</Label>\n                  <Input\n                    id=\"edit-name\"\n                    name=\"name\"\n                    defaultValue={editingProduct.name}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-brand\">Brand</Label>\n                    <Input\n                      id=\"edit-brand\"\n                      name=\"brand\"\n                      defaultValue={(editingProduct as any).brand || \"\"}\n                      placeholder=\"e.g., NOCO, CTEK\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-category\">Category</Label>\n                    <Input\n                      id=\"edit-category\"\n                      name=\"category\"\n                      defaultValue={(editingProduct as any).category || \"\"}\n                      placeholder=\"e.g., Battery Chargers\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label className=\"text-slate-700 dark:text-slate-300\">Competitor Links</Label>\n                  <div className=\"max-h-48 overflow-y-auto space-y-2 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700\">\n                    {editingProduct.competitorLinks.map((link) => (\n                      <div key={link.id} className=\"flex items-center justify-between p-3 bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700 hover:shadow-md transition-shadow\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\" className=\"text-xs border-red-200 text-red-700 dark:border-red-800 dark:text-red-300\">\n                              {link.competitorName}\n                            </Badge>\n                            {link.extractedPrice && (\n                              <span className=\"font-semibold text-sm text-emerald-600 dark:text-emerald-400\">${link.extractedPrice}</span>\n                            )}\n                          </div>\n                          <p className=\"text-xs text-slate-500 dark:text-slate-400 truncate mt-1\">\n                            {link.url}\n                          </p>\n                        </div>\n                        <a\n                          href={link.url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"ml-2 text-slate-400 hover:text-red-600 transition-colors\"\n                        >\n                          <ExternalLink className=\"h-4 w-4\" />\n                        </a>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateProduct.isPending}\n                    className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800\"\n                  >\n                    {updateProduct.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Updating...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"h-4 w-4 mr-2\" />\n                        Save Changes\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            )}\n          </DialogContent>\n        </Dialog>\n          </div>\n        </div>\n\n        {/* Enhanced Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n          {/* Total Products Card */}\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-[#CB0000] to-red-700 text-white overflow-hidden\">\n            {/* Glass effect overlay */}\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16\" />\n            \n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-200 text-sm font-medium uppercase tracking-wider\">Total Products</p>\n                  <div className=\"flex items-baseline gap-2 mt-2\">\n                    <p className=\"text-4xl font-bold\">{products?.length || 0}</p>\n                    <span className=\"text-sm text-gray-300\">items</span>\n                  </div>\n                  <div className=\"h-0.5 w-8 bg-white/50 mt-2\" />\n                </div>\n                <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n                  <Package2 className=\"text-white\" size={24} />\n                </div>\n              </div>\n              \n              {/* Progress Bar */}\n              <div className=\"mt-4 pt-4 border-t border-white/20\">\n                <div className=\"flex items-center justify-between text-xs text-gray-200 mb-2\">\n                  <span>Catalog Growth</span>\n                  <span>+{products?.length || 0} this month</span>\n                </div>\n                <div className=\"w-full bg-black/20 rounded-full h-2\">\n                  <div className=\"bg-gradient-to-r from-white/60 to-white/80 h-2 rounded-full transition-all duration-1000 ease-out\" style={{ width: '75%' }}></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Competitor Links Card */}\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-gray-800 to-black text-white overflow-hidden\">\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16\" />\n            \n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-300 text-sm font-medium uppercase tracking-wider\">Competitor Links</p>\n                  <div className=\"flex items-baseline gap-2 mt-2\">\n                    <p className=\"text-4xl font-bold\">{totalCompetitorLinks}</p>\n                    <span className=\"text-sm text-gray-400\">tracked</span>\n                  </div>\n                  <div className=\"h-0.5 w-8 bg-gray-400 mt-2\" />\n                </div>\n                <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n                  <Link className=\"text-white\" size={24} />\n                </div>\n              </div>\n              \n              <div className=\"mt-4 pt-4 border-t border-white/20\">\n                <div className=\"flex items-center justify-between text-xs text-gray-300 mb-2\">\n                  <span>Coverage Rate</span>\n                  <span>85% monitored</span>\n                </div>\n                <div className=\"w-full bg-black/30 rounded-full h-2\">\n                  <div className=\"bg-gradient-to-r from-gray-400 to-gray-300 h-2 rounded-full transition-all duration-1000 ease-out\" style={{ width: '85%' }}></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Price Advantage Card */}\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-gray-700 to-gray-900 text-white overflow-hidden\">\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16\" />\n            \n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-300 text-sm font-medium uppercase tracking-wider\">Price Advantage</p>\n                  <div className=\"flex items-baseline gap-2 mt-2\">\n                    <p className=\"text-4xl font-bold\">{priceAdvantageCount}</p>\n                    <span className=\"text-sm text-gray-400\">products</span>\n                  </div>\n                  <p className=\"text-xs text-gray-400 mt-1\">Below competition</p>\n                </div>\n                <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n                  <DollarSign className=\"text-white\" size={24} />\n                </div>\n              </div>\n              \n              <div className=\"mt-4 pt-4 border-t border-white/20\">\n                <div className=\"flex items-center justify-between text-xs text-gray-300 mb-2\">\n                  <span>Competitive Edge</span>\n                  <span>92% optimal</span>\n                </div>\n                <div className=\"w-full bg-black/30 rounded-full h-2\">\n                  <div className=\"bg-gradient-to-r from-green-400 to-green-300 h-2 rounded-full transition-all duration-1000 ease-out\" style={{ width: '92%' }}></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Need Adjustment Card */}\n          <Card className=\"relative border-0 shadow-lg bg-gradient-to-br from-white to-gray-100 text-black overflow-hidden\">\n            <div className=\"absolute top-0 right-0 w-32 h-32 bg-[#CB0000]/10 rounded-full -mr-16 -mt-16\" />\n            \n            <CardContent className=\"p-6 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-700 text-sm font-medium uppercase tracking-wider\">Need Adjustment</p>\n                  <div className=\"flex items-baseline gap-2 mt-2\">\n                    <p className=\"text-4xl font-bold\">{needAdjustmentCount}</p>\n                    <span className=\"text-sm text-gray-600\">urgent</span>\n                  </div>\n                  <div className=\"h-0.5 w-8 bg-[#CB0000] mt-2\" />\n                </div>\n                <div className=\"p-3 bg-[#CB0000]/20 rounded-lg backdrop-blur-sm\">\n                  <TrendingUp className=\"text-[#CB0000]\" size={24} />\n                </div>\n              </div>\n              \n              <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                <div className=\"flex items-center justify-between text-xs text-gray-600 mb-2\">\n                  <span>Action Required</span>\n                  <span>High priority</span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div className=\"bg-gradient-to-r from-[#CB0000] to-red-600 h-2 rounded-full transition-all duration-1000 ease-out\" style={{ width: '25%' }}></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tabs for different views */}\n        <Tabs defaultValue=\"all\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-white dark:bg-slate-900 p-1 rounded-xl shadow-lg\">\n            <TabsTrigger value=\"all\" className=\"data-[state=active]:bg-red-600 data-[state=active]:text-white\">\n              <Package2 className=\"h-4 w-4 mr-2\" />\n              All Products\n            </TabsTrigger>\n            <TabsTrigger value=\"brands\" className=\"data-[state=active]:bg-red-600 data-[state=active]:text-white\">\n              <Tag className=\"h-4 w-4 mr-2\" />\n              Brands ({uniqueBrands.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"categories\" className=\"data-[state=active]:bg-red-600 data-[state=active]:text-white\">\n              <Grid className=\"h-4 w-4 mr-2\" />\n              Categories ({uniqueCategories.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"competitors\" className=\"data-[state=active]:bg-red-600 data-[state=active]:text-white\">\n              <Store className=\"h-4 w-4 mr-2\" />\n              Competitors ({competitors.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"mt-6\">\n            {/* Modern Search Bar with Bulk Selection */}\n            <Card className=\"bg-gradient-to-r from-white to-slate-50 dark:from-slate-900 dark:to-slate-800 border-slate-200 dark:border-slate-700 shadow-xl mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <div className=\"p-2 bg-red-100 dark:bg-red-900/20 rounded-lg\">\n                    <Search className=\"h-5 w-5 text-red-600\" />\n                  </div>\n                  <Input\n                    placeholder=\"Search products by name or model number...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"flex-1 border-0 bg-transparent text-lg placeholder:text-slate-400 focus-visible:ring-2 focus-visible:ring-red-500\"\n                  />\n                  <div className=\"p-2 bg-slate-100 dark:bg-slate-800 rounded-lg\">\n                    <Filter className=\"h-5 w-5 text-slate-600 dark:text-slate-400\" />\n                  </div>\n                </div>\n                \n                {/* Bulk Selection Controls */}\n                <div className=\"flex items-center justify-between border-t border-slate-200 dark:border-slate-700 pt-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={isAllSelected ? clearSelection : selectAllProducts}\n                      className=\"flex items-center gap-2\"\n                    >\n                      {isAllSelected ? (\n                        <CheckSquare className=\"h-4 w-4\" />\n                      ) : (\n                        <Square className=\"h-4 w-4\" />\n                      )}\n                      {isAllSelected ? 'Deselect All' : 'Select All'}\n                    </Button>\n                    \n                    {selectedProducts.size > 0 && (\n                      <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                        {selectedProducts.size} of {filteredProducts.length} selected\n                      </span>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    {/* Add Product Button */}\n                    <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 shadow-lg\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Product\n                        </Button>\n                      </DialogTrigger>\n                    </Dialog>\n\n                    {/* Competitor Import Button */}\n                    <Dialog open={showCompetitorImportDialog} onOpenChange={setShowCompetitorImportDialog}>\n                      <DialogTrigger asChild>\n                        <Button variant=\"outline\" className=\"border-red-200 hover:border-red-300 hover:bg-red-50\">\n                          <Store className=\"h-4 w-4 mr-2\" />\n                          Import Competitor\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle>Import Competitor Products</DialogTitle>\n                          <DialogDescription>\n                            Enter a competitor's category page URL to import their products for comparison.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"competitor-url\">Competitor URL</Label>\n                            <Input\n                              id=\"competitor-url\"\n                              value={competitorUrl}\n                              onChange={(e) => setCompetitorUrl(e.target.value)}\n                              placeholder=\"https://toolkitdepot.com.au/automotive/battery-chargers/\"\n                              className=\"mt-1\"\n                            />\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              Paste a category or product listing page URL from any competitor site.\n                            </p>\n                          </div>\n                          <div className=\"flex justify-end gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              onClick={() => setShowCompetitorImportDialog(false)}\n                            >\n                              Cancel\n                            </Button>\n                            <Button \n                              onClick={() => {\n                                if (competitorUrl) {\n                                  importCompetitor.mutate({ url: competitorUrl });\n                                  setShowCompetitorImportDialog(false);\n                                  setCompetitorUrl(\"\");\n                                }\n                              }}\n                              disabled={!competitorUrl || importCompetitor.isPending}\n                            >\n                              {importCompetitor.isPending ? (\n                                <>\n                                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                                  Importing...\n                                </>\n                              ) : (\n                                \"Import Products\"\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n\n                    {selectedProducts.size > 0 && (\n                      <>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            // Bulk edit - for now just select the first product for editing\n                            const firstSelectedId = Array.from(selectedProducts)[0];\n                            const firstProduct = products.find(p => p.id === firstSelectedId);\n                            if (firstProduct) {\n                              setEditingProduct(firstProduct);\n                              setShowEditDialog(true);\n                            }\n                          }}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                          Edit Selected\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => setShowBulkDeleteDialog(true)}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                          Delete Selected\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Products Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              <AnimatePresence>\n            {paginatedProducts.map((product) => {\n              const lowestPrice = getLowestCompetitorPrice(product.competitorLinks);\n              const priceStatus = getPriceStatus(product.ourPrice, lowestPrice);\n              \n              return (\n                <motion.div\n                  key={product.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.9 }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <Card className={`bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border transition-all duration-300 overflow-hidden relative group hover:shadow-xl ${\n                    selectedProducts.has(product.id) \n                      ? 'border-red-500 shadow-lg shadow-red-200/30 ring-2 ring-red-200' \n                      : 'border-slate-200 dark:border-slate-700 shadow-md hover:border-red-300 dark:hover:border-red-600'\n                  }`}>\n                    {/* Selection Checkbox */}\n                    <div className=\"absolute top-3 left-3 z-10\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className={`h-8 w-8 rounded-full p-0 ${\n                          selectedProducts.has(product.id) \n                            ? 'bg-red-600 text-white hover:bg-red-700' \n                            : 'bg-white/80 backdrop-blur-sm hover:bg-white'\n                        }`}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleProductSelection(product.id);\n                        }}\n                      >\n                        {selectedProducts.has(product.id) ? (\n                          <Check className=\"h-4 w-4\" />\n                        ) : (\n                          <div className=\"h-4 w-4 border border-gray-400 rounded-sm\" />\n                        )}\n                      </Button>\n                    </div>\n                    \n                    {/* Product Image */}\n                    <div className=\"h-48 w-full bg-white p-4 flex items-center justify-center relative\">\n                      {/* Floating Sale Badge on Image */}\n                      {product.originalPrice && product.originalPrice > (product.price || product.ourPrice || 0) && (\n                        <div className=\"absolute top-3 right-3 z-10\">\n                          <div className=\"relative\">\n                            {/* Glow effect background */}\n                            <div className=\"absolute inset-0 bg-green-500 rounded-lg blur-sm opacity-50\"></div>\n                            \n                            {/* Main badge */}\n                            <div className=\"relative bg-gradient-to-r from-green-600 to-green-700 text-white text-xs font-bold px-3 py-2 rounded-lg shadow-xl border border-green-500 transform hover:scale-105 transition-all duration-200\">\n                              <div className=\"flex items-center gap-1\">\n                                <span className=\"text-green-100\">-{Math.round(((product.originalPrice - (product.price || product.ourPrice || 0)) / product.originalPrice) * 100)}%</span>\n                                <span className=\"text-white font-extrabold\">OFF</span>\n                              </div>\n                              \n                              {/* Shine effect */}\n                              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 transform -translate-x-full animate-pulse\"></div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {product.image ? (\n                        <img \n                          src={product.image} \n                          alt={product.name}\n                          className=\"max-h-full max-w-full object-contain\"\n                        />\n                      ) : (\n                        <div className=\"h-full w-full bg-gray-100 flex items-center justify-center\">\n                          <ImageIcon className=\"h-16 w-16 text-gray-400\" />\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Product Info */}\n                    <div className=\"p-4 border-t border-slate-200 dark:border-slate-700 bg-gradient-to-r from-transparent to-slate-50/50 dark:to-slate-800/50\">\n                      <h3 className=\"text-sm font-medium text-slate-900 dark:text-white line-clamp-2 min-h-[2.5rem] group-hover:text-red-700 dark:group-hover:text-red-400 transition-colors\">\n                        {product.name}\n                      </h3>\n                      \n                      {/* Price and Expand Button */}\n                      <div className=\"mt-3 flex items-center justify-between\">\n                        <div className=\"flex items-baseline gap-2\">\n                          {product.originalPrice && product.originalPrice > (product.price || product.ourPrice || 0) ? (\n                            <>\n                              {/* Sale Price in Green */}\n                              <span className=\"font-bold text-2xl\" style={{ color: '#008000' }}>\n                                ${product.price || product.ourPrice || '0'}\n                              </span>\n                              {/* Original Price Strikethrough */}\n                              <span className=\"text-xs text-gray-500 line-through\">\n                                ${product.originalPrice}\n                              </span>\n                            </>\n                          ) : (\n                            /* Regular Price in Red */\n                            <span className=\"text-red-600 font-bold text-2xl\">\n                              ${product.price || product.ourPrice || '0'}\n                            </span>\n                          )}\n                        </div>\n                        \n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-8 w-8 rounded-full border-red-600 text-red-600 hover:bg-red-50\"\n                          onClick={() => {\n                            const newExpanded = new Set(expandedProducts);\n                            if (newExpanded.has(product.id)) {\n                              newExpanded.delete(product.id);\n                            } else {\n                              newExpanded.add(product.id);\n                            }\n                            setExpandedProducts(newExpanded);\n                          }}\n                        >\n                          {expandedProducts.has(product.id) ? (\n                            <Minus className=\"h-4 w-4\" />\n                          ) : (\n                            <Plus className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* Expandable Details Section */}\n                    <AnimatePresence>\n                      {expandedProducts.has(product.id) && (\n                        <motion.div\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{ height: \"auto\", opacity: 1 }}\n                          exit={{ height: 0, opacity: 0 }}\n                          transition={{ duration: 0.3 }}\n                          className=\"overflow-hidden\"\n                        >\n                          <CardContent className=\"pt-0 border-t bg-gray-50\">\n                            {/* Product Details */}\n                            <div className=\"space-y-3\">\n                              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                <div>\n                                  <p className=\"text-gray-500\">Model Number</p>\n                                  <p className=\"font-medium\">{product.modelNumber || extractModelNumber(product.name)}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-gray-500\">Brand</p>\n                                  <p className=\"font-medium\">{product.brand || 'Unknown'}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-gray-500\">Category</p>\n                                  <p className=\"font-medium\">{product.category || 'Uncategorized'}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-gray-500\">Our Price</p>\n                                  <p className=\"font-medium text-green-600\">\n                                    ${product.ourPrice || product.price || '0'}\n                                  </p>\n                                </div>\n                              </div>\n                              \n                              {/* Product Page Link */}\n                              {product.productPageUrl && (\n                                <div className=\"mt-3 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex-1 min-w-0\">\n                                      <p className=\"text-xs text-blue-600 font-semibold mb-1\">Product Page</p>\n                                      <p className=\"text-xs text-gray-600 truncate\">{product.productPageUrl}</p>\n                                    </div>\n                                    <a\n                                      href={product.productPageUrl}\n                                      target=\"_blank\"\n                                      rel=\"noopener noreferrer\"\n                                      className=\"ml-2 p-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n                                    >\n                                      <ExternalLink className=\"h-4 w-4\" />\n                                    </a>\n                                  </div>\n                                </div>\n                              )}\n                              \n                              {/* Competitor Prices */}\n                              {(product.competitorListings?.length > 0 || product.competitorLinks?.length > 0) && (\n                                <div className=\"mt-4 pt-4 border-t\">\n                                  <p className=\"text-sm font-semibold text-gray-700 mb-3\">\n                                    Competitor Prices ({product.competitorListings?.length || product.competitorLinks?.length || 0})\n                                  </p>\n                                  <div className=\"space-y-2\">\n                                    {/* Show competitorListings if available (for matched products) */}\n                                    {product.competitorListings?.map((listing: any) => {\n                                      const competitorPrice = listing.latestSnapshot?.price ? parseFloat(listing.latestSnapshot.price) : null;\n                                      const ourPrice = parseFloat(product.price) || parseFloat(product.ourPrice) || 0;\n                                      const priceDiff = competitorPrice && ourPrice ? competitorPrice - ourPrice : 0;\n                                      const percentDiff = ourPrice > 0 && competitorPrice ? ((priceDiff / ourPrice) * 100) : 0;\n                                      \n                                      return (\n                                        <div\n                                          key={listing.id}\n                                          className=\"flex items-center justify-between p-3 bg-white rounded-lg border hover:shadow-md transition-shadow\"\n                                        >\n                                          <div className=\"flex-1 min-w-0\">\n                                            <div className=\"flex items-center gap-2 mb-1\">\n                                              <Badge variant=\"outline\" className=\"text-xs\">\n                                                {listing.competitorName || \"Unknown\"}\n                                              </Badge>\n                                              {competitorPrice && (\n                                                <>\n                                                  <span className=\"font-bold text-lg\">\n                                                    ${competitorPrice.toFixed(2)}\n                                                  </span>\n                                                  {priceDiff !== 0 && (\n                                                    <Badge \n                                                      className={priceDiff > 0 ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}\n                                                    >\n                                                      {priceDiff > 0 ? (\n                                                        <>We're ${Math.abs(priceDiff).toFixed(2)} cheaper ({Math.abs(percentDiff).toFixed(1)}%)</>\n                                                      ) : priceDiff < 0 ? (\n                                                        <>They're ${Math.abs(priceDiff).toFixed(2)} cheaper ({Math.abs(percentDiff).toFixed(1)}%)</>\n                                                      ) : (\n                                                        \"Same price\"\n                                                      )}\n                                                    </Badge>\n                                                  )}\n                                                </>\n                                              )}\n                                            </div>\n                                            <p className=\"text-xs text-gray-500 truncate\">\n                                              {listing.url}\n                                            </p>\n                                          </div>\n                                          <a\n                                            href={listing.url}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                            className=\"ml-2 p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                                          >\n                                            <ExternalLink className=\"h-4 w-4 text-gray-400\" />\n                                          </a>\n                                        </div>\n                                      );\n                                    })}\n                                    \n                                    {/* Fallback to competitorLinks if no competitorListings */}\n                                    {(!product.competitorListings || product.competitorListings.length === 0) && \n                                     product.competitorLinks?.map((link: any) => (\n                                      <div\n                                        key={link.id}\n                                        className=\"flex items-center justify-between p-2 bg-white rounded border\"\n                                      >\n                                        <div className=\"flex-1 min-w-0\">\n                                          <div className=\"flex items-center gap-2\">\n                                            <Badge variant=\"outline\" className=\"text-xs\">\n                                              {link.competitorName || \"Unknown\"}\n                                            </Badge>\n                                            {link.extractedPrice && (\n                                              <span className=\"font-bold text-red-600\">\n                                                ${link.extractedPrice}\n                                              </span>\n                                            )}\n                                          </div>\n                                          <p className=\"text-xs text-gray-500 truncate mt-1\">\n                                            {link.url}\n                                          </p>\n                                        </div>\n                                        <a\n                                          href={link.url}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                          className=\"ml-2 p-1 hover:bg-gray-100 rounded\"\n                                        >\n                                          <ExternalLink className=\"h-4 w-4 text-gray-400\" />\n                                        </a>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              )}\n                              \n                              {/* Action Buttons */}\n                              <div className=\"flex gap-2 mt-4 pt-4 border-t\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"flex-1\"\n                                  onClick={() => {\n                                    setEditingProduct(product);\n                                    setShowEditDialog(true);\n                                  }}\n                                >\n                                  <Edit className=\"h-4 w-4 mr-2\" />\n                                  Edit\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"flex-1 text-red-600 hover:bg-red-50\"\n                                  onClick={() => deleteProduct.mutate(product.id)}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                                  Delete\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </motion.div>\n                      )}\n                    </AnimatePresence>\n                  </Card>\n                </motion.div>\n            );\n          })}\n              </AnimatePresence>\n          \n          {paginatedProducts.length === 0 && filteredProducts.length === 0 && (\n            <div className=\"col-span-full text-center py-16\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-800 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <Package2 className=\"h-12 w-12 text-slate-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-slate-900 dark:text-white mb-2\">No products found</h3>\n              <p className=\"text-slate-500 dark:text-slate-400 mb-6\">\n                {searchTerm ? \"Try a different search term\" : \"Add your first product to get started\"}\n              </p>\n              {!searchTerm && (\n                <Button\n                  onClick={() => setShowAddDialog(true)}\n                  className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Your First Product\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Pagination Controls */}\n        {filteredProducts.length > itemsPerPage && (\n          <div className=\"w-full flex flex-col items-center justify-center pt-6 mt-6 border-t border-slate-200 dark:border-slate-700 space-y-4\">\n            <div className=\"text-center\">\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Showing {Math.min(startIndex + 1, filteredProducts.length)} to {Math.min(endIndex, filteredProducts.length)} of {filteredProducts.length} products\n              </span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-1\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(1)}\n                disabled={currentPage === 1}\n                className=\"h-8 w-8 p-0\"\n              >\n                <ChevronsLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                disabled={currentPage === 1}\n                className=\"h-8 w-8 p-0\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              \n              <div className=\"flex items-center space-x-1\">\n                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                  let pageNum;\n                  if (totalPages <= 5) {\n                    pageNum = i + 1;\n                  } else if (currentPage <= 3) {\n                    pageNum = i + 1;\n                  } else if (currentPage >= totalPages - 2) {\n                    pageNum = totalPages - 4 + i;\n                  } else {\n                    pageNum = currentPage - 2 + i;\n                  }\n                  \n                  return (\n                    <Button\n                      key={pageNum}\n                      variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(pageNum)}\n                      className={`h-8 w-8 p-0 ${\n                        currentPage === pageNum \n                          ? \"bg-gradient-to-r from-red-600 to-red-700 text-white border-red-600\" \n                          : \"hover:bg-red-50 hover:border-red-200\"\n                      }`}\n                    >\n                      {pageNum}\n                    </Button>\n                  );\n                })}\n              </div>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                disabled={currentPage === totalPages}\n                className=\"h-8 w-8 p-0\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(totalPages)}\n                disabled={currentPage === totalPages}\n                className=\"h-8 w-8 p-0\"\n              >\n                <ChevronsRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n          </TabsContent>\n\n          <TabsContent value=\"brands\" className=\"mt-6\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4\">\n              {uniqueBrands.map(brand => {\n                const brandProducts = products.filter(p => (p.brand || 'Unknown') === brand);\n                const customization = getCardCustomization(brand, 'brand');\n                \n                return (\n                  <motion.div\n                    key={brand}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"cursor-pointer\"\n                    onClick={() => {\n                      // Navigate to brand page - you'll need to implement this route\n                      window.location.href = `/brands/${encodeURIComponent(brand)}`;\n                    }}\n                  >\n                    <Card className=\"aspect-square bg-white hover:shadow-lg transition-all duration-300 border border-gray-200 hover:border-red-300 relative group\">\n                      {/* Product count badge */}\n                      <div className=\"absolute -top-2 -right-2 z-10\">\n                        <Badge className=\"bg-red-600 text-white text-xs font-bold shadow-lg\">\n                          {brandProducts.length}\n                        </Badge>\n                      </div>\n                      \n                      {/* Edit Button */}\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"absolute top-2 left-2 opacity-0 group-hover:opacity-100 transition-opacity z-20 bg-white/90 border-gray-300 hover:border-red-500\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          openCardEditor(brand, 'brand');\n                        }}\n                      >\n                        <Settings className=\"h-3 w-3\" />\n                      </Button>\n                      \n                      <CardContent className=\"p-4 h-full flex flex-col items-center justify-center\">\n                        {customization.logoUrl ? (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <img \n                              src={customization.logoUrl} \n                              alt={`${brand} logo`}\n                              className=\"max-w-full max-h-full object-contain\"\n                            />\n                          </div>\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <div className=\"w-14 h-14 bg-gradient-to-br from-red-500 to-red-600 rounded-lg flex items-center justify-center shadow-lg\">\n                              <span className=\"text-white font-bold text-xl\">\n                                {brand.charAt(0).toUpperCase()}\n                              </span>\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Brand name on hover */}\n                        <div className=\"absolute inset-x-0 bottom-0 bg-black/80 text-white text-xs font-medium py-2 px-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300 text-center\">\n                          {brand}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"categories\" className=\"mt-6\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4\">\n              {uniqueCategories.map(category => {\n                const categoryProducts = products.filter(p => (p.category || 'Uncategorized') === category);\n                const customization = getCardCustomization(category, 'category');\n                \n                return (\n                  <motion.div\n                    key={category}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"cursor-pointer\"\n                    onClick={() => {\n                      // Navigate to category page\n                      window.location.href = `/categories/${encodeURIComponent(category)}`;\n                    }}\n                  >\n                    <Card className=\"aspect-square bg-white hover:shadow-lg transition-all duration-300 border border-gray-200 hover:border-red-300 relative group\">\n                      {/* Product count badge */}\n                      <div className=\"absolute -top-2 -right-2 z-10\">\n                        <Badge className=\"bg-red-600 text-white text-xs font-bold shadow-lg\">\n                          {categoryProducts.length}\n                        </Badge>\n                      </div>\n                      \n                      {/* Edit Button */}\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"absolute top-2 left-2 opacity-0 group-hover:opacity-100 transition-opacity z-20 bg-white/90 border-gray-300 hover:border-red-500\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          openCardEditor(category, 'category');\n                        }}\n                      >\n                        <Settings className=\"h-3 w-3\" />\n                      </Button>\n                      \n                      <CardContent className=\"p-4 h-full flex flex-col items-center justify-center\">\n                        {customization.logoUrl ? (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <img \n                              src={customization.logoUrl.startsWith('/objects/') \n                                ? customization.logoUrl \n                                : customization.logoUrl}\n                              alt={`${category} logo`}\n                              className=\"max-w-full max-h-full object-contain\"\n                            />\n                          </div>\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <div className=\"w-14 h-14 bg-gradient-to-br from-red-500 to-red-600 rounded-lg flex items-center justify-center shadow-lg\">\n                              <Grid className=\"h-7 w-7 text-white\" />\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Category name on hover */}\n                        <div className=\"absolute inset-x-0 bottom-0 bg-black/80 text-white text-xs font-medium py-2 px-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300 text-center\">\n                          {category}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"competitors\" className=\"mt-6\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4\">\n              {competitors.map(competitor => {\n                const competitorProducts = products.filter(p => \n                  p.competitorLinks.some(l => (l.competitorName || 'Unknown') === competitor)\n                );\n                const customization = getCardCustomization(competitor, 'competitor');\n                \n                return (\n                  <motion.div\n                    key={competitor}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"cursor-pointer\"\n                    onClick={() => {\n                      // Navigate to competitor page\n                      window.location.href = `/competitors/${encodeURIComponent(competitor)}`;\n                    }}\n                  >\n                    <Card className=\"aspect-square bg-white hover:shadow-lg transition-all duration-300 border border-gray-200 hover:border-red-300 relative group\">\n                      {/* Product count badge */}\n                      <div className=\"absolute -top-2 -right-2 z-10\">\n                        <Badge className=\"bg-red-600 text-white text-xs font-bold shadow-lg\">\n                          {competitorProducts.length}\n                        </Badge>\n                      </div>\n                      \n                      {/* Edit Button */}\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"absolute top-2 left-2 opacity-0 group-hover:opacity-100 transition-opacity z-20 bg-white/90 border-gray-300 hover:border-red-500\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          openCardEditor(competitor, 'competitor');\n                        }}\n                      >\n                        <Settings className=\"h-3 w-3\" />\n                      </Button>\n                      \n                      <CardContent className=\"p-4 h-full flex flex-col items-center justify-center\">\n                        {customization.logoUrl ? (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <img \n                              src={customization.logoUrl.startsWith('/objects/') \n                                ? customization.logoUrl \n                                : customization.logoUrl}\n                              alt={`${competitor} logo`}\n                              className=\"max-w-full max-h-full object-contain\"\n                            />\n                          </div>\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <div className=\"w-14 h-14 bg-gradient-to-br from-red-500 to-red-600 rounded-lg flex items-center justify-center shadow-lg\">\n                              <Store className=\"h-7 w-7 text-white\" />\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Competitor name on hover */}\n                        <div className=\"absolute inset-x-0 bottom-0 bg-black/80 text-white text-xs font-medium py-2 px-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300 text-center\">\n                          {competitor}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Card Customization Dialog */}\n      <Dialog open={showCardCustomDialog} onOpenChange={setShowCardCustomDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Customize {editingCard?.type} Card</DialogTitle>\n            <DialogDescription>\n              Personalize the appearance of your {editingCard?.id} card with custom colors, title, and logo.\n            </DialogDescription>\n          </DialogHeader>\n\n          {editingCard && (\n            <div className=\"space-y-6\">\n              {/* Title Settings */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={editingCard.showTitle}\n                    onCheckedChange={(checked) =>\n                      setEditingCard({ ...editingCard, showTitle: checked })\n                    }\n                  />\n                  <Label>Show Title</Label>\n                </div>\n                \n                {editingCard.showTitle && (\n                  <div>\n                    <Label htmlFor=\"card-title\">Card Title</Label>\n                    <Input\n                      id=\"card-title\"\n                      value={editingCard.title}\n                      onChange={(e) =>\n                        setEditingCard({ ...editingCard, title: e.target.value })\n                      }\n                      placeholder=\"Enter card title\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              {/* Logo/Image Settings */}\n              <div className=\"space-y-3\">\n                <Label>Logo/Image</Label>\n                <div className=\"flex items-center gap-3\">\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={5242880} // 5MB\n                    onGetUploadParameters={async () => {\n                      const response = await fetch('/api/objects/upload', {\n                        method: 'POST',\n                        headers: {\n                          'Content-Type': 'application/json'\n                        }\n                      }).then(res => res.json());\n                      return {\n                        method: 'PUT' as const,\n                        url: response.uploadURL\n                      };\n                    }}\n                    onComplete={async (result) => {\n                      if (result.successful?.[0]) {\n                        const uploadURL = result.successful[0].uploadURL;\n                        const response = await fetch('/api/card-images', {\n                          method: 'PUT',\n                          headers: {\n                            'Content-Type': 'application/json'\n                          },\n                          body: JSON.stringify({ imageURL: uploadURL })\n                        }).then(res => res.json());\n                        setEditingCard({ ...editingCard, logoUrl: response.objectPath });\n                        toast({\n                          title: \"Image uploaded\",\n                          description: \"Your image has been uploaded successfully\"\n                        });\n                      }\n                    }}\n                    buttonClassName=\"w-full\"\n                  >\n                    <ImageIcon className=\"h-4 w-4 mr-2\" />\n                    Upload Image\n                  </ObjectUploader>\n                  \n                  {editingCard.logoUrl && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => setEditingCard({ ...editingCard, logoUrl: '' })}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n                \n                {editingCard.logoUrl && (\n                  <div className=\"w-24 h-24 border-2 border-gray-200 rounded-lg overflow-hidden bg-gray-50\">\n                    <img \n                      src={editingCard.logoUrl.startsWith('/objects/') \n                        ? editingCard.logoUrl \n                        : editingCard.logoUrl\n                      } \n                      alt=\"Logo preview\"\n                      className=\"w-full h-full object-contain\"\n                    />\n                  </div>\n                )}\n                \n                <p className=\"text-xs text-gray-500\">\n                  Upload an image to customize your card. Supported formats: JPG, PNG, GIF\n                </p>\n              </div>\n\n              {/* Background Color */}\n              <div className=\"space-y-3\">\n                <Label>Background Color</Label>\n                <Select\n                  value={editingCard.backgroundColor}\n                  onValueChange={(value) =>\n                    setEditingCard({ ...editingCard, backgroundColor: value })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"bg-white dark:bg-slate-900\">Default</SelectItem>\n                    <SelectItem value=\"bg-red-50 dark:bg-red-950\">Red</SelectItem>\n                    <SelectItem value=\"bg-blue-50 dark:bg-blue-950\">Blue</SelectItem>\n                    <SelectItem value=\"bg-green-50 dark:bg-green-950\">Green</SelectItem>\n                    <SelectItem value=\"bg-yellow-50 dark:bg-yellow-950\">Yellow</SelectItem>\n                    <SelectItem value=\"bg-purple-50 dark:bg-purple-950\">Purple</SelectItem>\n                    <SelectItem value=\"bg-pink-50 dark:bg-pink-950\">Pink</SelectItem>\n                    <SelectItem value=\"bg-indigo-50 dark:bg-indigo-950\">Indigo</SelectItem>\n                    <SelectItem value=\"bg-cyan-50 dark:bg-cyan-950\">Cyan</SelectItem>\n                    <SelectItem value=\"bg-orange-50 dark:bg-orange-950\">Orange</SelectItem>\n                    <SelectItem value=\"bg-gradient-to-br from-red-50 to-red-100 dark:from-red-950 dark:to-red-900\">Red Gradient</SelectItem>\n                    <SelectItem value=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900\">Blue Gradient</SelectItem>\n                    <SelectItem value=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900\">Green Gradient</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Text Color */}\n              <div className=\"space-y-3\">\n                <Label>Text Color</Label>\n                <Select\n                  value={editingCard.textColor}\n                  onValueChange={(value) =>\n                    setEditingCard({ ...editingCard, textColor: value })\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"text-slate-900 dark:text-white\">Default</SelectItem>\n                    <SelectItem value=\"text-red-700 dark:text-red-300\">Red</SelectItem>\n                    <SelectItem value=\"text-blue-700 dark:text-blue-300\">Blue</SelectItem>\n                    <SelectItem value=\"text-green-700 dark:text-green-300\">Green</SelectItem>\n                    <SelectItem value=\"text-yellow-700 dark:text-yellow-300\">Yellow</SelectItem>\n                    <SelectItem value=\"text-purple-700 dark:text-purple-300\">Purple</SelectItem>\n                    <SelectItem value=\"text-pink-700 dark:text-pink-300\">Pink</SelectItem>\n                    <SelectItem value=\"text-indigo-700 dark:text-indigo-300\">Indigo</SelectItem>\n                    <SelectItem value=\"text-white\">White</SelectItem>\n                    <SelectItem value=\"text-black\">Black</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Custom CSS Classes */}\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"custom-styles\">Custom CSS Classes</Label>\n                <Input\n                  id=\"custom-styles\"\n                  value={editingCard.customStyles || ''}\n                  onChange={(e) =>\n                    setEditingCard({ ...editingCard, customStyles: e.target.value })\n                  }\n                  placeholder=\"border-2 border-red-500 shadow-lg\"\n                />\n                <p className=\"text-xs text-slate-500\">\n                  Add custom Tailwind CSS classes for advanced styling\n                </p>\n              </div>\n\n              {/* Preview */}\n              <div className=\"space-y-3\">\n                <Label>Preview</Label>\n                <Card className={`${editingCard.backgroundColor} ${editingCard.customStyles} max-w-sm`}>\n                  <CardHeader className=\"pb-4\">\n                    {editingCard.logoUrl && (\n                      <div className=\"w-12 h-12 mb-2 mx-auto\">\n                        <img \n                          src={editingCard.logoUrl} \n                          alt=\"Preview logo\"\n                          className=\"w-full h-full object-contain rounded-lg\"\n                        />\n                      </div>\n                    )}\n                    \n                    {editingCard.showTitle && (\n                      <CardTitle className={`text-lg font-bold ${editingCard.textColor}`}>\n                        {editingCard.title}\n                      </CardTitle>\n                    )}\n                    \n                    <CardDescription className={editingCard.textColor}>\n                      Sample description text\n                    </CardDescription>\n                  </CardHeader>\n                </Card>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-end space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowCardCustomDialog(false)}\n                >\n                  Cancel\n                </Button>\n                <Button onClick={saveCardCustomization}>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Import Review Dialog */}\n      <ImportReviewDialog\n        isOpen={showImportReviewDialog}\n        onClose={() => {\n          setShowImportReviewDialog(false);\n          setImportPreviewData(null);\n        }}\n        previewData={importPreviewData}\n      />\n\n      {/* Bulk Delete Confirmation Dialog */}\n      <Dialog open={showBulkDeleteDialog} onOpenChange={setShowBulkDeleteDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Selected Products</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete {selectedProducts.size} selected products? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end space-x-3 mt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowBulkDeleteDialog(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => bulkDeleteProducts.mutate(Array.from(selectedProducts))}\n              disabled={bulkDeleteProducts.isPending}\n            >\n              {bulkDeleteProducts.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete {selectedProducts.size} Products\n                </>\n              )}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":98782},"client/src/pages/products.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ProductCatalogSection } from \"@/components/dashboard/product-catalog-section\";\nimport { ProductDetailModal } from \"@/components/ui/product-detail-modal\";\nimport { useState } from \"react\";\n\nexport default function Products() {\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: meta } = useQuery({\n    queryKey: [\"/api/meta\"],\n    queryFn: api.getMeta,\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: () => api.getProducts({}),\n  });\n\n  const handleProductClick = (product: any) => {\n    setSelectedProduct(product);\n    setIsModalOpen(true);\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-gray-50 via-white to-gray-100\">\n      <div className=\"p-8 animate-fade-up\">\n        {products.length > 0 ? (\n          <ProductCatalogSection \n            products={products}\n            competitors={meta?.competitors || []}\n            onProductClick={handleProductClick}\n          />\n        ) : (\n          <Card className=\"border-slate-200 shadow-sm\">\n            <CardContent className=\"py-12 text-center\">\n              <div className=\"text-slate-400 text-4xl mb-4\">📦</div>\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Products Found</h3>\n              <p className=\"text-slate-500 mb-4\">\n                Start by adding competitor pages and running scraping tasks to populate your product catalog.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <ProductDetailModal \n        product={selectedProduct}\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":1877},"client/src/components/dashboard/brand-coverage-matrix.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Grid } from \"lucide-react\";\n\ninterface BrandCoverageData {\n  brands: string[];\n  competitors: Array<{ id: string; name: string; isUs: boolean }>;\n  matrix: Array<{ brand: string; [competitorName: string]: any }>;\n}\n\ninterface BrandCoverageMatrixProps {\n  data: BrandCoverageData;\n}\n\nexport function BrandCoverageMatrix({ data }: BrandCoverageMatrixProps) {\n  const { brands, competitors, matrix } = data;\n\n  return (\n    <Card className=\"border-slate-200 shadow-sm mb-8\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <CardTitle className=\"text-lg font-semibold text-slate-900\">\n          Brand Coverage Matrix\n        </CardTitle>\n        <p className=\"text-slate-600 text-sm mt-1\">\n          Compare which jump starter brands each competitor carries\n        </p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {brands.length === 0 || competitors.length === 0 || matrix.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-slate-400 mb-4\">\n              <Grid size={48} className=\"mx-auto\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No brand coverage data</h3>\n            <p className=\"text-slate-500 mb-4\">\n              Add competitors and scrape products to see brand coverage analysis\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-slate-200\">\n                  <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Brand</th>\n                  {competitors.map((competitor) => (\n                    <th key={competitor.id} className=\"text-center py-3 px-4 font-medium text-slate-700\">\n                      {competitor.name}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-slate-100\">\n                {matrix.map((row) => {\n                const isGapOpportunity = competitors.some(comp => \n                  !comp.isUs && row[comp.name] > 0\n                ) && competitors.find(comp => comp.isUs && row[comp.name] === 0);\n\n                return (\n                  <tr \n                    key={row.brand} \n                    className={`hover:bg-slate-50 ${isGapOpportunity ? 'bg-red-50' : ''}`}\n                  >\n                    <td className=\"py-3 px-4 font-medium text-slate-900\">\n                      <div className=\"flex items-center\">\n                        {row.brand}\n                        {isGapOpportunity && (\n                          <Badge variant=\"destructive\" className=\"ml-2 text-xs\">\n                            Gap Opportunity\n                          </Badge>\n                        )}\n                      </div>\n                    </td>\n                    {competitors.map((competitor) => {\n                      const count = row[competitor.name] || 0;\n                      return (\n                        <td key={competitor.id} className=\"py-3 px-4 text-center\">\n                          <span className={`inline-flex items-center justify-center w-8 h-8 rounded-full text-sm font-semibold ${\n                            count > 0 \n                              ? 'bg-emerald-100 text-emerald-700' \n                              : 'bg-slate-100 text-slate-400'\n                          }`}>\n                            {count}\n                          </span>\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3888},"client/src/components/dashboard/kpi-section.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingDown, Clock, Package, Award } from \"lucide-react\";\n\ninterface KPIMetrics {\n  brandCoverage: string;\n  priceUndercuts: number;\n  priceChanges: number;\n  stockChanges: number;\n}\n\ninterface KPISectionProps {\n  metrics: KPIMetrics;\n}\n\nexport function KPISection({ metrics }: KPISectionProps) {\n  const kpis = [\n    {\n      label: \"Brand Coverage\",\n      value: metrics.brandCoverage,\n      subtitle: \"vs Sydney Tools\",\n      icon: Award,\n      iconColor: \"text-blue-600\",\n      iconBg: \"bg-blue-100\"\n    },\n    {\n      label: \"Price Undercuts\",\n      value: metrics.priceUndercuts,\n      subtitle: \"products cheaper elsewhere\",\n      icon: TrendingDown,\n      iconColor: \"text-red-600\",\n      iconBg: \"bg-red-100\"\n    },\n    {\n      label: \"Price Changes (24h)\",\n      value: metrics.priceChanges,\n      subtitle: \"across all competitors\",\n      icon: Clock,\n      iconColor: \"text-yellow-600\",\n      iconBg: \"bg-yellow-100\"\n    },\n    {\n      label: \"Stock Changes\",\n      value: metrics.stockChanges,\n      subtitle: \"out of stock changes\",\n      icon: Package,\n      iconColor: \"text-purple-600\",\n      iconBg: \"bg-purple-100\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {kpis.map((kpi) => {\n        const Icon = kpi.icon;\n        return (\n          <Card key={kpi.label} className=\"border-slate-200 shadow-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">{kpi.label}</p>\n                  <p className=\"text-2xl font-bold text-slate-900 mt-1\">{kpi.value}</p>\n                  <p className=\"text-xs text-slate-500 mt-1\">{kpi.subtitle}</p>\n                </div>\n                <div className={`w-12 h-12 ${kpi.iconBg} rounded-lg flex items-center justify-center`}>\n                  <Icon className={kpi.iconColor} size={20} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2151},"client/src/components/dashboard/price-bands-section.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface PriceBand {\n  id: string;\n  brand: string;\n  entryPrice: string;\n  proPrice: string;\n  productCount: number;\n  competitorId: string;\n}\n\ninterface PriceBandsSectionProps {\n  bands: PriceBand[];\n}\n\nexport function PriceBandsSection({ bands }: PriceBandsSectionProps) {\n  // Group bands by brand and find lowest prices\n  const brandBands = bands.reduce((acc, band) => {\n    if (!acc[band.brand]) {\n      acc[band.brand] = [];\n    }\n    acc[band.brand].push(band);\n    return acc;\n  }, {} as Record<string, PriceBand[]>);\n\n  return (\n    <Card className=\"border-slate-200 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <CardTitle className=\"text-lg font-semibold text-slate-900\">\n          Price Bands Analysis\n        </CardTitle>\n        <p className=\"text-slate-600 text-sm mt-1\">\n          Entry vs Professional tier pricing by brand\n        </p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {Object.entries(brandBands).slice(0, 3).map(([brand, brandBandList]) => {\n            const totalProducts = brandBandList.reduce((sum, band) => sum + band.productCount, 0);\n            const entryPrices = brandBandList.map(b => parseFloat(b.entryPrice || \"0\")).filter(p => p > 0);\n            const proPrices = brandBandList.map(b => parseFloat(b.proPrice || \"0\")).filter(p => p > 0);\n            \n            const lowestEntry = Math.min(...entryPrices);\n            const lowestPro = Math.min(...proPrices);\n\n            return (\n              <div key={brand} className=\"border-b border-slate-100 pb-4 last:border-b-0\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"font-medium text-slate-900\">{brand}</h3>\n                  <span className=\"text-xs text-slate-500\">{totalProducts} products tracked</span>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-xs text-blue-600 font-medium\">Entry Tier (25%)</p>\n                    <p className=\"text-lg font-bold text-blue-900 mt-1\">\n                      ${lowestEntry > 0 ? lowestEntry.toFixed(0) : 'N/A'}\n                    </p>\n                    <p className=\"text-xs text-blue-600\">Lowest available</p>\n                  </div>\n                  <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                    <p className=\"text-xs text-purple-600 font-medium\">Pro Tier (75%)</p>\n                    <p className=\"text-lg font-bold text-purple-900 mt-1\">\n                      ${lowestPro > 0 ? lowestPro.toFixed(0) : 'N/A'}\n                    </p>\n                    <p className=\"text-xs text-purple-600\">Lowest available</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          \n          {Object.keys(brandBands).length === 0 && (\n            <div className=\"text-center py-8 text-slate-500\">\n              <p>No price band data available</p>\n              <p className=\"text-sm mt-1\">Run scraping to collect pricing data</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3319},"client/src/components/dashboard/product-catalog-section.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Box } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface Product {\n  id: string;\n  title: string;\n  brand: string;\n  competitorId: string;\n  imageUrl?: string;\n  productUrl: string;\n}\n\ninterface Competitor {\n  id: string;\n  name: string;\n}\n\ninterface ProductCatalogSectionProps {\n  products: Product[];\n  competitors: Competitor[];\n  onProductClick: (product: Product) => void;\n}\n\nexport function ProductCatalogSection({ products, competitors, onProductClick }: ProductCatalogSectionProps) {\n  const [brandFilter, setBrandFilter] = useState<string>(\"all\");\n  const [competitorFilter, setCompetitorFilter] = useState<string>(\"all\");\n\n  // Get unique brands from products\n  const brands = [...new Set(products.map(p => p.brand))];\n\n  // Filter products\n  const filteredProducts = products.filter(product => {\n    const matchesBrand = !brandFilter || brandFilter === \"all\" || product.brand.toLowerCase().includes(brandFilter.toLowerCase());\n    const matchesCompetitor = !competitorFilter || competitorFilter === \"all\" || product.competitorId === competitorFilter;\n    return matchesBrand && matchesCompetitor;\n  });\n\n  const getBrandColor = (brand: string) => {\n    switch (brand.toLowerCase()) {\n      case 'noco':\n        return 'bg-blue-100 text-blue-800';\n      case 'dewalt':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'projecta':\n        return 'bg-green-100 text-green-800';\n      case 'milwaukee':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-slate-100 text-slate-800';\n    }\n  };\n\n  // Get price data from real price snapshots (returns empty if no data)\n  const getProductData = (product: Product) => {\n    // No price data available - require real price snapshots\n    return { \n      current: 0, \n      min: 0, \n      max: 0, \n      inStock: false \n    };\n  };\n\n  return (\n    <Card className=\"border-slate-200 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-lg font-semibold text-slate-900\">\n              Product Catalog\n            </CardTitle>\n            <p className=\"text-slate-600 text-sm mt-1\">\n              Complete jump starter inventory across all competitors\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium text-slate-700\">Brand:</label>\n              <Select value={brandFilter} onValueChange={setBrandFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"All Brands\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Brands</SelectItem>\n                  {brands.map(brand => (\n                    <SelectItem key={brand} value={brand}>{brand}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium text-slate-700\">Competitor:</label>\n              <Select value={competitorFilter} onValueChange={setCompetitorFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"All Competitors\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Competitors</SelectItem>\n                  {competitors.map(comp => (\n                    <SelectItem key={comp.id} value={comp.id}>{comp.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {filteredProducts.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-slate-400 mb-4\">\n              <Box size={48} className=\"mx-auto\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No products found</h3>\n            <p className=\"text-slate-500 mb-4\">\n              {products.length === 0 \n                ? \"Start by adding competitors and setting up scraping to collect product data.\" \n                : \"Try adjusting your filters or add more products to your catalog.\"}\n            </p>\n          </div>\n        ) : (\n          <>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-slate-50 border-b border-slate-200\">\n                  <tr>\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Product</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Brand</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Competitor</th>\n                    <th className=\"text-right py-3 px-4 font-medium text-slate-700\">Current Price</th>\n                    <th className=\"text-right py-3 px-4 font-medium text-slate-700\">Min/Max</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-slate-700\">Stock</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-slate-700\">Last Change</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-slate-700\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-slate-100\">\n                  {filteredProducts.map((product) => {\n                    const competitor = competitors.find(c => c.id === product.competitorId);\n                    const data = getProductData(product);\n                    \n                    return (\n                      <tr \n                        key={product.id} \n                        className=\"hover:bg-slate-50 cursor-pointer\"\n                        onClick={() => onProductClick(product)}\n                      >\n                        <td className=\"py-4 px-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <img \n                              src={product.imageUrl || '/placeholder-product.jpg'} \n                              alt={product.title}\n                              className=\"w-12 h-12 rounded-lg object-cover border border-slate-200\"\n                            />\n                            <div>\n                              <p className=\"font-medium text-slate-900\">{product.title}</p>\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"text-sm text-slate-500\">\n                                  No product details available\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <Badge className={`${getBrandColor(product.brand)} border-0`}>\n                            {product.brand}\n                          </Badge>\n                        </td>\n                        <td className=\"py-4 px-4 text-slate-600\">{competitor?.name}</td>\n                        <td className=\"py-4 px-4 text-right font-semibold text-slate-900\">\n                          ${data.current.toFixed(2)}\n                        </td>\n                        <td className=\"py-4 px-4 text-right text-sm text-slate-500\">\n                          ${data.min} / ${data.max}\n                        </td>\n                        <td className=\"py-4 px-4 text-center\">\n                          <Badge variant={data.inStock ? \"default\" : \"destructive\"} className=\"text-xs\">\n                            {data.inStock ? \"In Stock\" : \"Out of Stock\"}\n                          </Badge>\n                        </td>\n                        <td className=\"py-4 px-4 text-center text-xs text-slate-500\">\n                          No data\n                        </td>\n                        <td className=\"py-4 px-4 text-center\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-primary-600 hover:text-primary-700\">\n                            View\n                          </Button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n            <div className=\"px-6 py-4 border-t border-slate-200 flex items-center justify-between\">\n              <p className=\"text-sm text-slate-600\">\n                Showing 1-{filteredProducts.length} of {filteredProducts.length} products\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\" disabled>\n                  Previous\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  Next\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9448},"client/src/components/dashboard/recent-changes-section.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface RecentChange {\n  id: string;\n  productTitle: string;\n  competitorName: string;\n  changeType: string;\n  oldValue?: string;\n  newValue?: string;\n  timestamp: Date;\n}\n\ninterface RecentChangesSectionProps {\n  changes: RecentChange[];\n}\n\nexport function RecentChangesSection({ changes }: RecentChangesSectionProps) {\n  const getChangeColor = (changeType: string) => {\n    switch (changeType) {\n      case 'price_drop':\n        return 'bg-red-500';\n      case 'price_increase':\n        return 'bg-blue-500';\n      case 'stock_change':\n        return 'bg-green-500';\n      case 'promo_added':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-slate-500';\n    }\n  };\n\n  const getChangeBadge = (change: RecentChange) => {\n    switch (change.changeType) {\n      case 'price_drop':\n        return {\n          text: 'Price Drop',\n          variant: 'destructive' as const,\n          detail: `$${change.oldValue} → $${change.newValue}`\n        };\n      case 'price_increase':\n        return {\n          text: 'Price Increase',\n          variant: 'default' as const,\n          detail: `$${change.oldValue} → $${change.newValue}`\n        };\n      case 'stock_change':\n        return {\n          text: change.newValue === 'in_stock' ? 'Back in Stock' : 'Out of Stock',\n          variant: 'default' as const,\n          detail: ''\n        };\n      case 'promo_added':\n        return {\n          text: 'Promo Added',\n          variant: 'secondary' as const,\n          detail: change.newValue || ''\n        };\n      default:\n        return {\n          text: 'Change',\n          variant: 'secondary' as const,\n          detail: ''\n        };\n    }\n  };\n\n  return (\n    <Card className=\"border-slate-200 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-200\">\n        <CardTitle className=\"text-lg font-semibold text-slate-900\">\n          Recent Changes (24h)\n        </CardTitle>\n        <p className=\"text-slate-600 text-sm mt-1\">\n          Price and stock updates across competitors\n        </p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n          {changes.length > 0 ? (\n            changes.map((change) => {\n              const badge = getChangeBadge(change);\n              return (\n                <div key={change.id} className=\"flex items-start space-x-3 p-3 bg-slate-50 rounded-lg\">\n                  <div className={`flex-shrink-0 w-2 h-2 ${getChangeColor(change.changeType)} rounded-full mt-2`} />\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-slate-900\">{change.productTitle}</p>\n                    <p className=\"text-sm text-slate-600\">{change.competitorName}</p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Badge variant={badge.variant} className=\"text-xs\">\n                        {badge.text}\n                      </Badge>\n                      {badge.detail && (\n                        <span className=\"text-xs font-mono text-slate-500\">{badge.detail}</span>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-slate-400 mt-1\">\n                      {formatDistanceToNow(new Date(change.timestamp), { addSuffix: true })}\n                    </p>\n                  </div>\n                </div>\n              );\n            })\n          ) : (\n            <div className=\"text-center py-8 text-slate-500\">\n              <p>No recent changes</p>\n              <p className=\"text-sm mt-1\">Changes will appear here when products are updated</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3881},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Download, RefreshCw, Zap, Shield, Globe2, TrendingUp } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport logoImage from \"@assets/logo_flat_1755739978297.png\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  breadcrumbs?: { label: string; href?: string }[];\n  showActions?: boolean;\n  onExportCSV?: () => void;\n  onRunScrape?: () => void;\n}\n\nexport function Header({ \n  title, \n  subtitle, \n  breadcrumbs = [], \n  showActions = true,\n  onExportCSV,\n  onRunScrape \n}: HeaderProps) {\n  const { toast } = useToast();\n\n  const runScrapeMutation = useMutation({\n    mutationFn: () => api.runScrape({}),\n    onSuccess: () => {\n      toast({\n        title: \"Scraping Started\",\n        description: \"Scraping tasks have been queued successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start scraping tasks.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRunScrape = () => {\n    if (onRunScrape) {\n      onRunScrape();\n    } else {\n      runScrapeMutation.mutate();\n    }\n  };\n\n  const handleExportCSV = () => {\n    if (onExportCSV) {\n      onExportCSV();\n    } else {\n      api.exportCSV();\n    }\n  };\n\n  return (\n    <header className=\"bg-[#CB0000] text-white border-b border-red-800\">\n      <div className=\"relative overflow-hidden\">\n        {/* Tech pattern overlay */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/10 via-transparent to-black/10\" />\n        </div>\n\n        <div className=\"relative px-8 py-6\">\n          {/* Main header row */}\n          <div className=\"flex items-center justify-between\">\n            {/* Left section with logo */}\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-4\">\n                <img \n                  src={logoImage} \n                  alt=\"Sydney Tools\" \n                  className=\"h-5 w-auto filter brightness-0 invert opacity-90\"\n                />\n                <div className=\"h-12 w-px bg-gradient-to-b from-transparent via-black/30 to-transparent\" />\n                <div>\n                  <h1 className=\"text-xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n                    {title}\n                  </h1>\n                  {subtitle && (\n                    <p className=\"text-xs text-gray-400 mt-0.5\">{subtitle}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Right section with status and actions */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Status indicators */}\n              <div className=\"flex items-center space-x-2 px-3 py-1.5 bg-black/30 backdrop-blur-sm border border-black/40 rounded-full\">\n                <div className=\"w-1.5 h-1.5 bg-white rounded-full animate-pulse\" />\n                <span className=\"text-xs text-white font-medium\">LIVE</span>\n              </div>\n              <div className=\"flex items-center space-x-2 px-3 py-1.5 bg-black/30 backdrop-blur-sm border border-black/40 rounded-full\">\n                <Shield size={12} className=\"text-white\" />\n                <span className=\"text-xs text-white font-medium\">SECURE</span>\n              </div>\n              <div className=\"flex items-center space-x-2 px-3 py-1.5 bg-black/30 backdrop-blur-sm border border-black/40 rounded-full\">\n                <Globe2 size={12} className=\"text-gray-200\" />\n                <span className=\"text-xs text-white font-medium\">GLOBAL</span>\n              </div>\n            \n\n              {showActions && (\n                <div className=\"flex items-center space-x-2\">\n                  <Button \n                    variant=\"ghost\" \n                    onClick={handleExportCSV}\n                    className=\"bg-black/30 backdrop-blur-sm border border-black/40 text-white hover:bg-black/50 hover:text-white hover:border-white/50 transition-all duration-200 px-3 py-1.5 h-auto text-xs\"\n                  >\n                    <Download className=\"mr-1.5 h-3.5 w-3.5\" />\n                    Export\n                  </Button>\n                  <Button \n                    onClick={handleRunScrape}\n                    disabled={runScrapeMutation.isPending}\n                    className=\"bg-gradient-to-r from-black to-gray-800 hover:from-gray-800 hover:to-black text-white border-0 shadow-lg transition-all duration-200 px-3 py-1.5 h-auto text-xs\"\n                  >\n                    <RefreshCw className={`mr-1.5 h-3.5 w-3.5 ${runScrapeMutation.isPending ? 'animate-spin' : ''}`} />\n                    {runScrapeMutation.isPending ? 'Scanning...' : 'Scan'}\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":5045},"client/src/components/layout/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  ChartLine, \n  Folder, \n  Box, \n  Users, \n  Globe, \n  History, \n  Settings,\n  Activity,\n  Package,\n  FolderCog,\n  TrendingDown\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: ChartLine },\n  { name: \"Products\", href: \"/products\", icon: Box },\n  { name: \"Competitors\", href: \"/competitors\", icon: Users },\n  { name: \"Price Comparison\", href: \"/price-comparison\", icon: TrendingDown },\n  { name: \"Changes\", href: \"/changes\", icon: History },\n  { name: \"Admin\", href: \"/admin\", icon: Settings },\n];\n\nexport function Navbar() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"bg-gray-900 border-b border-gray-800 px-8\">\n      <div className=\"flex items-center justify-between\">\n        <ul className=\"flex items-center\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.name}>\n                <Link href={item.href} className=\"relative group\">\n                  <div className={`\n                    flex items-center space-x-2 px-4 py-4 text-xs font-medium uppercase tracking-wider transition-all duration-200\n                    ${isActive \n                      ? \"text-white bg-gradient-to-r from-[#CB0000]/20 to-transparent\" \n                      : \"text-gray-500 hover:text-gray-300\"\n                    }\n                  `}>\n                    <Icon size={18} className={`transition-all duration-200 ${isActive ? \"text-[#FF0000] drop-shadow-[0_0_8px_rgba(255,0,0,0.6)]\" : \"text-gray-600 group-hover:text-gray-400\"}`} />\n                    <span className={isActive ? \"drop-shadow-[0_0_4px_rgba(255,255,255,0.3)]\" : \"\"}>{item.name}</span>\n                    \n                    {/* Active indicator */}\n                    {isActive && (\n                      <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-[#FF0000] to-[#CB0000] shadow-[0_0_10px_rgba(255,0,0,0.5)]\" />\n                    )}\n                    \n                    {/* Hover indicator */}\n                    {!isActive && (\n                      <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-[#FF0000] to-[#CB0000] scale-x-0 group-hover:scale-x-100 transition-transform duration-200 origin-left\" />\n                    )}\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2 px-3 py-1.5 bg-gradient-to-r from-[#CB0000]/30 to-[#CB0000]/10 rounded-full border border-[#CB0000]/50 shadow-[0_0_15px_rgba(203,0,0,0.3)]\">\n            <Activity size={16} className=\"text-[#FF0000] animate-pulse drop-shadow-[0_0_8px_rgba(255,0,0,0.8)]\" />\n            <span className=\"text-xs text-gray-200 font-medium\">MONITORING ACTIVE</span>\n          </div>\n          <button className=\"text-gray-400 hover:text-[#FF0000] hover:drop-shadow-[0_0_8px_rgba(255,0,0,0.6)] transition-all duration-200 p-2 rounded-lg hover:bg-[#CB0000]/10 hover:border hover:border-[#CB0000]/30\">\n            <Settings size={18} />\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":3319},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  ChartLine, \n  Folder, \n  Box, \n  Users, \n  Globe, \n  History, \n  Settings,\n  User\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: ChartLine },\n  { name: \"Categories\", href: \"/categories\", icon: Folder },\n  { name: \"Products\", href: \"/products\", icon: Box },\n  { name: \"Competitors\", href: \"/competitors\", icon: Users },\n  { name: \"Pages & Scraping\", href: \"/pages\", icon: Globe },\n  { name: \"Recent Changes\", href: \"/changes\", icon: History },\n  { name: \"Admin\", href: \"/admin\", icon: Settings },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white border-r border-slate-200 flex flex-col\">\n      <div className=\"p-6 border-b border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <ChartLine className=\"text-white text-sm\" size={16} />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-slate-900\">CompetitorScope</h1>\n            <p className=\"text-xs text-slate-500\">Competitive Intelligence</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.name}>\n                <Link href={item.href} className={`flex items-center space-x-3 px-3 py-2 rounded-lg font-medium transition-colors ${\n                  isActive \n                    ? \"bg-primary/10 text-primary-700\" \n                    : \"text-slate-600 hover:bg-slate-100\"\n                }`}>\n                  <Icon size={16} />\n                  <span>{item.name}</span>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      <div className=\"p-4 border-t border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-slate-300 rounded-full flex items-center justify-center\">\n            <User className=\"text-slate-600 text-sm\" size={16} />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-slate-900\">User</p>\n            <p className=\"text-xs text-slate-500\">Please log in</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2546},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/product-detail-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink } from \"lucide-react\";\n\ninterface Product {\n  id: string;\n  title: string;\n  brand: string;\n  model?: string;\n  imageUrl?: string;\n  productUrl: string;\n}\n\ninterface ProductDetailModalProps {\n  product: Product | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ProductDetailModal({ product, isOpen, onClose }: ProductDetailModalProps) {\n  if (!product) return null;\n\n  // No specifications available - would be populated from real scraping data\n  const specs: Record<string, string> = {};\n\n  // No competitor price data available - would be populated from real scraping data\n  const competitorPrices: Array<{ competitor: string; price: number; inStock: boolean; updated: string }> = [];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>Product Details</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-6\">\n          <div>\n            <img \n              src={product.imageUrl || '/placeholder-product.jpg'} \n              alt={product.title}\n              className=\"w-full h-80 object-cover rounded-lg border border-slate-200\"\n            />\n            {/* Additional product images would be displayed here when available from scraping */}\n          </div>\n          \n          <div>\n            <div className=\"mb-6\">\n              <h3 className=\"text-2xl font-bold text-slate-900\">{product.title}</h3>\n              <p className=\"text-slate-600 mt-2\">\n                Product description would be populated from scraping data\n              </p>\n              <div className=\"flex items-center gap-2 mt-4\">\n                <Badge variant=\"outline\">{product.brand}</Badge>\n                {product.model && <Badge variant=\"secondary\">{product.model}</Badge>}\n                <Button variant=\"outline\" size=\"sm\" asChild>\n                  <a href={product.productUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    View on Site\n                  </a>\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"text-lg font-semibold text-slate-900 mb-3\">Price History</h4>\n                <div className=\"bg-slate-50 p-4 rounded-lg\">\n                  <div className=\"h-32 flex items-center justify-center text-slate-500\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl mb-2\">📈</div>\n                      <span>Price history chart would be displayed here</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-lg font-semibold text-slate-900 mb-3\">Specifications</h4>\n                {Object.keys(specs).length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {Object.entries(specs).map(([key, value]) => (\n                      <div key={key} className=\"flex justify-between py-2 border-b border-slate-200\">\n                        <span className=\"text-slate-600\">{key}</span>\n                        <span className=\"font-medium text-slate-900\">{value}</span>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"bg-slate-50 p-4 rounded-lg text-center text-slate-500\">\n                    <div className=\"text-2xl mb-2\">📋</div>\n                    <span>Product specifications would be populated from scraping data</span>\n                  </div>\n                )}\n              </div>\n              \n              <div>\n                <h4 className=\"text-lg font-semibold text-slate-900 mb-3\">Competitor Pricing</h4>\n                {competitorPrices.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {competitorPrices.map((price, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <span className=\"font-medium text-slate-900\">{price.competitor}</span>\n                          <Badge variant={price.inStock ? \"default\" : \"destructive\"} className=\"text-xs\">\n                            {price.inStock ? \"In Stock\" : \"Out of Stock\"}\n                          </Badge>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-slate-900\">${price.price}.00</p>\n                          <p className=\"text-xs text-slate-500\">Updated {price.updated}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"bg-slate-50 p-4 rounded-lg text-center text-slate-500\">\n                    <div className=\"text-2xl mb-2\">💰</div>\n                    <span>Competitor pricing data would be populated from scraping</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5563},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/multi-site-scraper.ts":{"content":"import axios from 'axios';\nimport * as cheerio from 'cheerio';\nimport { extractModelNumberWithAI } from './ai-model-extractor';\n\nexport interface ScrapedProduct {\n  title: string;\n  price: number;\n  regularPrice?: number;\n  salePrice?: number;\n  image: string;\n  url: string;\n  brand: string;\n  model: string;\n  category: string;\n  sku: string;\n  competitorName: string;\n  hasPromotion?: boolean;\n  promotionText?: string;\n  redemptionBadge?: string;\n}\n\nexport interface ScrapingResult {\n  products: ScrapedProduct[];\n  totalProducts: number;\n  categoryName: string;\n  competitorName: string;\n  sourceUrl: string;\n  extractedAt: string;\n}\n\nexport class MultiSiteScraper {\n  private userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36';\n\n  private normalizeImageUrl(imageUrl: string, baseUrl: string): string {\n    if (!imageUrl) return '';\n    \n    if (imageUrl.startsWith('data:')) return imageUrl;\n    if (imageUrl.startsWith('//')) return 'https:' + imageUrl;\n    if (imageUrl.startsWith('/')) {\n      const base = new URL(baseUrl);\n      return `${base.protocol}//${base.hostname}${imageUrl}`;\n    }\n    \n    return imageUrl;\n  }\n\n  private parsePrice(priceText: string): number {\n    const cleanPrice = priceText.replace(/[^\\d.,]/g, '');\n    const numberPrice = parseFloat(cleanPrice.replace(/,/g, ''));\n    return isNaN(numberPrice) ? 0 : numberPrice;\n  }\n\n  private extractBrand(title: string): string {\n    const brandPatterns = [\n      /^(Makita|DeWalt|Milwaukee|Bosch|Ryobi|Stanley|Black\\+Decker|Festool|Metabo|Hilti)/i,\n      /^(SP Tools|Kincrome|Sidchrome|Stanley|GearWrench|Teng Tools|Bahco)/i,\n      /^(Matson|Schumacher|NOCO|Century|Projecta|CTEK|Optimate)/i,\n      /^(Ozito|AEG|Hitachi|Panasonic|Craftsman|Ridgid)/i,\n      /^(SCA|ToolPRO|Blackridge|Mechpro)/i,\n      /^([A-Z][A-Z0-9]+(?:\\s+[A-Z][a-z]+)?)/,\n      /^([A-Z][a-z]+)/\n    ];\n\n    for (const pattern of brandPatterns) {\n      const match = title.match(pattern);\n      if (match) {\n        return match[1].trim();\n      }\n    }\n    return 'Unknown';\n  }\n\n  private extractModel(title: string, brand: string): string {\n    const modelPatterns = [\n      /([A-Z]{2}\\d{5})/i,\n      /([A-Z]+\\d{3,})/i,\n      /(\\b\\d{5,}\\b)/,\n      /(Model\\s+[A-Z0-9-]+)/i,\n      /([A-Z0-9-]{6,})/\n    ];\n\n    for (const pattern of modelPatterns) {\n      const match = title.match(pattern);\n      if (match) {\n        return match[1].toUpperCase();\n      }\n    }\n\n    return title.replace(brand, '').trim().replace(/^[-\\s]+/, '').split(' ')[0] || 'Unknown';\n  }\n\n  private detectPromotion($product: any): { hasPromotion: boolean; promotionText?: string; redemptionBadge?: string } {\n    const promotionSelectors = [\n      '.promo-badge',\n      '.promotion',\n      '.offer',\n      '.special',\n      '.sale-badge',\n      '.discount-badge',\n      '[class*=\"badge\"]',\n      '[class*=\"promo\"]',\n      '[class*=\"offer\"]',\n      '.redemption',\n      '.cashback',\n      '.bonus'\n    ];\n\n    for (const selector of promotionSelectors) {\n      const promoEl = $product.find(selector).first();\n      if (promoEl.length) {\n        const text = promoEl.text().trim();\n        if (text) {\n          return {\n            hasPromotion: true,\n            promotionText: text,\n            redemptionBadge: text\n          };\n        }\n      }\n    }\n\n    // Check for image overlays\n    const overlaySelectors = ['.product-badge', '.overlay', '.product-overlay', '[class*=\"overlay\"]'];\n    for (const selector of overlaySelectors) {\n      const overlayEl = $product.find(selector).first();\n      if (overlayEl.length) {\n        const text = overlayEl.text().trim();\n        if (text && (text.toLowerCase().includes('bonus') || text.toLowerCase().includes('redemption') || text.toLowerCase().includes('cashback'))) {\n          return {\n            hasPromotion: true,\n            promotionText: text,\n            redemptionBadge: text\n          };\n        }\n      }\n    }\n\n    return { hasPromotion: false };\n  }\n\n  private async extractSalePrice($product: any): Promise<{ regularPrice?: number; salePrice?: number }> {\n    // Look for crossed out/original price\n    const regularPriceSelectors = [\n      '.was-price',\n      '.old-price',\n      '.regular-price',\n      '.original-price',\n      '.list-price',\n      'del',\n      's',\n      'strike',\n      '[class*=\"was\"]',\n      '[class*=\"original\"]',\n      '.price-was'\n    ];\n\n    // Look for current/sale price\n    const salePriceSelectors = [\n      '.sale-price',\n      '.special-price',\n      '.now-price',\n      '.current-price',\n      '.price-now',\n      '.price.sale',\n      '[class*=\"sale-price\"]',\n      '[class*=\"now\"]'\n    ];\n\n    let regularPrice: number | undefined;\n    let salePrice: number | undefined;\n\n    // Extract regular price\n    for (const selector of regularPriceSelectors) {\n      const priceEl = $product.find(selector).first();\n      if (priceEl.length) {\n        const price = this.parsePrice(priceEl.text());\n        if (price > 0) {\n          regularPrice = price;\n          break;\n        }\n      }\n    }\n\n    // Extract sale price\n    for (const selector of salePriceSelectors) {\n      const priceEl = $product.find(selector).first();\n      if (priceEl.length) {\n        const price = this.parsePrice(priceEl.text());\n        if (price > 0) {\n          salePrice = price;\n          break;\n        }\n      }\n    }\n\n    // If no specific sale price found, get the main price\n    if (!salePrice) {\n      const mainPriceSelectors = ['.price', '.amount', '[class*=\"price\"]:not([class*=\"was\"]):not([class*=\"old\"])'];\n      for (const selector of mainPriceSelectors) {\n        const priceEl = $product.find(selector).first();\n        if (priceEl.length) {\n          const price = this.parsePrice(priceEl.text());\n          if (price > 0) {\n            salePrice = price;\n            break;\n          }\n        }\n      }\n    }\n\n    return { regularPrice, salePrice };\n  }\n\n  // Sydney Tools Scraper\n  async scrapeSydneyTools(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product-card, .ant-card').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.ant-card-meta-title, .product-title').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `SYDNEY-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Sydney Tools',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Sydney Tools',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Sydney Tools:', error);\n      return this.emptyResult(url, 'Sydney Tools');\n    }\n  }\n\n  // Bunnings Scraper\n  async scrapeBunnings(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('[data-locator=\"product-tile\"], .product-tile, article[class*=\"ProductTile\"]').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('[data-locator=\"product-title\"], h3, .product-title').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || $product.find('img').first().attr('data-src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `BUNNINGS-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Bunnings',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Bunnings',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Bunnings:', error);\n      return this.emptyResult(url, 'Bunnings');\n    }\n  }\n\n  // Total Tools Scraper\n  async scrapeTotalTools(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product-item, .product-tile, [class*=\"product-card\"]').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.product-item-name, .product-name, h3').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        \n        // Improved image extraction for Total Tools - avoid placeholder images\n        let imageUrl = '';\n        \n        // First try to find the actual product image (not placeholder)\n        const $productImage = $product.find('img.product-image-photo, img[alt*=\"' + title.substring(0, 20) + '\"]').first();\n        if ($productImage.length) {\n          imageUrl = $productImage.attr('src') || '';\n          // Check if it's a placeholder (base64 1x1 pixel)\n          if (imageUrl && imageUrl.includes('data:image') && imageUrl.includes('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGP6zwAAAgcBApocMXEAAAAASUVORK5CYII=')) {\n            // It's a placeholder, try data attributes\n            imageUrl = $productImage.attr('data-src') || \n                      $productImage.attr('data-lazy') || \n                      $productImage.attr('data-original') ||\n                      $productImage.attr('data-image') || '';\n          }\n        }\n        \n        // If still no valid image, try all img elements and find one with a real URL\n        if (!imageUrl || imageUrl.includes('data:image')) {\n          $product.find('img').each((i, img) => {\n            const src = $(img).attr('src') || '';\n            if (src && !src.includes('data:image') && src.includes('totaltools.com.au/media')) {\n              imageUrl = src;\n              return false; // break the loop\n            }\n          });\n        }\n        \n        // As last resort, check lazy load attributes on any img\n        if (!imageUrl || imageUrl.includes('data:image')) {\n          const $img = $product.find('img').first();\n          imageUrl = $img.attr('data-src') || \n                    $img.attr('data-lazy') || \n                    $img.attr('data-original') ||\n                    $img.attr('data-image') || '';\n        }\n        \n        const image = this.normalizeImageUrl(imageUrl, url);\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `TOTAL-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Total Tools',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Total Tools',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Total Tools:', error);\n      return this.emptyResult(url, 'Total Tools');\n    }\n  }\n\n  // Trade Tools Scraper\n  async scrapeTradeTools(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product, .product-item, .grid-item').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.product-name, h2, h3').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `TRADE-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Trade Tools',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Trade Tools',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Trade Tools:', error);\n      return this.emptyResult(url, 'Trade Tools');\n    }\n  }\n\n  // Supercheap Auto Scraper\n  async scrapeSuperCheapAuto(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('[data-testid=\"product-tile\"], .product-tile, .product-item').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('[data-testid=\"product-title\"], .product-title, h3').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          // Special handling for SCA promotions\n          const scaPromo = $product.find('.club-price, .member-price').first();\n          if (scaPromo.length) {\n            promo.hasPromotion = true;\n            promo.promotionText = 'Club Price Available';\n            promo.redemptionBadge = 'CLUB';\n          }\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `SCA-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Supercheap Auto',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Supercheap Auto',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Supercheap Auto:', error);\n      return this.emptyResult(url, 'Supercheap Auto');\n    }\n  }\n\n  // Repco Scraper\n  async scrapeRepco(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product-tile, .product-item, [class*=\"ProductCard\"]').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.product-tile__title, .product-name, h3').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `REPCO-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Repco',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Repco',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Repco:', error);\n      return this.emptyResult(url, 'Repco');\n    }\n  }\n\n  // Autobarn Scraper\n  async scrapeAutobarn(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product, .product-item, .product-card').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.product-name, h3, .title').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `AUTO-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Autobarn',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Autobarn',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Autobarn:', error);\n      return this.emptyResult(url, 'Autobarn');\n    }\n  }\n\n  // Mitre 10 Scraper\n  async scrapeMitre10(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product-tile, .product-item, article[class*=\"product\"]').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.product-tile__title, .product-name, h3').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `MITRE-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Mitre 10',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Mitre 10',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Mitre 10:', error);\n      return this.emptyResult(url, 'Mitre 10');\n    }\n  }\n\n  // Gasweld Scraper\n  async scrapeGasweld(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product, .product-item, .grid-item').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.product-title, h3, .title').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `GAS-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Gasweld',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Gasweld',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Gasweld:', error);\n      return this.emptyResult(url, 'Gasweld');\n    }\n  }\n\n  // Tools Warehouse Scraper\n  async scrapeToolsWarehouse(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product-item, .product, .item').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('.product-name, h3, .title').first().text().trim();\n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `TOOLS-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Tools Warehouse',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Tools Warehouse',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Tools Warehouse:', error);\n      return this.emptyResult(url, 'Tools Warehouse');\n    }\n  }\n\n  // Toolkit Depot Scraper (keeping the existing one)\n  async scrapeToolkitDepot(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n\n      const productElements = $('.product-item, .product-card, .woocommerce-loop-product, .product').toArray();\n      for (let index = 0; index < productElements.length && products.length < 50; index++) {\n        const element = productElements[index];\n        const $product = $(element);\n        \n        const title = $product.find('h2 a, h3 a, .product-title a, .woocommerce-loop-product__title').first().text().trim() ||\n                     $product.find('a').first().attr('title') || '';\n        \n        const priceData = await this.extractSalePrice($product);\n        const image = this.normalizeImageUrl(\n          $product.find('img').first().attr('src') || $product.find('img').first().attr('data-src') || '',\n          url\n        );\n        const productUrl = this.normalizeImageUrl(\n          $product.find('a').first().attr('href') || '',\n          url\n        );\n\n        if (title) {\n          const brand = this.extractBrand(title);\n          const model = await this.enhanceModelExtraction(title);\n          const promo = this.detectPromotion($product);\n\n          products.push({\n            title,\n            price: priceData.salePrice || 0,\n            regularPrice: priceData.regularPrice,\n            salePrice: priceData.salePrice,\n            image,\n            url: productUrl,\n            brand,\n            model,\n            category: this.extractCategoryFromUrl(url),\n            sku: `TOOLKIT-${String(index + 1).padStart(3, '0')}`,\n            competitorName: 'Toolkit Depot',\n            ...promo\n          });\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName: 'Toolkit Depot',\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error scraping Toolkit Depot:', error);\n      return this.emptyResult(url, 'Toolkit Depot');\n    }\n  }\n\n  // Generic fallback scraper\n  async scrapeGeneric(url: string): Promise<ScrapingResult> {\n    try {\n      const response = await axios.get(url, {\n        headers: { 'User-Agent': this.userAgent },\n        timeout: 30000\n      });\n\n      const $ = cheerio.load(response.data);\n      const products: ScrapedProduct[] = [];\n      const competitorName = this.extractCompetitorName(url);\n\n      // Generic product selectors\n      const productSelectors = [\n        '.product',\n        '.product-item',\n        '.product-card',\n        '[class*=\"product\"]',\n        '.item',\n        '[data-product]',\n        'article'\n      ];\n\n      for (const selector of productSelectors) {\n        const productElements = $(selector);\n        \n        if (productElements.length > 5) {\n          const productArray = productElements.toArray();\n          \n          for (let i = 0; i < productArray.length && products.length < 50; i++) {\n            const element = productArray[i];\n            const $product = $(element);\n            \n            const title = $product.find('h1, h2, h3, h4, [class*=\"title\"], [class*=\"name\"]')\n              .first().text().trim() ||\n              $product.find('a').first().attr('title') || '';\n\n            if (title && title.length > 3) {\n              const priceData = await this.extractSalePrice($product);\n              const image = this.normalizeImageUrl(\n                $product.find('img').first().attr('src') || $product.find('img').first().attr('data-src') || '',\n                url\n              );\n              const productUrl = this.normalizeImageUrl(\n                $product.find('a').first().attr('href') || '',\n                url\n              );\n\n              const brand = this.extractBrand(title);\n              const model = await this.enhanceModelExtraction(title);\n              const promo = this.detectPromotion($product);\n\n              products.push({\n                title,\n                price: priceData.salePrice || 0,\n                regularPrice: priceData.regularPrice,\n                salePrice: priceData.salePrice,\n                image,\n                url: productUrl,\n                brand,\n                model,\n                category: this.extractCategoryFromUrl(url),\n                sku: `${competitorName.toUpperCase()}-${String(products.length + 1).padStart(3, '0')}`,\n                competitorName,\n                ...promo\n              });\n            }\n          }\n          \n          if (products.length > 0) break;\n        }\n      }\n\n      return {\n        products,\n        totalProducts: products.length,\n        categoryName: this.extractCategoryFromUrl(url),\n        competitorName,\n        sourceUrl: url,\n        extractedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error(`Error scraping ${url}:`, error);\n      return this.emptyResult(url, this.extractCompetitorName(url));\n    }\n  }\n\n  // Main routing function\n  async scrapeCompetitor(url: string): Promise<ScrapingResult> {\n    const hostname = new URL(url).hostname.toLowerCase().replace('www.', '');\n    \n    console.log(`Scraping ${hostname} from URL: ${url}`);\n\n    // Route to specific scrapers based on domain\n    if (hostname.includes('sydneytools')) {\n      return this.scrapeSydneyTools(url);\n    } else if (hostname.includes('toolkitdepot')) {\n      return this.scrapeToolkitDepot(url);\n    } else if (hostname.includes('bunnings')) {\n      return this.scrapeBunnings(url);\n    } else if (hostname.includes('toolswarehouse')) {\n      return this.scrapeToolsWarehouse(url);\n    } else if (hostname.includes('tradetools')) {\n      return this.scrapeTradeTools(url);\n    } else if (hostname.includes('totaltools')) {\n      return this.scrapeTotalTools(url);\n    } else if (hostname.includes('gasweld')) {\n      return this.scrapeGasweld(url);\n    } else if (hostname.includes('supercheapauto')) {\n      return this.scrapeSuperCheapAuto(url);\n    } else if (hostname.includes('repco')) {\n      return this.scrapeRepco(url);\n    } else if (hostname.includes('autobarn')) {\n      return this.scrapeAutobarn(url);\n    } else if (hostname.includes('mitre10')) {\n      return this.scrapeMitre10(url);\n    } else {\n      // Fallback to generic scraper\n      return this.scrapeGeneric(url);\n    }\n  }\n\n  // Helper methods\n  private extractCategoryFromUrl(url: string): string {\n    const patterns = [\n      /\\/category\\/([^\\/]+)/i,\n      /\\/([^\\/]+)\\/[^\\/]*$/i,\n      /\\/c\\/([^\\/]+)/i\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[1].replace(/-/g, ' ').replace(/_/g, ' ')\n          .split(' ')\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n          .join(' ');\n      }\n    }\n    return 'Products';\n  }\n\n  private extractCompetitorName(url: string): string {\n    try {\n      const hostname = new URL(url).hostname.replace('www.', '');\n      const parts = hostname.split('.');\n      return parts[0].charAt(0).toUpperCase() + parts[0].slice(1);\n    } catch {\n      return 'Unknown Competitor';\n    }\n  }\n\n  private async enhanceModelExtraction(title: string): Promise<string> {\n    try {\n      if (process.env.OPENAI_API_KEY) {\n        const model = await extractModelNumberWithAI(title);\n        if (model && model !== 'N/A') {\n          return model;\n        }\n      }\n    } catch (error) {\n      console.warn('AI model extraction failed:', error);\n    }\n    \n    // Fallback to basic extraction\n    const brand = this.extractBrand(title);\n    return this.extractModel(title, brand);\n  }\n\n  private emptyResult(url: string, competitorName: string): ScrapingResult {\n    return {\n      products: [],\n      totalProducts: 0,\n      categoryName: this.extractCategoryFromUrl(url),\n      competitorName,\n      sourceUrl: url,\n      extractedAt: new Date().toISOString()\n    };\n  }\n}\n\nexport const multiSiteScraper = new MultiSiteScraper();","size_bytes":37248},"server/rendered-get.ts":{"content":"import { execFile } from \"node:child_process\";\n\nexport async function renderedGet(url: string, timeoutMs = 45000): Promise<string> {\n  const args = [\n    \"--headless=new\",\n    \"--disable-gpu\",\n    \"--no-sandbox\",\n    \"--disable-setuid-sandbox\",\n    \"--disable-dev-shm-usage\",\n    \"--virtual-time-budget=15000\",\n    \"--timeout=40000\",\n    \"--dump-dom\",\n    url\n  ];\n\n  return new Promise((resolve, reject) => {\n    execFile(\"chromium\", args, { timeout: timeoutMs, maxBuffer: 50 * 1024 * 1024 }, (err, stdout) => {\n      if (err) return reject(err);\n      resolve(stdout.toString(\"utf8\"));\n    });\n  });\n}","size_bytes":603},"server/test-scraper.ts":{"content":"import { multiSiteScraper } from './multi-site-scraper';\nimport { playwrightScraper } from './playwright-scraper';\n\nasync function testScrapers() {\n  console.log('Testing Multi-Site Scraper...\\n');\n  \n  // Test 1: Standard scraper on static site\n  try {\n    console.log('Testing Toolkit Depot (standard scraper)...');\n    const toolkitResult = await multiSiteScraper.scrapeCompetitor(\n      'https://www.toolkitdepot.com.au/car-battery-chargers-jump-starters/car-battery-chargers'\n    );\n    console.log(`Found ${toolkitResult.products.length} products from Toolkit Depot`);\n    if (toolkitResult.products.length > 0) {\n      console.log('Sample product:', toolkitResult.products[0]);\n    }\n  } catch (error) {\n    console.error('Toolkit Depot scraping failed:', error);\n  }\n  \n  // Test 2: Playwright scraper on Sydney Tools\n  try {\n    console.log('\\nTesting Sydney Tools (Playwright scraper)...');\n    const sydneyResult = await playwrightScraper.scrapeSydneyTools(\n      'https://sydneytools.com.au/collections/battery-chargers'\n    );\n    console.log(`Found ${sydneyResult.products.length} products from Sydney Tools`);\n    if (sydneyResult.products.length > 0) {\n      console.log('Sample product:', sydneyResult.products[0]);\n    }\n  } catch (error) {\n    console.error('Sydney Tools scraping failed:', error);\n  }\n  \n  // Test 3: Generic scraper fallback\n  try {\n    console.log('\\nTesting generic scraper on unknown site...');\n    const genericResult = await multiSiteScraper.scrapeGeneric(\n      'https://example-tools.com/products'\n    );\n    console.log(`Found ${genericResult.products.length} products from generic site`);\n  } catch (error) {\n    console.error('Generic scraping failed:', error);\n  }\n}\n\ntestScrapers().then(() => {\n  console.log('\\nScraper tests complete');\n  process.exit(0);\n}).catch(error => {\n  console.error('Test failed:', error);\n  process.exit(1);\n});","size_bytes":1889},"server/trade-tools-scraper.ts":{"content":"import { chromium, Page } from 'playwright';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nasync function whichChromium() {\n  try {\n    const { stdout } = await execAsync(\"which chromium\");\n    return stdout.trim();\n  } catch { \n    return undefined; \n  }\n}\n\nconst sleep = (ms: number) => new Promise(r => setTimeout(r, ms));\n\nexport const tradeToolsScraper = {\n  async scrapeTradeTools(url: string) {\n    console.log('Starting Trade Tools specific scraper for:', url);\n    \n    const execPath = await whichChromium();\n    const browser = await chromium.launch({\n      headless: true,\n      executablePath: execPath,\n      args: [\"--no-sandbox\", \"--disable-setuid-sandbox\", \"--disable-dev-shm-usage\"]\n    });\n\n    const ctx = await browser.newContext({\n      userAgent: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n      viewport: { width: 1920, height: 1080 }\n    });\n\n    const page = await ctx.newPage();\n    \n    try {\n      // Navigate to the page\n      await page.goto(url, { waitUntil: \"domcontentloaded\", timeout: 60000 });\n      console.log('Page loaded, waiting for products...');\n      \n      // Wait for the page to stabilize\n      await page.waitForLoadState(\"networkidle\", { timeout: 30000 }).catch(() => {\n        console.log('Network idle timeout - continuing');\n      });\n      \n      // Wait a bit for React to render\n      await sleep(3000);\n      \n      // Scroll to trigger lazy loading\n      console.log('Scrolling to load all products...');\n      const scrollHeight = await page.evaluate(() => document.body.scrollHeight);\n      const viewportHeight = await page.evaluate(() => window.innerHeight);\n      const scrollSteps = Math.ceil(scrollHeight / viewportHeight);\n      \n      for (let i = 0; i < scrollSteps; i++) {\n        await page.evaluate((step) => {\n          window.scrollTo(0, step * window.innerHeight);\n        }, i);\n        await sleep(500);\n      }\n      \n      // Scroll back to top\n      await page.evaluate(() => window.scrollTo(0, 0));\n      await sleep(1000);\n      \n      // Extract products using page evaluation\n      console.log('Extracting products...');\n      const products = await page.evaluate(() => {\n        const items: any[] = [];\n        \n        // Strategy 1: Look for any element containing product information\n        // Trade Tools uses minified class names, so we need to be smart about detection\n        \n        // Find all links that might be products\n        const allLinks = Array.from(document.querySelectorAll('a'));\n        const productLinks = allLinks.filter(link => {\n          const href = link.getAttribute('href') || '';\n          // Trade Tools product URLs contain /p/ followed by product code\n          return href.includes('/p/') && !href.includes('signin') && !href.includes('cart');\n        });\n        \n        console.log(`Found ${productLinks.length} potential product links`);\n        \n        // If we found product links, extract data from their containers\n        if (productLinks.length > 0) {\n          productLinks.forEach(link => {\n            const href = link.href;\n            const container = link.closest('article') || link.parentElement?.parentElement || link.parentElement;\n            \n            if (!container) return;\n            \n            // Extract title - look for heading tags or the link text\n            let title = '';\n            const heading = container.querySelector('h1, h2, h3, h4, h5, h6');\n            if (heading) {\n              title = heading.textContent?.trim() || '';\n            } else {\n              // Sometimes the title is in the link itself\n              const linkText = link.textContent?.trim() || '';\n              if (linkText && linkText.length > 10 && !linkText.includes('$')) {\n                title = linkText;\n              }\n            }\n            \n            // Extract price - look for dollar signs\n            let price = '';\n            let originalPrice = '';\n            const priceMatches = (container.textContent || '').matchAll(/\\$[\\d,]+(?:\\.\\d{2})?/g);\n            const prices = Array.from(priceMatches).map(m => m[0]);\n            if (prices.length > 0) {\n              price = prices[prices.length - 1]; // Usually the last price is the current price\n              if (prices.length > 1) {\n                originalPrice = prices[0]; // First price might be the original\n              }\n            }\n            \n            // Extract image\n            let image = '';\n            const img = container.querySelector('img');\n            if (img) {\n              image = img.src || img.dataset.src || img.dataset.lazySrc || '';\n              // Convert relative URLs to absolute\n              if (image && !image.startsWith('http')) {\n                image = new URL(image, window.location.origin).toString();\n              }\n            }\n            \n            // Extract product code\n            let code = '';\n            const codeMatch = container.textContent?.match(/Product code:\\s*([A-Z0-9-]+)/i);\n            if (codeMatch) {\n              code = codeMatch[1];\n            }\n            \n            // Only add if we have at least a title\n            if (title) {\n              items.push({\n                title,\n                price,\n                originalPrice: originalPrice !== price ? originalPrice : '',\n                url: href,\n                image,\n                code\n              });\n            }\n          });\n        }\n        \n        // Strategy 2: If no product links found, look for product gallery items\n        if (items.length === 0) {\n          const gallery = document.querySelector('[class*=\"productGallery\"]');\n          if (gallery) {\n            // Find all direct children that might be products\n            const children = Array.from(gallery.children);\n            console.log(`Found gallery with ${children.length} children`);\n            \n            children.forEach(child => {\n              const link = child.querySelector('a');\n              const img = child.querySelector('img');\n              const text = child.textContent || '';\n              \n              // Extract product info from text\n              const titleMatch = text.match(/([A-Z][^$]+?)(?:\\$|Product code:)/);\n              const priceMatch = text.match(/\\$[\\d,]+(?:\\.\\d{2})?/);\n              const codeMatch = text.match(/Product code:\\s*([A-Z0-9-]+)/i);\n              \n              if (titleMatch || priceMatch) {\n                items.push({\n                  title: titleMatch ? titleMatch[1].trim() : 'Product',\n                  price: priceMatch ? priceMatch[0] : '',\n                  url: link ? link.href : '',\n                  image: img ? (img.src || img.dataset.src || '') : '',\n                  code: codeMatch ? codeMatch[1] : ''\n                });\n              }\n            });\n          }\n        }\n        \n        return items;\n      });\n      \n      console.log(`Extracted ${products.length} products`);\n      \n      // Clean up and format the products\n      const formattedProducts = products.map(p => {\n        // Parse price to remove $ and convert to number\n        const parsePrice = (priceStr: string) => {\n          if (!priceStr) return null;\n          const cleaned = priceStr.replace(/[^0-9.]/g, '');\n          const num = parseFloat(cleaned);\n          return isNaN(num) ? null : num;\n        };\n        \n        return {\n          title: p.title,\n          price: parsePrice(p.price),\n          originalPrice: parsePrice(p.originalPrice),\n          url: p.url,\n          image: p.image,\n          modelNumber: p.code,\n          inStock: true\n        };\n      }).filter(p => p.title && p.title.length > 0);\n      \n      await browser.close();\n      \n      return {\n        success: true,\n        products: formattedProducts,\n        competitorName: 'Trade Tools',\n        message: `Found ${formattedProducts.length} products from Trade Tools`\n      };\n      \n    } catch (error: any) {\n      console.error('Error scraping Trade Tools:', error);\n      await browser.close();\n      \n      return {\n        success: false,\n        products: [],\n        competitorName: 'Trade Tools',\n        message: `Failed to scrape Trade Tools: ${error.message}`\n      };\n    }\n  }\n};","size_bytes":8331},"client/src/components/ImportReviewDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  AlertCircle, \n  CheckCircle2, \n  Package, \n  Link, \n  X,\n  Loader2,\n  ShoppingCart,\n  DollarSign\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Product {\n  title: string;\n  price: number;\n  image?: string;\n  url?: string;\n  brand?: string;\n  modelNumber?: string;\n  isNew: boolean;\n  matchedProduct?: {\n    id: string;\n    name: string;\n    modelNumber: string;\n  };\n}\n\ninterface ImportReviewDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  previewData: {\n    competitorName: string;\n    sourceUrl: string;\n    totalProducts: number;\n    newProducts: number;\n    matchedProducts: number;\n    products: Product[];\n    scraperUsed?: string;\n  } | null;\n}\n\nexport function ImportReviewDialog({ isOpen, onClose, previewData }: ImportReviewDialogProps) {\n  const { toast } = useToast();\n  const [selectedProducts, setSelectedProducts] = useState<Set<number>>(new Set());\n  const [selectAll, setSelectAll] = useState(false);\n\n  // Confirm import mutation\n  const confirmImport = useMutation({\n    mutationFn: async (data: { products: Product[], competitorName: string, sourceUrl: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/confirm-import\", data);\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products-unified\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/competitors\"] });\n      \n      toast({ \n        title: \"Import Successful\",\n        description: data.message || `Successfully imported ${data.savedProducts} products`\n      });\n      \n      onClose();\n      setSelectedProducts(new Set());\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Import Failed\",\n        description: error.message || \"Failed to import products\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  if (!previewData) return null;\n\n  const handleSelectAll = () => {\n    if (selectAll) {\n      setSelectedProducts(new Set());\n    } else {\n      const allIndices = previewData.products.map((_, index) => index);\n      setSelectedProducts(new Set(allIndices));\n    }\n    setSelectAll(!selectAll);\n  };\n\n  const handleSelectProduct = (index: number) => {\n    const newSelected = new Set(selectedProducts);\n    if (newSelected.has(index)) {\n      newSelected.delete(index);\n    } else {\n      newSelected.add(index);\n    }\n    setSelectedProducts(newSelected);\n    setSelectAll(newSelected.size === previewData.products.length);\n  };\n\n  const handleConfirmImport = () => {\n    const productsToImport = previewData.products.filter((_, index) => selectedProducts.has(index));\n    \n    if (productsToImport.length === 0) {\n      toast({ \n        title: \"No products selected\",\n        description: \"Please select at least one product to import\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    confirmImport.mutate({\n      products: productsToImport,\n      competitorName: previewData.competitorName,\n      sourceUrl: previewData.sourceUrl\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl\">Review Import from {previewData.competitorName}</DialogTitle>\n          <DialogDescription>\n            Found {previewData.totalProducts} products • {previewData.newProducts} new • {previewData.matchedProducts} matched\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Stats Bar */}\n          <div className=\"flex gap-4 p-3 bg-slate-50 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Package className=\"h-4 w-4 text-slate-600\" />\n              <span className=\"text-sm font-medium\">{previewData.totalProducts} Total</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm font-medium text-green-600\">{previewData.newProducts} New</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Link className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-blue-600\">{previewData.matchedProducts} Matched</span>\n            </div>\n            {previewData.scraperUsed && (\n              <Badge variant=\"outline\" className=\"ml-auto\">\n                {previewData.scraperUsed} Scraper\n              </Badge>\n            )}\n          </div>\n\n          {/* Select All */}\n          <div className=\"flex items-center gap-2 px-1\">\n            <Checkbox\n              checked={selectAll}\n              onCheckedChange={handleSelectAll}\n            />\n            <label className=\"text-sm font-medium cursor-pointer\" onClick={handleSelectAll}>\n              Select All ({previewData.products.length} products)\n            </label>\n            <span className=\"ml-auto text-sm text-slate-600\">\n              {selectedProducts.size} selected\n            </span>\n          </div>\n\n          {/* Products List */}\n          <ScrollArea className=\"h-[400px] border rounded-lg\">\n            <div className=\"p-4 space-y-3\">\n              {previewData.products.map((product, index) => (\n                <Card \n                  key={index} \n                  className={`cursor-pointer transition-colors ${\n                    selectedProducts.has(index) ? 'border-blue-500 bg-blue-50/50' : ''\n                  }`}\n                  onClick={() => handleSelectProduct(index)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-4\">\n                      <Checkbox\n                        checked={selectedProducts.has(index)}\n                        onCheckedChange={() => handleSelectProduct(index)}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                      \n                      {/* Product Image */}\n                      <div className=\"w-16 h-16 bg-slate-100 rounded flex-shrink-0\">\n                        {product.image ? (\n                          <img \n                            src={product.image} \n                            alt={product.title}\n                            className=\"w-full h-full object-contain rounded\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <Package className=\"h-6 w-6 text-slate-400\" />\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Product Details */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-sm line-clamp-2\">{product.title}</h4>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              {product.modelNumber && product.modelNumber !== 'N/A' && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  Model: {product.modelNumber}\n                                </Badge>\n                              )}\n                              {product.brand && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {product.brand}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"text-right ml-4\">\n                            <div className=\"flex items-center gap-1\">\n                              <DollarSign className=\"h-3 w-3\" />\n                              <span className=\"font-semibold\">{product.price?.toFixed(2) || 'N/A'}</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Match Status */}\n                        <div className=\"mt-2\">\n                          {product.isNew ? (\n                            <div className=\"flex items-center gap-1 text-green-600\">\n                              <CheckCircle2 className=\"h-3 w-3\" />\n                              <span className=\"text-xs font-medium\">New Product</span>\n                            </div>\n                          ) : product.matchedProduct ? (\n                            <div className=\"flex items-center gap-1 text-blue-600\">\n                              <Link className=\"h-3 w-3\" />\n                              <span className=\"text-xs\">\n                                Matches: {product.matchedProduct.name} ({product.matchedProduct.modelNumber})\n                              </span>\n                            </div>\n                          ) : null}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </ScrollArea>\n\n          {/* Actions */}\n          <div className=\"flex justify-between items-center pt-4 border-t\">\n            <div className=\"text-sm text-slate-600\">\n              {selectedProducts.size === 0 ? (\n                \"Select products to import\"\n              ) : (\n                `${selectedProducts.size} product${selectedProducts.size === 1 ? '' : 's'} will be imported`\n              )}\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onClose} disabled={confirmImport.isPending}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleConfirmImport}\n                disabled={selectedProducts.size === 0 || confirmImport.isPending}\n              >\n                {confirmImport.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Importing...\n                  </>\n                ) : (\n                  <>\n                    <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                    Import Selected ({selectedProducts.size})\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10992}},"version":1}